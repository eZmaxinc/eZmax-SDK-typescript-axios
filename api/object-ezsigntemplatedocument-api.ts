/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { CommonResponseErrorSTemporaryFileUrl } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentCreateObjectV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentCreateObjectV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentEditObjectV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentEditObjectV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentExtractTextV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentExtractTextV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentFlattenV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentGetObjectV2Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentGetWordsPositionsV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentGetWordsPositionsV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentPatchObjectV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatedocumentPatchObjectV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsigntemplatedocumentApi - axios parameter creator
 * @export
 */
export const ObjectEzsigntemplatedocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatedocument
         * @param {EzsigntemplatedocumentCreateObjectV1Request} ezsigntemplatedocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentCreateObjectV1: async (ezsigntemplatedocumentCreateObjectV1Request: EzsigntemplatedocumentCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigntemplatedocumentCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatedocumentCreateObjectV1', 'ezsigntemplatedocumentCreateObjectV1Request', ezsigntemplatedocumentCreateObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatedocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatedocumentCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit multiple Ezsigntemplatedocumentpagerecognitions
         * @summary Edit multiple Ezsigntemplatedocumentpagerecognitions
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request} ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1: async (pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request: EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            // verify required parameter 'ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request' is not null or undefined
            assertParamExists('ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1', 'ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request', ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatedocumentpagerecognitions`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
         * @summary Edit multiple Ezsigntemplateformfieldgroups
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request} ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1: async (pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request: EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            // verify required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' is not null or undefined
            assertParamExists('ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1', 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request', ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
         * @summary Edit multiple Ezsigntemplatesignatures
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request} ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentEditEzsigntemplatesignaturesV1: async (pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request: EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentEditEzsigntemplatesignaturesV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            // verify required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' is not null or undefined
            assertParamExists('ezsigntemplatedocumentEditEzsigntemplatesignaturesV1', 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request', ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditObjectV1Request} ezsigntemplatedocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentEditObjectV1: async (pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditObjectV1Request: EzsigntemplatedocumentEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentEditObjectV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            // verify required parameter 'ezsigntemplatedocumentEditObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatedocumentEditObjectV1', 'ezsigntemplatedocumentEditObjectV1Request', ezsigntemplatedocumentEditObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatedocumentEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Extract text from Ezsigntemplatedocument area
         * @summary Extract text from Ezsigntemplatedocument area
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentExtractTextV1Request} ezsigntemplatedocumentExtractTextV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentExtractTextV1: async (pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentExtractTextV1Request: EzsigntemplatedocumentExtractTextV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentExtractTextV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            // verify required parameter 'ezsigntemplatedocumentExtractTextV1Request' is not null or undefined
            assertParamExists('ezsigntemplatedocumentExtractTextV1', 'ezsigntemplatedocumentExtractTextV1Request', ezsigntemplatedocumentExtractTextV1Request)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/extractText`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatedocumentExtractTextV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
         * @summary Flatten
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentFlattenV1: async (pkiEzsigntemplatedocumentID: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentFlattenV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ezsigntemplatedocumentFlattenV1', 'body', body)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatedocumentpagerecognitions
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1: async (pkiEzsigntemplatedocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpagerecognitions`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatedocumentpages
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1: async (pkiEzsigntemplatedocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplateformfieldgroups
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1: async (pkiEzsigntemplatedocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatesignatures
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetEzsigntemplatesignaturesV1: async (pkiEzsigntemplatedocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentGetEzsigntemplatesignaturesV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetObjectV2: async (pkiEzsigntemplatedocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentGetObjectV2', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            const localVarPath = `/2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve positions X,Y of given words from a Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentGetWordsPositionsV1Request} ezsigntemplatedocumentGetWordsPositionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetWordsPositionsV1: async (pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentGetWordsPositionsV1Request: EzsigntemplatedocumentGetWordsPositionsV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentGetWordsPositionsV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            // verify required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' is not null or undefined
            assertParamExists('ezsigntemplatedocumentGetWordsPositionsV1', 'ezsigntemplatedocumentGetWordsPositionsV1Request', ezsigntemplatedocumentGetWordsPositionsV1Request)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatedocumentGetWordsPositionsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentPatchObjectV1Request} ezsigntemplatedocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentPatchObjectV1: async (pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentPatchObjectV1Request: EzsigntemplatedocumentPatchObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatedocumentID' is not null or undefined
            assertParamExists('ezsigntemplatedocumentPatchObjectV1', 'pkiEzsigntemplatedocumentID', pkiEzsigntemplatedocumentID)
            // verify required parameter 'ezsigntemplatedocumentPatchObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatedocumentPatchObjectV1', 'ezsigntemplatedocumentPatchObjectV1Request', ezsigntemplatedocumentPatchObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}`
                .replace(`{${"pkiEzsigntemplatedocumentID"}}`, encodeURIComponent(String(pkiEzsigntemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatedocumentPatchObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PATCH' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsigntemplatedocumentApi - functional programming interface
 * @export
 */
export const ObjectEzsigntemplatedocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsigntemplatedocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatedocument
         * @param {EzsigntemplatedocumentCreateObjectV1Request} ezsigntemplatedocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentCreateObjectV1(ezsigntemplatedocumentCreateObjectV1Request: EzsigntemplatedocumentCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentCreateObjectV1(ezsigntemplatedocumentCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit multiple Ezsigntemplatedocumentpagerecognitions
         * @summary Edit multiple Ezsigntemplatedocumentpagerecognitions
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request} ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request: EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
         * @summary Edit multiple Ezsigntemplateformfieldgroups
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request} ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request: EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
         * @summary Edit multiple Ezsigntemplatesignatures
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request} ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request: EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentEditEzsigntemplatesignaturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditObjectV1Request} ezsigntemplatedocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentEditObjectV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditObjectV1Request: EzsigntemplatedocumentEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentEditObjectV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Extract text from Ezsigntemplatedocument area
         * @summary Extract text from Ezsigntemplatedocument area
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentExtractTextV1Request} ezsigntemplatedocumentExtractTextV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentExtractTextV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentExtractTextV1Request: EzsigntemplatedocumentExtractTextV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentExtractTextV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentExtractTextV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentExtractTextV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentExtractTextV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
         * @summary Flatten
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentFlattenV1(pkiEzsigntemplatedocumentID: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentFlattenV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentFlattenV1(pkiEzsigntemplatedocumentID, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentFlattenV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatedocumentpagerecognitions
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatedocumentpages
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(pkiEzsigntemplatedocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplateformfieldgroups
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatesignatures
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentGetEzsigntemplatesignaturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentGetObjectV2(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentGetObjectV2(pkiEzsigntemplatedocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve positions X,Y of given words from a Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentGetWordsPositionsV1Request} ezsigntemplatedocumentGetWordsPositionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentGetWordsPositionsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentGetWordsPositionsV1Request: EzsigntemplatedocumentGetWordsPositionsV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentGetWordsPositionsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentGetWordsPositionsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentGetWordsPositionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentPatchObjectV1Request} ezsigntemplatedocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatedocumentPatchObjectV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentPatchObjectV1Request: EzsigntemplatedocumentPatchObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatedocumentPatchObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatedocumentPatchObjectV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatedocumentApi.ezsigntemplatedocumentPatchObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectEzsigntemplatedocumentApi - factory interface
 * @export
 */
export const ObjectEzsigntemplatedocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsigntemplatedocumentApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatedocument
         * @param {EzsigntemplatedocumentCreateObjectV1Request} ezsigntemplatedocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentCreateObjectV1(ezsigntemplatedocumentCreateObjectV1Request: EzsigntemplatedocumentCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentCreateObjectV1Response> {
            return localVarFp.ezsigntemplatedocumentCreateObjectV1(ezsigntemplatedocumentCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit multiple Ezsigntemplatedocumentpagerecognitions
         * @summary Edit multiple Ezsigntemplatedocumentpagerecognitions
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request} ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request: EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response> {
            return localVarFp.ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
         * @summary Edit multiple Ezsigntemplateformfieldgroups
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request} ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request: EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> {
            return localVarFp.ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
         * @summary Edit multiple Ezsigntemplatesignatures
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request} ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request: EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> {
            return localVarFp.ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentEditObjectV1Request} ezsigntemplatedocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentEditObjectV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditObjectV1Request: EzsigntemplatedocumentEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentEditObjectV1Response> {
            return localVarFp.ezsigntemplatedocumentEditObjectV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Extract text from Ezsigntemplatedocument area
         * @summary Extract text from Ezsigntemplatedocument area
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentExtractTextV1Request} ezsigntemplatedocumentExtractTextV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentExtractTextV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentExtractTextV1Request: EzsigntemplatedocumentExtractTextV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentExtractTextV1Response> {
            return localVarFp.ezsigntemplatedocumentExtractTextV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentExtractTextV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
         * @summary Flatten
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentFlattenV1(pkiEzsigntemplatedocumentID: number, body: object, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentFlattenV1Response> {
            return localVarFp.ezsigntemplatedocumentFlattenV1(pkiEzsigntemplatedocumentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatedocumentpagerecognitions
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response> {
            return localVarFp.ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatedocumentpages
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> {
            return localVarFp.ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(pkiEzsigntemplatedocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplateformfieldgroups
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> {
            return localVarFp.ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatesignatures
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> {
            return localVarFp.ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetObjectV2(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentGetObjectV2Response> {
            return localVarFp.ezsigntemplatedocumentGetObjectV2(pkiEzsigntemplatedocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve positions X,Y of given words from a Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentGetWordsPositionsV1Request} ezsigntemplatedocumentGetWordsPositionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentGetWordsPositionsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentGetWordsPositionsV1Request: EzsigntemplatedocumentGetWordsPositionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentGetWordsPositionsV1Response> {
            return localVarFp.ezsigntemplatedocumentGetWordsPositionsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch an existing Ezsigntemplatedocument
         * @param {number} pkiEzsigntemplatedocumentID 
         * @param {EzsigntemplatedocumentPatchObjectV1Request} ezsigntemplatedocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatedocumentPatchObjectV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentPatchObjectV1Request: EzsigntemplatedocumentPatchObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatedocumentPatchObjectV1Response> {
            return localVarFp.ezsigntemplatedocumentPatchObjectV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsigntemplatedocumentApi - object-oriented interface
 * @export
 * @class ObjectEzsigntemplatedocumentApi
 * @extends {BaseAPI}
 */
export class ObjectEzsigntemplatedocumentApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsigntemplatedocument
     * @param {EzsigntemplatedocumentCreateObjectV1Request} ezsigntemplatedocumentCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentCreateObjectV1(ezsigntemplatedocumentCreateObjectV1Request: EzsigntemplatedocumentCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentCreateObjectV1(ezsigntemplatedocumentCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit multiple Ezsigntemplatedocumentpagerecognitions
     * @summary Edit multiple Ezsigntemplatedocumentpagerecognitions
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request} ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request: EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
     * @summary Edit multiple Ezsigntemplateformfieldgroups
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request} ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request: EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
     * @summary Edit multiple Ezsigntemplatesignatures
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request} ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request: EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsigntemplatedocument
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {EzsigntemplatedocumentEditObjectV1Request} ezsigntemplatedocumentEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentEditObjectV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentEditObjectV1Request: EzsigntemplatedocumentEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentEditObjectV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Extract text from Ezsigntemplatedocument area
     * @summary Extract text from Ezsigntemplatedocument area
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {EzsigntemplatedocumentExtractTextV1Request} ezsigntemplatedocumentExtractTextV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentExtractTextV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentExtractTextV1Request: EzsigntemplatedocumentExtractTextV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentExtractTextV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentExtractTextV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
     * @summary Flatten
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentFlattenV1(pkiEzsigntemplatedocumentID: number, body: object, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentFlattenV1(pkiEzsigntemplatedocumentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatedocumentpagerecognitions
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1(pkiEzsigntemplatedocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatedocumentpages
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(pkiEzsigntemplatedocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplateformfieldgroups
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatedocument\'s Ezsigntemplatesignatures
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatedocument
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentGetObjectV2(pkiEzsigntemplatedocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentGetObjectV2(pkiEzsigntemplatedocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve positions X,Y of given words from a Ezsigntemplatedocument
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {EzsigntemplatedocumentGetWordsPositionsV1Request} ezsigntemplatedocumentGetWordsPositionsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentGetWordsPositionsV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentGetWordsPositionsV1Request: EzsigntemplatedocumentGetWordsPositionsV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentGetWordsPositionsV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch an existing Ezsigntemplatedocument
     * @param {number} pkiEzsigntemplatedocumentID 
     * @param {EzsigntemplatedocumentPatchObjectV1Request} ezsigntemplatedocumentPatchObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatedocumentApi
     */
    public ezsigntemplatedocumentPatchObjectV1(pkiEzsigntemplatedocumentID: number, ezsigntemplatedocumentPatchObjectV1Request: EzsigntemplatedocumentPatchObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatedocumentApiFp(this.configuration).ezsigntemplatedocumentPatchObjectV1(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}

