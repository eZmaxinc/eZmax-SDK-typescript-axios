/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponse } from '../model';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import type { SupplyCreateObjectV1Request } from '../model';
// @ts-ignore
import type { SupplyCreateObjectV1Response } from '../model';
// @ts-ignore
import type { SupplyEditObjectV1Request } from '../model';
// @ts-ignore
import type { SupplyGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { SupplyGetListV1Response } from '../model';
// @ts-ignore
import type { SupplyGetObjectV2Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectSupplyApi - axios parameter creator
 * @export
 */
export const ObjectSupplyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Supply
         * @param {SupplyCreateObjectV1Request} supplyCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyCreateObjectV1: async (supplyCreateObjectV1Request: SupplyCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplyCreateObjectV1Request' is not null or undefined
            assertParamExists('supplyCreateObjectV1', 'supplyCreateObjectV1Request', supplyCreateObjectV1Request)
            const localVarPath = `/1/object/supply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supplyCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyDeleteObjectV1: async (pkiSupplyID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSupplyID' is not null or undefined
            assertParamExists('supplyDeleteObjectV1', 'pkiSupplyID', pkiSupplyID)
            const localVarPath = `/1/object/supply/{pkiSupplyID}`
                .replace(`{${"pkiSupplyID"}}`, encodeURIComponent(String(pkiSupplyID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {SupplyEditObjectV1Request} supplyEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyEditObjectV1: async (pkiSupplyID: number, supplyEditObjectV1Request: SupplyEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSupplyID' is not null or undefined
            assertParamExists('supplyEditObjectV1', 'pkiSupplyID', pkiSupplyID)
            // verify required parameter 'supplyEditObjectV1Request' is not null or undefined
            assertParamExists('supplyEditObjectV1', 'supplyEditObjectV1Request', supplyEditObjectV1Request)
            const localVarPath = `/1/object/supply/{pkiSupplyID}`
                .replace(`{${"pkiSupplyID"}}`, encodeURIComponent(String(pkiSupplyID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supplyEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Supply to be used in a dropdown or autocomplete control.
         * @summary Retrieve Supplys and IDs
         * @param {SupplyGetAutocompleteV2SSelectorEnum} sSelector The type of Supplys to return
         * @param {SupplyGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyGetAutocompleteV2: async (sSelector: SupplyGetAutocompleteV2SSelectorEnum, eFilterActive?: SupplyGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('supplyGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/supply/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Supply list
         * @param {SupplyGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyGetListV1: async (eOrderBy?: SupplyGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/supply/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyGetObjectV2: async (pkiSupplyID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSupplyID' is not null or undefined
            assertParamExists('supplyGetObjectV2', 'pkiSupplyID', pkiSupplyID)
            const localVarPath = `/2/object/supply/{pkiSupplyID}`
                .replace(`{${"pkiSupplyID"}}`, encodeURIComponent(String(pkiSupplyID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectSupplyApi - functional programming interface
 * @export
 */
export const ObjectSupplyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectSupplyApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Supply
         * @param {SupplyCreateObjectV1Request} supplyCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyCreateObjectV1(supplyCreateObjectV1Request: SupplyCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplyCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyCreateObjectV1(supplyCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSupplyApi.supplyCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyDeleteObjectV1(pkiSupplyID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyDeleteObjectV1(pkiSupplyID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSupplyApi.supplyDeleteObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {SupplyEditObjectV1Request} supplyEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyEditObjectV1(pkiSupplyID: number, supplyEditObjectV1Request: SupplyEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyEditObjectV1(pkiSupplyID, supplyEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSupplyApi.supplyEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Supply to be used in a dropdown or autocomplete control.
         * @summary Retrieve Supplys and IDs
         * @param {SupplyGetAutocompleteV2SSelectorEnum} sSelector The type of Supplys to return
         * @param {SupplyGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyGetAutocompleteV2(sSelector: SupplyGetAutocompleteV2SSelectorEnum, eFilterActive?: SupplyGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplyGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSupplyApi.supplyGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Supply list
         * @param {SupplyGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyGetListV1(eOrderBy?: SupplyGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplyGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSupplyApi.supplyGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyGetObjectV2(pkiSupplyID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplyGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyGetObjectV2(pkiSupplyID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSupplyApi.supplyGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectSupplyApi - factory interface
 * @export
 */
export const ObjectSupplyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectSupplyApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Supply
         * @param {SupplyCreateObjectV1Request} supplyCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyCreateObjectV1(supplyCreateObjectV1Request: SupplyCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<SupplyCreateObjectV1Response> {
            return localVarFp.supplyCreateObjectV1(supplyCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyDeleteObjectV1(pkiSupplyID: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.supplyDeleteObjectV1(pkiSupplyID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {SupplyEditObjectV1Request} supplyEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyEditObjectV1(pkiSupplyID: number, supplyEditObjectV1Request: SupplyEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.supplyEditObjectV1(pkiSupplyID, supplyEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Supply to be used in a dropdown or autocomplete control.
         * @summary Retrieve Supplys and IDs
         * @param {SupplyGetAutocompleteV2SSelectorEnum} sSelector The type of Supplys to return
         * @param {SupplyGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyGetAutocompleteV2(sSelector: SupplyGetAutocompleteV2SSelectorEnum, eFilterActive?: SupplyGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<SupplyGetAutocompleteV2Response> {
            return localVarFp.supplyGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Supply list
         * @param {SupplyGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyGetListV1(eOrderBy?: SupplyGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<SupplyGetListV1Response> {
            return localVarFp.supplyGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Supply
         * @param {number} pkiSupplyID The unique ID of the Supply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyGetObjectV2(pkiSupplyID: number, options?: RawAxiosRequestConfig): AxiosPromise<SupplyGetObjectV2Response> {
            return localVarFp.supplyGetObjectV2(pkiSupplyID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectSupplyApi - object-oriented interface
 * @export
 * @class ObjectSupplyApi
 * @extends {BaseAPI}
 */
export class ObjectSupplyApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Supply
     * @param {SupplyCreateObjectV1Request} supplyCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSupplyApi
     */
    public supplyCreateObjectV1(supplyCreateObjectV1Request: SupplyCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectSupplyApiFp(this.configuration).supplyCreateObjectV1(supplyCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Supply
     * @param {number} pkiSupplyID The unique ID of the Supply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSupplyApi
     */
    public supplyDeleteObjectV1(pkiSupplyID: number, options?: RawAxiosRequestConfig) {
        return ObjectSupplyApiFp(this.configuration).supplyDeleteObjectV1(pkiSupplyID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Supply
     * @param {number} pkiSupplyID The unique ID of the Supply
     * @param {SupplyEditObjectV1Request} supplyEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSupplyApi
     */
    public supplyEditObjectV1(pkiSupplyID: number, supplyEditObjectV1Request: SupplyEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectSupplyApiFp(this.configuration).supplyEditObjectV1(pkiSupplyID, supplyEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Supply to be used in a dropdown or autocomplete control.
     * @summary Retrieve Supplys and IDs
     * @param {SupplyGetAutocompleteV2SSelectorEnum} sSelector The type of Supplys to return
     * @param {SupplyGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSupplyApi
     */
    public supplyGetAutocompleteV2(sSelector: SupplyGetAutocompleteV2SSelectorEnum, eFilterActive?: SupplyGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectSupplyApiFp(this.configuration).supplyGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Supply list
     * @param {SupplyGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSupplyApi
     */
    public supplyGetListV1(eOrderBy?: SupplyGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectSupplyApiFp(this.configuration).supplyGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Supply
     * @param {number} pkiSupplyID The unique ID of the Supply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSupplyApi
     */
    public supplyGetObjectV2(pkiSupplyID: number, options?: RawAxiosRequestConfig) {
        return ObjectSupplyApiFp(this.configuration).supplyGetObjectV2(pkiSupplyID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SupplyGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type SupplyGetAutocompleteV2SSelectorEnum = typeof SupplyGetAutocompleteV2SSelectorEnum[keyof typeof SupplyGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const SupplyGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type SupplyGetAutocompleteV2EFilterActiveEnum = typeof SupplyGetAutocompleteV2EFilterActiveEnum[keyof typeof SupplyGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const SupplyGetListV1EOrderByEnum = {
    pkiSupplyID_ASC: 'pkiSupplyID_ASC',
    pkiSupplyID_DESC: 'pkiSupplyID_DESC',
    fkiGlaccountID_ASC: 'fkiGlaccountID_ASC',
    fkiGlaccountID_DESC: 'fkiGlaccountID_DESC',
    fkiGlaccountcontainerID_ASC: 'fkiGlaccountcontainerID_ASC',
    fkiGlaccountcontainerID_DESC: 'fkiGlaccountcontainerID_DESC',
    fkiVariableexpenseID_ASC: 'fkiVariableexpenseID_ASC',
    fkiVariableexpenseID_DESC: 'fkiVariableexpenseID_DESC',
    sSupplyCode_ASC: 'sSupplyCode_ASC',
    sSupplyCode_DESC: 'sSupplyCode_DESC',
    sSupplyDescriptionX_ASC: 'sSupplyDescriptionX_ASC',
    sSupplyDescriptionX_DESC: 'sSupplyDescriptionX_DESC',
    dSupplyUnitprice_ASC: 'dSupplyUnitprice_ASC',
    dSupplyUnitprice_DESC: 'dSupplyUnitprice_DESC',
    bSupplyIsactive_ASC: 'bSupplyIsactive_ASC',
    bSupplyIsactive_DESC: 'bSupplyIsactive_DESC',
    bSupplyVariableprice_ASC: 'bSupplyVariableprice_ASC',
    bSupplyVariableprice_DESC: 'bSupplyVariableprice_DESC'
} as const;
export type SupplyGetListV1EOrderByEnum = typeof SupplyGetListV1EOrderByEnum[keyof typeof SupplyGetListV1EOrderByEnum];
