/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { InscriptionGetAttachmentsV1Response } from '../model';
// @ts-ignore
import type { InscriptionGetCommunicationCountV1Response } from '../model';
// @ts-ignore
import type { InscriptionGetCommunicationListV1Response } from '../model';
// @ts-ignore
import type { InscriptionGetCommunicationrecipientsV1Response } from '../model';
// @ts-ignore
import type { InscriptionGetCommunicationsendersV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectInscriptionApi - axios parameter creator
 * @export
 */
export const ObjectInscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve Inscription\'s Attachments
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetAttachmentsV1: async (pkiInscriptionID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiInscriptionID' is not null or undefined
            assertParamExists('inscriptionGetAttachmentsV1', 'pkiInscriptionID', pkiInscriptionID)
            const localVarPath = `/1/object/inscription/{pkiInscriptionID}/getAttachments`
                .replace(`{${"pkiInscriptionID"}}`, encodeURIComponent(String(pkiInscriptionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Communication count
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetCommunicationCountV1: async (pkiInscriptionID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiInscriptionID' is not null or undefined
            assertParamExists('inscriptionGetCommunicationCountV1', 'pkiInscriptionID', pkiInscriptionID)
            const localVarPath = `/1/object/inscription/{pkiInscriptionID}/getCommunicationCount`
                .replace(`{${"pkiInscriptionID"}}`, encodeURIComponent(String(pkiInscriptionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Communication list
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetCommunicationListV1: async (pkiInscriptionID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiInscriptionID' is not null or undefined
            assertParamExists('inscriptionGetCommunicationListV1', 'pkiInscriptionID', pkiInscriptionID)
            const localVarPath = `/1/object/inscription/{pkiInscriptionID}/getCommunicationList`
                .replace(`{${"pkiInscriptionID"}}`, encodeURIComponent(String(pkiInscriptionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Inscription\'s Communicationrecipient
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetCommunicationrecipientsV1: async (pkiInscriptionID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiInscriptionID' is not null or undefined
            assertParamExists('inscriptionGetCommunicationrecipientsV1', 'pkiInscriptionID', pkiInscriptionID)
            const localVarPath = `/1/object/inscription/{pkiInscriptionID}/getCommunicationrecipients`
                .replace(`{${"pkiInscriptionID"}}`, encodeURIComponent(String(pkiInscriptionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Inscription\'s Communicationsender
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetCommunicationsendersV1: async (pkiInscriptionID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiInscriptionID' is not null or undefined
            assertParamExists('inscriptionGetCommunicationsendersV1', 'pkiInscriptionID', pkiInscriptionID)
            const localVarPath = `/1/object/inscription/{pkiInscriptionID}/getCommunicationsenders`
                .replace(`{${"pkiInscriptionID"}}`, encodeURIComponent(String(pkiInscriptionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectInscriptionApi - functional programming interface
 * @export
 */
export const ObjectInscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectInscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve Inscription\'s Attachments
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inscriptionGetAttachmentsV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InscriptionGetAttachmentsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inscriptionGetAttachmentsV1(pkiInscriptionID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectInscriptionApi.inscriptionGetAttachmentsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Communication count
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inscriptionGetCommunicationCountV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InscriptionGetCommunicationCountV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inscriptionGetCommunicationCountV1(pkiInscriptionID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectInscriptionApi.inscriptionGetCommunicationCountV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Communication list
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inscriptionGetCommunicationListV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InscriptionGetCommunicationListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inscriptionGetCommunicationListV1(pkiInscriptionID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectInscriptionApi.inscriptionGetCommunicationListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Inscription\'s Communicationrecipient
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inscriptionGetCommunicationrecipientsV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InscriptionGetCommunicationrecipientsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inscriptionGetCommunicationrecipientsV1(pkiInscriptionID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectInscriptionApi.inscriptionGetCommunicationrecipientsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Inscription\'s Communicationsender
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inscriptionGetCommunicationsendersV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InscriptionGetCommunicationsendersV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inscriptionGetCommunicationsendersV1(pkiInscriptionID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectInscriptionApi.inscriptionGetCommunicationsendersV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectInscriptionApi - factory interface
 * @export
 */
export const ObjectInscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectInscriptionApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve Inscription\'s Attachments
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetAttachmentsV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): AxiosPromise<InscriptionGetAttachmentsV1Response> {
            return localVarFp.inscriptionGetAttachmentsV1(pkiInscriptionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Communication count
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetCommunicationCountV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): AxiosPromise<InscriptionGetCommunicationCountV1Response> {
            return localVarFp.inscriptionGetCommunicationCountV1(pkiInscriptionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Communication list
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetCommunicationListV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): AxiosPromise<InscriptionGetCommunicationListV1Response> {
            return localVarFp.inscriptionGetCommunicationListV1(pkiInscriptionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Inscription\'s Communicationrecipient
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetCommunicationrecipientsV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): AxiosPromise<InscriptionGetCommunicationrecipientsV1Response> {
            return localVarFp.inscriptionGetCommunicationrecipientsV1(pkiInscriptionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Inscription\'s Communicationsender
         * @param {number} pkiInscriptionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inscriptionGetCommunicationsendersV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig): AxiosPromise<InscriptionGetCommunicationsendersV1Response> {
            return localVarFp.inscriptionGetCommunicationsendersV1(pkiInscriptionID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectInscriptionApi - object-oriented interface
 * @export
 * @class ObjectInscriptionApi
 * @extends {BaseAPI}
 */
export class ObjectInscriptionApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve Inscription\'s Attachments
     * @param {number} pkiInscriptionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectInscriptionApi
     */
    public inscriptionGetAttachmentsV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig) {
        return ObjectInscriptionApiFp(this.configuration).inscriptionGetAttachmentsV1(pkiInscriptionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Communication count
     * @param {number} pkiInscriptionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectInscriptionApi
     */
    public inscriptionGetCommunicationCountV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig) {
        return ObjectInscriptionApiFp(this.configuration).inscriptionGetCommunicationCountV1(pkiInscriptionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Communication list
     * @param {number} pkiInscriptionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectInscriptionApi
     */
    public inscriptionGetCommunicationListV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig) {
        return ObjectInscriptionApiFp(this.configuration).inscriptionGetCommunicationListV1(pkiInscriptionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Inscription\'s Communicationrecipient
     * @param {number} pkiInscriptionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectInscriptionApi
     */
    public inscriptionGetCommunicationrecipientsV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig) {
        return ObjectInscriptionApiFp(this.configuration).inscriptionGetCommunicationrecipientsV1(pkiInscriptionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Inscription\'s Communicationsender
     * @param {number} pkiInscriptionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectInscriptionApi
     */
    public inscriptionGetCommunicationsendersV1(pkiInscriptionID: number, options?: RawAxiosRequestConfig) {
        return ObjectInscriptionApiFp(this.configuration).inscriptionGetCommunicationsendersV1(pkiInscriptionID, options).then((request) => request(this.axios, this.basePath));
    }
}

