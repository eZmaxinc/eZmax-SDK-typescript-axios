/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponse } from '../model';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicCreateEzsignfolderV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicCreateEzsignfolderV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicCreateObjectV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicCreateObjectV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicEditObjectV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicGetFormsDataV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicGetListV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicGetObjectV2Response } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicResetLimitExceededCounterV1Response } from '../model';
// @ts-ignore
import type { EzsigntemplatepublicResetUrlV1Response } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsigntemplatepublicApi - axios parameter creator
 * @export
 */
export const ObjectEzsigntemplatepublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an Ezsignfolder
         * @summary Create an Ezsignfolder
         * @param {EzsigntemplatepublicCreateEzsignfolderV1Request} ezsigntemplatepublicCreateEzsignfolderV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicCreateEzsignfolderV1: async (ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepublicCreateEzsignfolderV1', 'ezsigntemplatepublicCreateEzsignfolderV1Request', ezsigntemplatepublicCreateEzsignfolderV1Request)
            const localVarPath = `/1/object/ezsigntemplatepublic/createEzsignfolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepublicCreateEzsignfolderV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepublic
         * @param {EzsigntemplatepublicCreateObjectV1Request} ezsigntemplatepublicCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicCreateObjectV1: async (ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigntemplatepublicCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepublicCreateObjectV1', 'ezsigntemplatepublicCreateObjectV1Request', ezsigntemplatepublicCreateObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatepublic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepublicCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepublic
         * @param {number} pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
         * @param {EzsigntemplatepublicEditObjectV1Request} ezsigntemplatepublicEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicEditObjectV1: async (pkiEzsigntemplatepublicID: number, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepublicID' is not null or undefined
            assertParamExists('ezsigntemplatepublicEditObjectV1', 'pkiEzsigntemplatepublicID', pkiEzsigntemplatepublicID)
            // verify required parameter 'ezsigntemplatepublicEditObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepublicEditObjectV1', 'ezsigntemplatepublicEditObjectV1Request', ezsigntemplatepublicEditObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}`
                .replace(`{${"pkiEzsigntemplatepublicID"}}`, encodeURIComponent(String(pkiEzsigntemplatepublicID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepublicEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the Ezsigntemplatepublic details
         * @summary Retrieve the Ezsigntemplatepublic details
         * @param {EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request} ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1: async (ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1', 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request', ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request)
            const localVarPath = `/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepublic\'s forms data
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicGetFormsDataV1: async (pkiEzsigntemplatepublicID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepublicID' is not null or undefined
            assertParamExists('ezsigntemplatepublicGetFormsDataV1', 'pkiEzsigntemplatepublicID', pkiEzsigntemplatepublicID)
            const localVarPath = `/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData`
                .replace(`{${"pkiEzsigntemplatepublicID"}}`, encodeURIComponent(String(pkiEzsigntemplatepublicID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour<br>Day<br>Month<br>Total |
         * @summary Retrieve Ezsigntemplatepublic list
         * @param {EzsigntemplatepublicGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicGetListV1: async (eOrderBy?: EzsigntemplatepublicGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/ezsigntemplatepublic/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepublic
         * @param {number} pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicGetObjectV2: async (pkiEzsigntemplatepublicID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepublicID' is not null or undefined
            assertParamExists('ezsigntemplatepublicGetObjectV2', 'pkiEzsigntemplatepublicID', pkiEzsigntemplatepublicID)
            const localVarPath = `/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}`
                .replace(`{${"pkiEzsigntemplatepublicID"}}`, encodeURIComponent(String(pkiEzsigntemplatepublicID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset the limit exceeded counter
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicResetLimitExceededCounterV1: async (pkiEzsigntemplatepublicID: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepublicID' is not null or undefined
            assertParamExists('ezsigntemplatepublicResetLimitExceededCounterV1', 'pkiEzsigntemplatepublicID', pkiEzsigntemplatepublicID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ezsigntemplatepublicResetLimitExceededCounterV1', 'body', body)
            const localVarPath = `/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter`
                .replace(`{${"pkiEzsigntemplatepublicID"}}`, encodeURIComponent(String(pkiEzsigntemplatepublicID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset the Ezsigntemplatepublic url
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicResetUrlV1: async (pkiEzsigntemplatepublicID: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepublicID' is not null or undefined
            assertParamExists('ezsigntemplatepublicResetUrlV1', 'pkiEzsigntemplatepublicID', pkiEzsigntemplatepublicID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ezsigntemplatepublicResetUrlV1', 'body', body)
            const localVarPath = `/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl`
                .replace(`{${"pkiEzsigntemplatepublicID"}}`, encodeURIComponent(String(pkiEzsigntemplatepublicID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsigntemplatepublicApi - functional programming interface
 * @export
 */
export const ObjectEzsigntemplatepublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsigntemplatepublicApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an Ezsignfolder
         * @summary Create an Ezsignfolder
         * @param {EzsigntemplatepublicCreateEzsignfolderV1Request} ezsigntemplatepublicCreateEzsignfolderV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicCreateEzsignfolderV1(ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepublicCreateEzsignfolderV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicCreateEzsignfolderV1(ezsigntemplatepublicCreateEzsignfolderV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicCreateEzsignfolderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepublic
         * @param {EzsigntemplatepublicCreateObjectV1Request} ezsigntemplatepublicCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicCreateObjectV1(ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepublicCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicCreateObjectV1(ezsigntemplatepublicCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepublic
         * @param {number} pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
         * @param {EzsigntemplatepublicEditObjectV1Request} ezsigntemplatepublicEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicEditObjectV1(pkiEzsigntemplatepublicID: number, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicEditObjectV1(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the Ezsigntemplatepublic details
         * @summary Retrieve the Ezsigntemplatepublic details
         * @param {EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request} ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepublic\'s forms data
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicGetFormsDataV1(pkiEzsigntemplatepublicID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepublicGetFormsDataV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicGetFormsDataV1(pkiEzsigntemplatepublicID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetFormsDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour<br>Day<br>Month<br>Total |
         * @summary Retrieve Ezsigntemplatepublic list
         * @param {EzsigntemplatepublicGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicGetListV1(eOrderBy?: EzsigntemplatepublicGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepublicGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepublic
         * @param {number} pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicGetObjectV2(pkiEzsigntemplatepublicID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepublicGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicGetObjectV2(pkiEzsigntemplatepublicID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset the limit exceeded counter
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicResetLimitExceededCounterV1(pkiEzsigntemplatepublicID: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepublicResetLimitExceededCounterV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicResetLimitExceededCounterV1(pkiEzsigntemplatepublicID, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetLimitExceededCounterV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset the Ezsigntemplatepublic url
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepublicResetUrlV1(pkiEzsigntemplatepublicID: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepublicResetUrlV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepublicResetUrlV1(pkiEzsigntemplatepublicID, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetUrlV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectEzsigntemplatepublicApi - factory interface
 * @export
 */
export const ObjectEzsigntemplatepublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsigntemplatepublicApiFp(configuration)
    return {
        /**
         * Create an Ezsignfolder
         * @summary Create an Ezsignfolder
         * @param {EzsigntemplatepublicCreateEzsignfolderV1Request} ezsigntemplatepublicCreateEzsignfolderV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicCreateEzsignfolderV1(ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatepublicCreateEzsignfolderV1Response> {
            return localVarFp.ezsigntemplatepublicCreateEzsignfolderV1(ezsigntemplatepublicCreateEzsignfolderV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepublic
         * @param {EzsigntemplatepublicCreateObjectV1Request} ezsigntemplatepublicCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicCreateObjectV1(ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatepublicCreateObjectV1Response> {
            return localVarFp.ezsigntemplatepublicCreateObjectV1(ezsigntemplatepublicCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepublic
         * @param {number} pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
         * @param {EzsigntemplatepublicEditObjectV1Request} ezsigntemplatepublicEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicEditObjectV1(pkiEzsigntemplatepublicID: number, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.ezsigntemplatepublicEditObjectV1(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the Ezsigntemplatepublic details
         * @summary Retrieve the Ezsigntemplatepublic details
         * @param {EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request} ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> {
            return localVarFp.ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepublic\'s forms data
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicGetFormsDataV1(pkiEzsigntemplatepublicID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatepublicGetFormsDataV1Response> {
            return localVarFp.ezsigntemplatepublicGetFormsDataV1(pkiEzsigntemplatepublicID, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour<br>Day<br>Month<br>Total |
         * @summary Retrieve Ezsigntemplatepublic list
         * @param {EzsigntemplatepublicGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicGetListV1(eOrderBy?: EzsigntemplatepublicGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatepublicGetListV1Response> {
            return localVarFp.ezsigntemplatepublicGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepublic
         * @param {number} pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicGetObjectV2(pkiEzsigntemplatepublicID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatepublicGetObjectV2Response> {
            return localVarFp.ezsigntemplatepublicGetObjectV2(pkiEzsigntemplatepublicID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset the limit exceeded counter
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicResetLimitExceededCounterV1(pkiEzsigntemplatepublicID: number, body: object, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatepublicResetLimitExceededCounterV1Response> {
            return localVarFp.ezsigntemplatepublicResetLimitExceededCounterV1(pkiEzsigntemplatepublicID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset the Ezsigntemplatepublic url
         * @param {number} pkiEzsigntemplatepublicID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepublicResetUrlV1(pkiEzsigntemplatepublicID: number, body: object, options?: RawAxiosRequestConfig): AxiosPromise<EzsigntemplatepublicResetUrlV1Response> {
            return localVarFp.ezsigntemplatepublicResetUrlV1(pkiEzsigntemplatepublicID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsigntemplatepublicApi - object-oriented interface
 * @export
 * @class ObjectEzsigntemplatepublicApi
 * @extends {BaseAPI}
 */
export class ObjectEzsigntemplatepublicApi extends BaseAPI {
    /**
     * Create an Ezsignfolder
     * @summary Create an Ezsignfolder
     * @param {EzsigntemplatepublicCreateEzsignfolderV1Request} ezsigntemplatepublicCreateEzsignfolderV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicCreateEzsignfolderV1(ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicCreateEzsignfolderV1(ezsigntemplatepublicCreateEzsignfolderV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsigntemplatepublic
     * @param {EzsigntemplatepublicCreateObjectV1Request} ezsigntemplatepublicCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicCreateObjectV1(ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicCreateObjectV1(ezsigntemplatepublicCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsigntemplatepublic
     * @param {number} pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
     * @param {EzsigntemplatepublicEditObjectV1Request} ezsigntemplatepublicEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicEditObjectV1(pkiEzsigntemplatepublicID: number, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicEditObjectV1(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the Ezsigntemplatepublic details
     * @summary Retrieve the Ezsigntemplatepublic details
     * @param {EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request} ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatepublic\'s forms data
     * @param {number} pkiEzsigntemplatepublicID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicGetFormsDataV1(pkiEzsigntemplatepublicID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicGetFormsDataV1(pkiEzsigntemplatepublicID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour<br>Day<br>Month<br>Total |
     * @summary Retrieve Ezsigntemplatepublic list
     * @param {EzsigntemplatepublicGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicGetListV1(eOrderBy?: EzsigntemplatepublicGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatepublic
     * @param {number} pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicGetObjectV2(pkiEzsigntemplatepublicID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicGetObjectV2(pkiEzsigntemplatepublicID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset the limit exceeded counter
     * @param {number} pkiEzsigntemplatepublicID 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicResetLimitExceededCounterV1(pkiEzsigntemplatepublicID: number, body: object, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicResetLimitExceededCounterV1(pkiEzsigntemplatepublicID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset the Ezsigntemplatepublic url
     * @param {number} pkiEzsigntemplatepublicID 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepublicApi
     */
    public ezsigntemplatepublicResetUrlV1(pkiEzsigntemplatepublicID: number, body: object, options?: RawAxiosRequestConfig) {
        return ObjectEzsigntemplatepublicApiFp(this.configuration).ezsigntemplatepublicResetUrlV1(pkiEzsigntemplatepublicID, body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const EzsigntemplatepublicGetListV1EOrderByEnum = {
    pkiEzsigntemplatepublicID_ASC: 'pkiEzsigntemplatepublicID_ASC',
    pkiEzsigntemplatepublicID_DESC: 'pkiEzsigntemplatepublicID_DESC',
    fkiEzsignfoldertypeID_ASC: 'fkiEzsignfoldertypeID_ASC',
    fkiEzsignfoldertypeID_DESC: 'fkiEzsignfoldertypeID_DESC',
    sEzsignfoldertypeNameX_ASC: 'sEzsignfoldertypeNameX_ASC',
    sEzsignfoldertypeNameX_DESC: 'sEzsignfoldertypeNameX_DESC',
    fkiUserlogintypeID_ASC: 'fkiUserlogintypeID_ASC',
    fkiUserlogintypeID_DESC: 'fkiUserlogintypeID_DESC',
    fkiEzsigntemplateID_ASC: 'fkiEzsigntemplateID_ASC',
    fkiEzsigntemplateID_DESC: 'fkiEzsigntemplateID_DESC',
    fkiEzsigntemplatepackageID_ASC: 'fkiEzsigntemplatepackageID_ASC',
    fkiEzsigntemplatepackageID_DESC: 'fkiEzsigntemplatepackageID_DESC',
    sEzsigntemplatepublicDescription_ASC: 'sEzsigntemplatepublicDescription_ASC',
    sEzsigntemplatepublicDescription_DESC: 'sEzsigntemplatepublicDescription_DESC',
    bEzsigntemplatepublicIsactive_ASC: 'bEzsigntemplatepublicIsactive_ASC',
    bEzsigntemplatepublicIsactive_DESC: 'bEzsigntemplatepublicIsactive_DESC',
    tEzsigntemplatepublicNote_ASC: 'tEzsigntemplatepublicNote_ASC',
    tEzsigntemplatepublicNote_DESC: 'tEzsigntemplatepublicNote_DESC',
    eEzsigntemplatepublicLimittype_ASC: 'eEzsigntemplatepublicLimittype_ASC',
    eEzsigntemplatepublicLimittype_DESC: 'eEzsigntemplatepublicLimittype_DESC',
    iEzsigntemplatepublicLimit_ASC: 'iEzsigntemplatepublicLimit_ASC',
    iEzsigntemplatepublicLimit_DESC: 'iEzsigntemplatepublicLimit_DESC',
    iEzsigntemplatepublicLimitexceeded_ASC: 'iEzsigntemplatepublicLimitexceeded_ASC',
    iEzsigntemplatepublicLimitexceeded_DESC: 'iEzsigntemplatepublicLimitexceeded_DESC',
    dtEzsigntemplatepublicLimitexceededsince_ASC: 'dtEzsigntemplatepublicLimitexceededsince_ASC',
    dtEzsigntemplatepublicLimitexceededsince_DESC: 'dtEzsigntemplatepublicLimitexceededsince_DESC',
    iEzsignfolder_ASC: 'iEzsignfolder_ASC',
    iEzsignfolder_DESC: 'iEzsignfolder_DESC',
    iEzsigndocument_ASC: 'iEzsigndocument_ASC',
    iEzsigndocument_DESC: 'iEzsigndocument_DESC',
    sEzsigntemplatepublicEzsigntemplatedescription_ASC: 'sEzsigntemplatepublicEzsigntemplatedescription_ASC',
    sEzsigntemplatepublicEzsigntemplatedescription_DESC: 'sEzsigntemplatepublicEzsigntemplatedescription_DESC'
} as const;
export type EzsigntemplatepublicGetListV1EOrderByEnum = typeof EzsigntemplatepublicGetListV1EOrderByEnum[keyof typeof EzsigntemplatepublicGetListV1EOrderByEnum];
