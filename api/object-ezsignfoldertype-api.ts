/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { EzsignfoldertypeCreateObjectV3Request } from '../model';
// @ts-ignore
import type { EzsignfoldertypeCreateObjectV3Response } from '../model';
// @ts-ignore
import type { EzsignfoldertypeEditObjectV3Request } from '../model';
// @ts-ignore
import type { EzsignfoldertypeEditObjectV3Response } from '../model';
// @ts-ignore
import type { EzsignfoldertypeGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { EzsignfoldertypeGetListV1Response } from '../model';
// @ts-ignore
import type { EzsignfoldertypeGetObjectV2Response } from '../model';
// @ts-ignore
import type { EzsignfoldertypeGetObjectV4Response } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsignfoldertypeApi - axios parameter creator
 * @export
 */
export const ObjectEzsignfoldertypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignfoldertype
         * @param {EzsignfoldertypeCreateObjectV3Request} ezsignfoldertypeCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeCreateObjectV3: async (ezsignfoldertypeCreateObjectV3Request: EzsignfoldertypeCreateObjectV3Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsignfoldertypeCreateObjectV3Request' is not null or undefined
            assertParamExists('ezsignfoldertypeCreateObjectV3', 'ezsignfoldertypeCreateObjectV3Request', ezsignfoldertypeCreateObjectV3Request)
            const localVarPath = `/3/object/ezsignfoldertype`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignfoldertypeCreateObjectV3Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {EzsignfoldertypeEditObjectV3Request} ezsignfoldertypeEditObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeEditObjectV3: async (pkiEzsignfoldertypeID: number, ezsignfoldertypeEditObjectV3Request: EzsignfoldertypeEditObjectV3Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignfoldertypeID' is not null or undefined
            assertParamExists('ezsignfoldertypeEditObjectV3', 'pkiEzsignfoldertypeID', pkiEzsignfoldertypeID)
            // verify required parameter 'ezsignfoldertypeEditObjectV3Request' is not null or undefined
            assertParamExists('ezsignfoldertypeEditObjectV3', 'ezsignfoldertypeEditObjectV3Request', ezsignfoldertypeEditObjectV3Request)
            const localVarPath = `/3/object/ezsignfoldertype/{pkiEzsignfoldertypeID}`
                .replace(`{${"pkiEzsignfoldertypeID"}}`, encodeURIComponent(String(pkiEzsignfoldertypeID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignfoldertypeEditObjectV3Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Ezsignfoldertype to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsignfoldertypes and IDs
         * @param {EzsignfoldertypeGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsignfoldertypes to return
         * @param {EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeGetAutocompleteV2: async (sSelector: EzsignfoldertypeGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('ezsignfoldertypeGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/ezsignfoldertype/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
         * @summary Retrieve Ezsignfoldertype list
         * @param {EzsignfoldertypeGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeGetListV1: async (eOrderBy?: EzsignfoldertypeGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/ezsignfoldertype/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsignfoldertypeGetObjectV2: async (pkiEzsignfoldertypeID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignfoldertypeID' is not null or undefined
            assertParamExists('ezsignfoldertypeGetObjectV2', 'pkiEzsignfoldertypeID', pkiEzsignfoldertypeID)
            const localVarPath = `/2/object/ezsignfoldertype/{pkiEzsignfoldertypeID}`
                .replace(`{${"pkiEzsignfoldertypeID"}}`, encodeURIComponent(String(pkiEzsignfoldertypeID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeGetObjectV4: async (pkiEzsignfoldertypeID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignfoldertypeID' is not null or undefined
            assertParamExists('ezsignfoldertypeGetObjectV4', 'pkiEzsignfoldertypeID', pkiEzsignfoldertypeID)
            const localVarPath = `/4/object/ezsignfoldertype/{pkiEzsignfoldertypeID}`
                .replace(`{${"pkiEzsignfoldertypeID"}}`, encodeURIComponent(String(pkiEzsignfoldertypeID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsignfoldertypeApi - functional programming interface
 * @export
 */
export const ObjectEzsignfoldertypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsignfoldertypeApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignfoldertype
         * @param {EzsignfoldertypeCreateObjectV3Request} ezsignfoldertypeCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignfoldertypeCreateObjectV3(ezsignfoldertypeCreateObjectV3Request: EzsignfoldertypeCreateObjectV3Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignfoldertypeCreateObjectV3Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignfoldertypeCreateObjectV3(ezsignfoldertypeCreateObjectV3Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignfoldertypeApi.ezsignfoldertypeCreateObjectV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {EzsignfoldertypeEditObjectV3Request} ezsignfoldertypeEditObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignfoldertypeEditObjectV3(pkiEzsignfoldertypeID: number, ezsignfoldertypeEditObjectV3Request: EzsignfoldertypeEditObjectV3Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignfoldertypeEditObjectV3Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignfoldertypeEditObjectV3(pkiEzsignfoldertypeID, ezsignfoldertypeEditObjectV3Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignfoldertypeApi.ezsignfoldertypeEditObjectV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Ezsignfoldertype to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsignfoldertypes and IDs
         * @param {EzsignfoldertypeGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsignfoldertypes to return
         * @param {EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignfoldertypeGetAutocompleteV2(sSelector: EzsignfoldertypeGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignfoldertypeGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignfoldertypeGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignfoldertypeApi.ezsignfoldertypeGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
         * @summary Retrieve Ezsignfoldertype list
         * @param {EzsignfoldertypeGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignfoldertypeGetListV1(eOrderBy?: EzsignfoldertypeGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignfoldertypeGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignfoldertypeGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignfoldertypeApi.ezsignfoldertypeGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsignfoldertypeGetObjectV2(pkiEzsignfoldertypeID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignfoldertypeGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignfoldertypeGetObjectV2(pkiEzsignfoldertypeID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignfoldertypeApi.ezsignfoldertypeGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignfoldertypeGetObjectV4(pkiEzsignfoldertypeID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignfoldertypeGetObjectV4Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignfoldertypeGetObjectV4(pkiEzsignfoldertypeID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignfoldertypeApi.ezsignfoldertypeGetObjectV4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectEzsignfoldertypeApi - factory interface
 * @export
 */
export const ObjectEzsignfoldertypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsignfoldertypeApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignfoldertype
         * @param {EzsignfoldertypeCreateObjectV3Request} ezsignfoldertypeCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeCreateObjectV3(ezsignfoldertypeCreateObjectV3Request: EzsignfoldertypeCreateObjectV3Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsignfoldertypeCreateObjectV3Response> {
            return localVarFp.ezsignfoldertypeCreateObjectV3(ezsignfoldertypeCreateObjectV3Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {EzsignfoldertypeEditObjectV3Request} ezsignfoldertypeEditObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeEditObjectV3(pkiEzsignfoldertypeID: number, ezsignfoldertypeEditObjectV3Request: EzsignfoldertypeEditObjectV3Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsignfoldertypeEditObjectV3Response> {
            return localVarFp.ezsignfoldertypeEditObjectV3(pkiEzsignfoldertypeID, ezsignfoldertypeEditObjectV3Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Ezsignfoldertype to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsignfoldertypes and IDs
         * @param {EzsignfoldertypeGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsignfoldertypes to return
         * @param {EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeGetAutocompleteV2(sSelector: EzsignfoldertypeGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<EzsignfoldertypeGetAutocompleteV2Response> {
            return localVarFp.ezsignfoldertypeGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
         * @summary Retrieve Ezsignfoldertype list
         * @param {EzsignfoldertypeGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeGetListV1(eOrderBy?: EzsignfoldertypeGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<EzsignfoldertypeGetListV1Response> {
            return localVarFp.ezsignfoldertypeGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsignfoldertypeGetObjectV2(pkiEzsignfoldertypeID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsignfoldertypeGetObjectV2Response> {
            return localVarFp.ezsignfoldertypeGetObjectV2(pkiEzsignfoldertypeID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignfoldertype
         * @param {number} pkiEzsignfoldertypeID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignfoldertypeGetObjectV4(pkiEzsignfoldertypeID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsignfoldertypeGetObjectV4Response> {
            return localVarFp.ezsignfoldertypeGetObjectV4(pkiEzsignfoldertypeID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsignfoldertypeApi - object-oriented interface
 * @export
 * @class ObjectEzsignfoldertypeApi
 * @extends {BaseAPI}
 */
export class ObjectEzsignfoldertypeApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsignfoldertype
     * @param {EzsignfoldertypeCreateObjectV3Request} ezsignfoldertypeCreateObjectV3Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignfoldertypeApi
     */
    public ezsignfoldertypeCreateObjectV3(ezsignfoldertypeCreateObjectV3Request: EzsignfoldertypeCreateObjectV3Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignfoldertypeApiFp(this.configuration).ezsignfoldertypeCreateObjectV3(ezsignfoldertypeCreateObjectV3Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsignfoldertype
     * @param {number} pkiEzsignfoldertypeID 
     * @param {EzsignfoldertypeEditObjectV3Request} ezsignfoldertypeEditObjectV3Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignfoldertypeApi
     */
    public ezsignfoldertypeEditObjectV3(pkiEzsignfoldertypeID: number, ezsignfoldertypeEditObjectV3Request: EzsignfoldertypeEditObjectV3Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignfoldertypeApiFp(this.configuration).ezsignfoldertypeEditObjectV3(pkiEzsignfoldertypeID, ezsignfoldertypeEditObjectV3Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Ezsignfoldertype to be used in a dropdown or autocomplete control.
     * @summary Retrieve Ezsignfoldertypes and IDs
     * @param {EzsignfoldertypeGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsignfoldertypes to return
     * @param {EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignfoldertypeApi
     */
    public ezsignfoldertypeGetAutocompleteV2(sSelector: EzsignfoldertypeGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectEzsignfoldertypeApiFp(this.configuration).ezsignfoldertypeGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
     * @summary Retrieve Ezsignfoldertype list
     * @param {EzsignfoldertypeGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignfoldertypeApi
     */
    public ezsignfoldertypeGetListV1(eOrderBy?: EzsignfoldertypeGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectEzsignfoldertypeApiFp(this.configuration).ezsignfoldertypeGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignfoldertype
     * @param {number} pkiEzsignfoldertypeID 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsignfoldertypeApi
     */
    public ezsignfoldertypeGetObjectV2(pkiEzsignfoldertypeID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignfoldertypeApiFp(this.configuration).ezsignfoldertypeGetObjectV2(pkiEzsignfoldertypeID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignfoldertype
     * @param {number} pkiEzsignfoldertypeID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignfoldertypeApi
     */
    public ezsignfoldertypeGetObjectV4(pkiEzsignfoldertypeID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignfoldertypeApiFp(this.configuration).ezsignfoldertypeGetObjectV4(pkiEzsignfoldertypeID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const EzsignfoldertypeGetAutocompleteV2SSelectorEnum = {
    Active: 'Active',
    All: 'All',
    EzsigntemplateEdit: 'EzsigntemplateEdit',
    EzsigntemplateUsergroup: 'EzsigntemplateUsergroup'
} as const;
export type EzsignfoldertypeGetAutocompleteV2SSelectorEnum = typeof EzsignfoldertypeGetAutocompleteV2SSelectorEnum[keyof typeof EzsignfoldertypeGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum = typeof EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum[keyof typeof EzsignfoldertypeGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const EzsignfoldertypeGetListV1EOrderByEnum = {
    pkiEzsignfoldertypeID_ASC: 'pkiEzsignfoldertypeID_ASC',
    pkiEzsignfoldertypeID_DESC: 'pkiEzsignfoldertypeID_DESC',
    eEzsignfoldertypePrivacylevel_ASC: 'eEzsignfoldertypePrivacylevel_ASC',
    eEzsignfoldertypePrivacylevel_DESC: 'eEzsignfoldertypePrivacylevel_DESC',
    sEzsignfoldertypeNameX_ASC: 'sEzsignfoldertypeNameX_ASC',
    sEzsignfoldertypeNameX_DESC: 'sEzsignfoldertypeNameX_DESC',
    bEzsignfoldertypeIsactive_ASC: 'bEzsignfoldertypeIsactive_ASC',
    bEzsignfoldertypeIsactive_DESC: 'bEzsignfoldertypeIsactive_DESC'
} as const;
export type EzsignfoldertypeGetListV1EOrderByEnum = typeof EzsignfoldertypeGetListV1EOrderByEnum[keyof typeof EzsignfoldertypeGetListV1EOrderByEnum];
