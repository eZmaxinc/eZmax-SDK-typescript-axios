/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { EzsignsignergroupCreateObjectV1Request } from '../model';
// @ts-ignore
import { EzsignsignergroupCreateObjectV1Response } from '../model';
// @ts-ignore
import { EzsignsignergroupDeleteObjectV1Response } from '../model';
// @ts-ignore
import { EzsignsignergroupEditEzsignsignergroupmembershipsV1Request } from '../model';
// @ts-ignore
import { EzsignsignergroupEditEzsignsignergroupmembershipsV1Response } from '../model';
// @ts-ignore
import { EzsignsignergroupEditObjectV1Request } from '../model';
// @ts-ignore
import { EzsignsignergroupEditObjectV1Response } from '../model';
// @ts-ignore
import { EzsignsignergroupGetEzsignsignergroupmembershipsV1Response } from '../model';
// @ts-ignore
import { EzsignsignergroupGetObjectV2Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsignsignergroupApi - axios parameter creator
 * @export
 */
export const ObjectEzsignsignergroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignergroup
         * @param {EzsignsignergroupCreateObjectV1Request} ezsignsignergroupCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupCreateObjectV1: async (ezsignsignergroupCreateObjectV1Request: EzsignsignergroupCreateObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsignsignergroupCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsignsignergroupCreateObjectV1', 'ezsignsignergroupCreateObjectV1Request', ezsignsignergroupCreateObjectV1Request)
            const localVarPath = `/1/object/ezsignsignergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignsignergroupCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupDeleteObjectV1: async (pkiEzsignsignergroupID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignergroupID' is not null or undefined
            assertParamExists('ezsignsignergroupDeleteObjectV1', 'pkiEzsignsignergroupID', pkiEzsignsignergroupID)
            const localVarPath = `/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}`
                .replace(`{${"pkiEzsignsignergroupID"}}`, encodeURIComponent(String(pkiEzsignsignergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
         * @summary Edit multiple Ezsignsignergroupmemberships
         * @param {number} pkiEzsignsignergroupID 
         * @param {EzsignsignergroupEditEzsignsignergroupmembershipsV1Request} ezsignsignergroupEditEzsignsignergroupmembershipsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupEditEzsignsignergroupmembershipsV1: async (pkiEzsignsignergroupID: number, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request: EzsignsignergroupEditEzsignsignergroupmembershipsV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignergroupID' is not null or undefined
            assertParamExists('ezsignsignergroupEditEzsignsignergroupmembershipsV1', 'pkiEzsignsignergroupID', pkiEzsignsignergroupID)
            // verify required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' is not null or undefined
            assertParamExists('ezsignsignergroupEditEzsignsignergroupmembershipsV1', 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request', ezsignsignergroupEditEzsignsignergroupmembershipsV1Request)
            const localVarPath = `/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/editEzsignsignergroupmemberships`
                .replace(`{${"pkiEzsignsignergroupID"}}`, encodeURIComponent(String(pkiEzsignsignergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {EzsignsignergroupEditObjectV1Request} ezsignsignergroupEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupEditObjectV1: async (pkiEzsignsignergroupID: number, ezsignsignergroupEditObjectV1Request: EzsignsignergroupEditObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignergroupID' is not null or undefined
            assertParamExists('ezsignsignergroupEditObjectV1', 'pkiEzsignsignergroupID', pkiEzsignsignergroupID)
            // verify required parameter 'ezsignsignergroupEditObjectV1Request' is not null or undefined
            assertParamExists('ezsignsignergroupEditObjectV1', 'ezsignsignergroupEditObjectV1Request', ezsignsignergroupEditObjectV1Request)
            const localVarPath = `/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}`
                .replace(`{${"pkiEzsignsignergroupID"}}`, encodeURIComponent(String(pkiEzsignsignergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignsignergroupEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignergroup\'s Ezsignsignergroupmemberships
         * @param {number} pkiEzsignsignergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupGetEzsignsignergroupmembershipsV1: async (pkiEzsignsignergroupID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignergroupID' is not null or undefined
            assertParamExists('ezsignsignergroupGetEzsignsignergroupmembershipsV1', 'pkiEzsignsignergroupID', pkiEzsignsignergroupID)
            const localVarPath = `/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/getEzsignsignergroupmemberships`
                .replace(`{${"pkiEzsignsignergroupID"}}`, encodeURIComponent(String(pkiEzsignsignergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupGetObjectV2: async (pkiEzsignsignergroupID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignergroupID' is not null or undefined
            assertParamExists('ezsignsignergroupGetObjectV2', 'pkiEzsignsignergroupID', pkiEzsignsignergroupID)
            const localVarPath = `/2/object/ezsignsignergroup/{pkiEzsignsignergroupID}`
                .replace(`{${"pkiEzsignsignergroupID"}}`, encodeURIComponent(String(pkiEzsignsignergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsignsignergroupApi - functional programming interface
 * @export
 */
export const ObjectEzsignsignergroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsignsignergroupApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignergroup
         * @param {EzsignsignergroupCreateObjectV1Request} ezsignsignergroupCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignergroupCreateObjectV1(ezsignsignergroupCreateObjectV1Request: EzsignsignergroupCreateObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignergroupCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignergroupCreateObjectV1(ezsignsignergroupCreateObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignergroupDeleteObjectV1(pkiEzsignsignergroupID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignergroupDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignergroupDeleteObjectV1(pkiEzsignsignergroupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
         * @summary Edit multiple Ezsignsignergroupmemberships
         * @param {number} pkiEzsignsignergroupID 
         * @param {EzsignsignergroupEditEzsignsignergroupmembershipsV1Request} ezsignsignergroupEditEzsignsignergroupmembershipsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignergroupEditEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID: number, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request: EzsignsignergroupEditEzsignsignergroupmembershipsV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignergroupEditEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {EzsignsignergroupEditObjectV1Request} ezsignsignergroupEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignergroupEditObjectV1(pkiEzsignsignergroupID: number, ezsignsignergroupEditObjectV1Request: EzsignsignergroupEditObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignergroupEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignergroupEditObjectV1(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignergroup\'s Ezsignsignergroupmemberships
         * @param {number} pkiEzsignsignergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignergroupGetEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignergroupGetEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignergroupGetObjectV2(pkiEzsignsignergroupID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignergroupGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignergroupGetObjectV2(pkiEzsignsignergroupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectEzsignsignergroupApi - factory interface
 * @export
 */
export const ObjectEzsignsignergroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsignsignergroupApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignergroup
         * @param {EzsignsignergroupCreateObjectV1Request} ezsignsignergroupCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupCreateObjectV1(ezsignsignergroupCreateObjectV1Request: EzsignsignergroupCreateObjectV1Request, options?: any): AxiosPromise<EzsignsignergroupCreateObjectV1Response> {
            return localVarFp.ezsignsignergroupCreateObjectV1(ezsignsignergroupCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupDeleteObjectV1(pkiEzsignsignergroupID: number, options?: any): AxiosPromise<EzsignsignergroupDeleteObjectV1Response> {
            return localVarFp.ezsignsignergroupDeleteObjectV1(pkiEzsignsignergroupID, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
         * @summary Edit multiple Ezsignsignergroupmemberships
         * @param {number} pkiEzsignsignergroupID 
         * @param {EzsignsignergroupEditEzsignsignergroupmembershipsV1Request} ezsignsignergroupEditEzsignsignergroupmembershipsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupEditEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID: number, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request: EzsignsignergroupEditEzsignsignergroupmembershipsV1Request, options?: any): AxiosPromise<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> {
            return localVarFp.ezsignsignergroupEditEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {EzsignsignergroupEditObjectV1Request} ezsignsignergroupEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupEditObjectV1(pkiEzsignsignergroupID: number, ezsignsignergroupEditObjectV1Request: EzsignsignergroupEditObjectV1Request, options?: any): AxiosPromise<EzsignsignergroupEditObjectV1Response> {
            return localVarFp.ezsignsignergroupEditObjectV1(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignergroup\'s Ezsignsignergroupmemberships
         * @param {number} pkiEzsignsignergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupGetEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID: number, options?: any): AxiosPromise<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> {
            return localVarFp.ezsignsignergroupGetEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignergroup
         * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignergroupGetObjectV2(pkiEzsignsignergroupID: number, options?: any): AxiosPromise<EzsignsignergroupGetObjectV2Response> {
            return localVarFp.ezsignsignergroupGetObjectV2(pkiEzsignsignergroupID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsignsignergroupApi - object-oriented interface
 * @export
 * @class ObjectEzsignsignergroupApi
 * @extends {BaseAPI}
 */
export class ObjectEzsignsignergroupApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsignsignergroup
     * @param {EzsignsignergroupCreateObjectV1Request} ezsignsignergroupCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignergroupApi
     */
    public ezsignsignergroupCreateObjectV1(ezsignsignergroupCreateObjectV1Request: EzsignsignergroupCreateObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsignsignergroupApiFp(this.configuration).ezsignsignergroupCreateObjectV1(ezsignsignergroupCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Ezsignsignergroup
     * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignergroupApi
     */
    public ezsignsignergroupDeleteObjectV1(pkiEzsignsignergroupID: number, options?: AxiosRequestConfig) {
        return ObjectEzsignsignergroupApiFp(this.configuration).ezsignsignergroupDeleteObjectV1(pkiEzsignsignergroupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
     * @summary Edit multiple Ezsignsignergroupmemberships
     * @param {number} pkiEzsignsignergroupID 
     * @param {EzsignsignergroupEditEzsignsignergroupmembershipsV1Request} ezsignsignergroupEditEzsignsignergroupmembershipsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignergroupApi
     */
    public ezsignsignergroupEditEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID: number, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request: EzsignsignergroupEditEzsignsignergroupmembershipsV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsignsignergroupApiFp(this.configuration).ezsignsignergroupEditEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsignsignergroup
     * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @param {EzsignsignergroupEditObjectV1Request} ezsignsignergroupEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignergroupApi
     */
    public ezsignsignergroupEditObjectV1(pkiEzsignsignergroupID: number, ezsignsignergroupEditObjectV1Request: EzsignsignergroupEditObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsignsignergroupApiFp(this.configuration).ezsignsignergroupEditObjectV1(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignsignergroup\'s Ezsignsignergroupmemberships
     * @param {number} pkiEzsignsignergroupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignergroupApi
     */
    public ezsignsignergroupGetEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID: number, options?: AxiosRequestConfig) {
        return ObjectEzsignsignergroupApiFp(this.configuration).ezsignsignergroupGetEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignsignergroup
     * @param {number} pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignergroupApi
     */
    public ezsignsignergroupGetObjectV2(pkiEzsignsignergroupID: number, options?: AxiosRequestConfig) {
        return ObjectEzsignsignergroupApiFp(this.configuration).ezsignsignergroupGetObjectV2(pkiEzsignsignergroupID, options).then((request) => request(this.axios, this.basePath));
    }
}

