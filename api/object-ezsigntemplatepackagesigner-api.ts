/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { EzsigntemplatepackagesignerCreateObjectV1Request } from '../model';
// @ts-ignore
import { EzsigntemplatepackagesignerCreateObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackagesignerDeleteObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackagesignerEditObjectV1Request } from '../model';
// @ts-ignore
import { EzsigntemplatepackagesignerEditObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackagesignerGetObjectV2Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsigntemplatepackagesignerApi - axios parameter creator
 * @export
 */
export const ObjectEzsigntemplatepackagesignerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepackagesigner
         * @param {EzsigntemplatepackagesignerCreateObjectV1Request} ezsigntemplatepackagesignerCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackagesignerCreateObjectV1: async (ezsigntemplatepackagesignerCreateObjectV1Request: EzsigntemplatepackagesignerCreateObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigntemplatepackagesignerCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepackagesignerCreateObjectV1', 'ezsigntemplatepackagesignerCreateObjectV1Request', ezsigntemplatepackagesignerCreateObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatepackagesigner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepackagesignerCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackagesignerDeleteObjectV1: async (pkiEzsigntemplatepackagesignerID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepackagesignerID' is not null or undefined
            assertParamExists('ezsigntemplatepackagesignerDeleteObjectV1', 'pkiEzsigntemplatepackagesignerID', pkiEzsigntemplatepackagesignerID)
            const localVarPath = `/1/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}`
                .replace(`{${"pkiEzsigntemplatepackagesignerID"}}`, encodeURIComponent(String(pkiEzsigntemplatepackagesignerID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {EzsigntemplatepackagesignerEditObjectV1Request} ezsigntemplatepackagesignerEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackagesignerEditObjectV1: async (pkiEzsigntemplatepackagesignerID: number, ezsigntemplatepackagesignerEditObjectV1Request: EzsigntemplatepackagesignerEditObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepackagesignerID' is not null or undefined
            assertParamExists('ezsigntemplatepackagesignerEditObjectV1', 'pkiEzsigntemplatepackagesignerID', pkiEzsigntemplatepackagesignerID)
            // verify required parameter 'ezsigntemplatepackagesignerEditObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepackagesignerEditObjectV1', 'ezsigntemplatepackagesignerEditObjectV1Request', ezsigntemplatepackagesignerEditObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}`
                .replace(`{${"pkiEzsigntemplatepackagesignerID"}}`, encodeURIComponent(String(pkiEzsigntemplatepackagesignerID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepackagesignerEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackagesignerGetObjectV2: async (pkiEzsigntemplatepackagesignerID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepackagesignerID' is not null or undefined
            assertParamExists('ezsigntemplatepackagesignerGetObjectV2', 'pkiEzsigntemplatepackagesignerID', pkiEzsigntemplatepackagesignerID)
            const localVarPath = `/2/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}`
                .replace(`{${"pkiEzsigntemplatepackagesignerID"}}`, encodeURIComponent(String(pkiEzsigntemplatepackagesignerID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsigntemplatepackagesignerApi - functional programming interface
 * @export
 */
export const ObjectEzsigntemplatepackagesignerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsigntemplatepackagesignerApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepackagesigner
         * @param {EzsigntemplatepackagesignerCreateObjectV1Request} ezsigntemplatepackagesignerCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackagesignerCreateObjectV1(ezsigntemplatepackagesignerCreateObjectV1Request: EzsigntemplatepackagesignerCreateObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackagesignerCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackagesignerCreateObjectV1(ezsigntemplatepackagesignerCreateObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackagesignerDeleteObjectV1(pkiEzsigntemplatepackagesignerID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackagesignerDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackagesignerDeleteObjectV1(pkiEzsigntemplatepackagesignerID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {EzsigntemplatepackagesignerEditObjectV1Request} ezsigntemplatepackagesignerEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackagesignerEditObjectV1(pkiEzsigntemplatepackagesignerID: number, ezsigntemplatepackagesignerEditObjectV1Request: EzsigntemplatepackagesignerEditObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackagesignerEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackagesignerEditObjectV1(pkiEzsigntemplatepackagesignerID, ezsigntemplatepackagesignerEditObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackagesignerGetObjectV2(pkiEzsigntemplatepackagesignerID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackagesignerGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackagesignerGetObjectV2(pkiEzsigntemplatepackagesignerID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectEzsigntemplatepackagesignerApi - factory interface
 * @export
 */
export const ObjectEzsigntemplatepackagesignerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsigntemplatepackagesignerApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepackagesigner
         * @param {EzsigntemplatepackagesignerCreateObjectV1Request} ezsigntemplatepackagesignerCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackagesignerCreateObjectV1(ezsigntemplatepackagesignerCreateObjectV1Request: EzsigntemplatepackagesignerCreateObjectV1Request, options?: any): AxiosPromise<EzsigntemplatepackagesignerCreateObjectV1Response> {
            return localVarFp.ezsigntemplatepackagesignerCreateObjectV1(ezsigntemplatepackagesignerCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackagesignerDeleteObjectV1(pkiEzsigntemplatepackagesignerID: number, options?: any): AxiosPromise<EzsigntemplatepackagesignerDeleteObjectV1Response> {
            return localVarFp.ezsigntemplatepackagesignerDeleteObjectV1(pkiEzsigntemplatepackagesignerID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {EzsigntemplatepackagesignerEditObjectV1Request} ezsigntemplatepackagesignerEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackagesignerEditObjectV1(pkiEzsigntemplatepackagesignerID: number, ezsigntemplatepackagesignerEditObjectV1Request: EzsigntemplatepackagesignerEditObjectV1Request, options?: any): AxiosPromise<EzsigntemplatepackagesignerEditObjectV1Response> {
            return localVarFp.ezsigntemplatepackagesignerEditObjectV1(pkiEzsigntemplatepackagesignerID, ezsigntemplatepackagesignerEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepackagesigner
         * @param {number} pkiEzsigntemplatepackagesignerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackagesignerGetObjectV2(pkiEzsigntemplatepackagesignerID: number, options?: any): AxiosPromise<EzsigntemplatepackagesignerGetObjectV2Response> {
            return localVarFp.ezsigntemplatepackagesignerGetObjectV2(pkiEzsigntemplatepackagesignerID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsigntemplatepackagesignerApi - object-oriented interface
 * @export
 * @class ObjectEzsigntemplatepackagesignerApi
 * @extends {BaseAPI}
 */
export class ObjectEzsigntemplatepackagesignerApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsigntemplatepackagesigner
     * @param {EzsigntemplatepackagesignerCreateObjectV1Request} ezsigntemplatepackagesignerCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackagesignerApi
     */
    public ezsigntemplatepackagesignerCreateObjectV1(ezsigntemplatepackagesignerCreateObjectV1Request: EzsigntemplatepackagesignerCreateObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackagesignerApiFp(this.configuration).ezsigntemplatepackagesignerCreateObjectV1(ezsigntemplatepackagesignerCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Ezsigntemplatepackagesigner
     * @param {number} pkiEzsigntemplatepackagesignerID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackagesignerApi
     */
    public ezsigntemplatepackagesignerDeleteObjectV1(pkiEzsigntemplatepackagesignerID: number, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackagesignerApiFp(this.configuration).ezsigntemplatepackagesignerDeleteObjectV1(pkiEzsigntemplatepackagesignerID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsigntemplatepackagesigner
     * @param {number} pkiEzsigntemplatepackagesignerID 
     * @param {EzsigntemplatepackagesignerEditObjectV1Request} ezsigntemplatepackagesignerEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackagesignerApi
     */
    public ezsigntemplatepackagesignerEditObjectV1(pkiEzsigntemplatepackagesignerID: number, ezsigntemplatepackagesignerEditObjectV1Request: EzsigntemplatepackagesignerEditObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackagesignerApiFp(this.configuration).ezsigntemplatepackagesignerEditObjectV1(pkiEzsigntemplatepackagesignerID, ezsigntemplatepackagesignerEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatepackagesigner
     * @param {number} pkiEzsigntemplatepackagesignerID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackagesignerApi
     */
    public ezsigntemplatepackagesignerGetObjectV2(pkiEzsigntemplatepackagesignerID: number, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackagesignerApiFp(this.configuration).ezsigntemplatepackagesignerGetObjectV2(pkiEzsigntemplatepackagesignerID, options).then((request) => request(this.axios, this.basePath));
    }
}
