/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ScimUser } from '../model';
// @ts-ignore
import { ScimUserList } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ScimUsersApi - axios parameter creator
 * @export
 */
export const ScimUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new User
         * @param {ScimUser} scimUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreateObjectScimV2: async (scimUser: ScimUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimUser' is not null or undefined
            assertParamExists('usersCreateObjectScimV2', 'scimUser', scimUser)
            const localVarPath = `/2/scim/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scimUser, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeleteObjectScimV2: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersDeleteObjectScimV2', 'userId', userId)
            const localVarPath = `/2/scim/Users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing User
         * @param {string} userId 
         * @param {ScimUser} scimUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersEditObjectScimV2: async (userId: string, scimUser: ScimUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersEditObjectScimV2', 'userId', userId)
            // verify required parameter 'scimUser' is not null or undefined
            assertParamExists('usersEditObjectScimV2', 'scimUser', scimUser)
            const localVarPath = `/2/scim/Users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scimUser, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve User list
         * @param {string} [filter] Filter expression for searching users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetListScimV2: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/2/scim/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetObjectScimV2: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersGetObjectScimV2', 'userId', userId)
            const localVarPath = `/2/scim/Users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScimUsersApi - functional programming interface
 * @export
 */
export const ScimUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScimUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new User
         * @param {ScimUser} scimUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCreateObjectScimV2(scimUser: ScimUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreateObjectScimV2(scimUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDeleteObjectScimV2(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersDeleteObjectScimV2(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing User
         * @param {string} userId 
         * @param {ScimUser} scimUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersEditObjectScimV2(userId: string, scimUser: ScimUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersEditObjectScimV2(userId, scimUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve User list
         * @param {string} [filter] Filter expression for searching users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetListScimV2(filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimUserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetListScimV2(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetObjectScimV2(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScimUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetObjectScimV2(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScimUsersApi - factory interface
 * @export
 */
export const ScimUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScimUsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new User
         * @param {ScimUser} scimUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreateObjectScimV2(scimUser: ScimUser, options?: any): AxiosPromise<ScimUser> {
            return localVarFp.usersCreateObjectScimV2(scimUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeleteObjectScimV2(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.usersDeleteObjectScimV2(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing User
         * @param {string} userId 
         * @param {ScimUser} scimUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersEditObjectScimV2(userId: string, scimUser: ScimUser, options?: any): AxiosPromise<ScimUser> {
            return localVarFp.usersEditObjectScimV2(userId, scimUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve User list
         * @param {string} [filter] Filter expression for searching users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetListScimV2(filter?: string, options?: any): AxiosPromise<ScimUserList> {
            return localVarFp.usersGetListScimV2(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetObjectScimV2(userId: string, options?: any): AxiosPromise<ScimUser> {
            return localVarFp.usersGetObjectScimV2(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScimUsersApi - object-oriented interface
 * @export
 * @class ScimUsersApi
 * @extends {BaseAPI}
 */
export class ScimUsersApi extends BaseAPI {
    /**
     * 
     * @summary Create a new User
     * @param {ScimUser} scimUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimUsersApi
     */
    public usersCreateObjectScimV2(scimUser: ScimUser, options?: AxiosRequestConfig) {
        return ScimUsersApiFp(this.configuration).usersCreateObjectScimV2(scimUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing User
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimUsersApi
     */
    public usersDeleteObjectScimV2(userId: string, options?: AxiosRequestConfig) {
        return ScimUsersApiFp(this.configuration).usersDeleteObjectScimV2(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing User
     * @param {string} userId 
     * @param {ScimUser} scimUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimUsersApi
     */
    public usersEditObjectScimV2(userId: string, scimUser: ScimUser, options?: AxiosRequestConfig) {
        return ScimUsersApiFp(this.configuration).usersEditObjectScimV2(userId, scimUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve User list
     * @param {string} [filter] Filter expression for searching users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimUsersApi
     */
    public usersGetListScimV2(filter?: string, options?: AxiosRequestConfig) {
        return ScimUsersApiFp(this.configuration).usersGetListScimV2(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing User
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScimUsersApi
     */
    public usersGetObjectScimV2(userId: string, options?: AxiosRequestConfig) {
        return ScimUsersApiFp(this.configuration).usersGetObjectScimV2(userId, options).then((request) => request(this.axios, this.basePath));
    }
}

