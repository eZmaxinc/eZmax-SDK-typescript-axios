/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { UsergroupCreateObjectV1Request } from '../model';
// @ts-ignore
import { UsergroupCreateObjectV1Response } from '../model';
// @ts-ignore
import { UsergroupEditObjectV1Request } from '../model';
// @ts-ignore
import { UsergroupEditObjectV1Response } from '../model';
// @ts-ignore
import { UsergroupEditPermissionsV1Request } from '../model';
// @ts-ignore
import { UsergroupEditPermissionsV1Response } from '../model';
// @ts-ignore
import { UsergroupEditUsergroupmembershipsV1Request } from '../model';
// @ts-ignore
import { UsergroupEditUsergroupmembershipsV1Response } from '../model';
// @ts-ignore
import { UsergroupGetAutocompleteV2Response } from '../model';
// @ts-ignore
import { UsergroupGetListV1Response } from '../model';
// @ts-ignore
import { UsergroupGetObjectV2Response } from '../model';
// @ts-ignore
import { UsergroupGetPermissionsV1Response } from '../model';
// @ts-ignore
import { UsergroupGetUsergroupmembershipsV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectUsergroupApi - axios parameter creator
 * @export
 */
export const ObjectUsergroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Usergroup
         * @param {UsergroupCreateObjectV1Request} usergroupCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupCreateObjectV1: async (usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usergroupCreateObjectV1Request' is not null or undefined
            assertParamExists('usergroupCreateObjectV1', 'usergroupCreateObjectV1Request', usergroupCreateObjectV1Request)
            const localVarPath = `/1/object/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usergroupCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Usergroup
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditObjectV1Request} usergroupEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupEditObjectV1: async (pkiUsergroupID: number, usergroupEditObjectV1Request: UsergroupEditObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupID' is not null or undefined
            assertParamExists('usergroupEditObjectV1', 'pkiUsergroupID', pkiUsergroupID)
            // verify required parameter 'usergroupEditObjectV1Request' is not null or undefined
            assertParamExists('usergroupEditObjectV1', 'usergroupEditObjectV1Request', usergroupEditObjectV1Request)
            const localVarPath = `/1/object/usergroup/{pkiUsergroupID}`
                .replace(`{${"pkiUsergroupID"}}`, encodeURIComponent(String(pkiUsergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usergroupEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Permissions at the same time.
         * @summary Edit multiple Permissions
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditPermissionsV1Request} usergroupEditPermissionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupEditPermissionsV1: async (pkiUsergroupID: number, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupID' is not null or undefined
            assertParamExists('usergroupEditPermissionsV1', 'pkiUsergroupID', pkiUsergroupID)
            // verify required parameter 'usergroupEditPermissionsV1Request' is not null or undefined
            assertParamExists('usergroupEditPermissionsV1', 'usergroupEditPermissionsV1Request', usergroupEditPermissionsV1Request)
            const localVarPath = `/1/object/usergroup/{pkiUsergroupID}/editPermissions`
                .replace(`{${"pkiUsergroupID"}}`, encodeURIComponent(String(pkiUsergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usergroupEditPermissionsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
         * @summary Edit multiple Usergroupmemberships
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditUsergroupmembershipsV1Request} usergroupEditUsergroupmembershipsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupEditUsergroupmembershipsV1: async (pkiUsergroupID: number, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupID' is not null or undefined
            assertParamExists('usergroupEditUsergroupmembershipsV1', 'pkiUsergroupID', pkiUsergroupID)
            // verify required parameter 'usergroupEditUsergroupmembershipsV1Request' is not null or undefined
            assertParamExists('usergroupEditUsergroupmembershipsV1', 'usergroupEditUsergroupmembershipsV1Request', usergroupEditUsergroupmembershipsV1Request)
            const localVarPath = `/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships`
                .replace(`{${"pkiUsergroupID"}}`, encodeURIComponent(String(pkiUsergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usergroupEditUsergroupmembershipsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Usergroup to be used in a dropdown or autocomplete control.
         * @summary Retrieve Usergroups and IDs
         * @param {'All'} sSelector The type of Usergroups to return
         * @param {'All' | 'Active' | 'Inactive'} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetAutocompleteV2: async (sSelector: 'All', eFilterActive?: 'All' | 'Active' | 'Inactive', sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('usergroupGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/usergroup/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Usergroup list
         * @param {'pkiUsergroupID_ASC' | 'pkiUsergroupID_DESC' | 'sUsergroupNameX_ASC' | 'sUsergroupNameX_DESC' | 'iCountUser_ASC' | 'iCountUser_DESC'} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetListV1: async (eOrderBy?: 'pkiUsergroupID_ASC' | 'pkiUsergroupID_DESC' | 'sUsergroupNameX_ASC' | 'sUsergroupNameX_DESC' | 'iCountUser_ASC' | 'iCountUser_DESC', iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/usergroup/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetObjectV2: async (pkiUsergroupID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupID' is not null or undefined
            assertParamExists('usergroupGetObjectV2', 'pkiUsergroupID', pkiUsergroupID)
            const localVarPath = `/2/object/usergroup/{pkiUsergroupID}`
                .replace(`{${"pkiUsergroupID"}}`, encodeURIComponent(String(pkiUsergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup\'s Permissions
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetPermissionsV1: async (pkiUsergroupID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupID' is not null or undefined
            assertParamExists('usergroupGetPermissionsV1', 'pkiUsergroupID', pkiUsergroupID)
            const localVarPath = `/1/object/usergroup/{pkiUsergroupID}/getPermissions`
                .replace(`{${"pkiUsergroupID"}}`, encodeURIComponent(String(pkiUsergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup\'s Usergroupmemberships
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetUsergroupmembershipsV1: async (pkiUsergroupID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupID' is not null or undefined
            assertParamExists('usergroupGetUsergroupmembershipsV1', 'pkiUsergroupID', pkiUsergroupID)
            const localVarPath = `/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships`
                .replace(`{${"pkiUsergroupID"}}`, encodeURIComponent(String(pkiUsergroupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectUsergroupApi - functional programming interface
 * @export
 */
export const ObjectUsergroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectUsergroupApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Usergroup
         * @param {UsergroupCreateObjectV1Request} usergroupCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupCreateObjectV1(usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupCreateObjectV1(usergroupCreateObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing Usergroup
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditObjectV1Request} usergroupEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupEditObjectV1(pkiUsergroupID: number, usergroupEditObjectV1Request: UsergroupEditObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupEditObjectV1(pkiUsergroupID, usergroupEditObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Using this endpoint, you can edit multiple Permissions at the same time.
         * @summary Edit multiple Permissions
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditPermissionsV1Request} usergroupEditPermissionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupEditPermissionsV1(pkiUsergroupID: number, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupEditPermissionsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupEditPermissionsV1(pkiUsergroupID, usergroupEditPermissionsV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
         * @summary Edit multiple Usergroupmemberships
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditUsergroupmembershipsV1Request} usergroupEditUsergroupmembershipsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupEditUsergroupmembershipsV1(pkiUsergroupID: number, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupEditUsergroupmembershipsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupEditUsergroupmembershipsV1(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of Usergroup to be used in a dropdown or autocomplete control.
         * @summary Retrieve Usergroups and IDs
         * @param {'All'} sSelector The type of Usergroups to return
         * @param {'All' | 'Active' | 'Inactive'} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupGetAutocompleteV2(sSelector: 'All', eFilterActive?: 'All' | 'Active' | 'Inactive', sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Usergroup list
         * @param {'pkiUsergroupID_ASC' | 'pkiUsergroupID_DESC' | 'sUsergroupNameX_ASC' | 'sUsergroupNameX_DESC' | 'iCountUser_ASC' | 'iCountUser_DESC'} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupGetListV1(eOrderBy?: 'pkiUsergroupID_ASC' | 'pkiUsergroupID_DESC' | 'sUsergroupNameX_ASC' | 'sUsergroupNameX_DESC' | 'iCountUser_ASC' | 'iCountUser_DESC', iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupGetObjectV2(pkiUsergroupID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupGetObjectV2(pkiUsergroupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup\'s Permissions
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupGetPermissionsV1(pkiUsergroupID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupGetPermissionsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupGetPermissionsV1(pkiUsergroupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup\'s Usergroupmemberships
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupGetUsergroupmembershipsV1(pkiUsergroupID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupGetUsergroupmembershipsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupGetUsergroupmembershipsV1(pkiUsergroupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectUsergroupApi - factory interface
 * @export
 */
export const ObjectUsergroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectUsergroupApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Usergroup
         * @param {UsergroupCreateObjectV1Request} usergroupCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupCreateObjectV1(usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request, options?: any): AxiosPromise<UsergroupCreateObjectV1Response> {
            return localVarFp.usergroupCreateObjectV1(usergroupCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Usergroup
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditObjectV1Request} usergroupEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupEditObjectV1(pkiUsergroupID: number, usergroupEditObjectV1Request: UsergroupEditObjectV1Request, options?: any): AxiosPromise<UsergroupEditObjectV1Response> {
            return localVarFp.usergroupEditObjectV1(pkiUsergroupID, usergroupEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Permissions at the same time.
         * @summary Edit multiple Permissions
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditPermissionsV1Request} usergroupEditPermissionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupEditPermissionsV1(pkiUsergroupID: number, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request, options?: any): AxiosPromise<UsergroupEditPermissionsV1Response> {
            return localVarFp.usergroupEditPermissionsV1(pkiUsergroupID, usergroupEditPermissionsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
         * @summary Edit multiple Usergroupmemberships
         * @param {number} pkiUsergroupID 
         * @param {UsergroupEditUsergroupmembershipsV1Request} usergroupEditUsergroupmembershipsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupEditUsergroupmembershipsV1(pkiUsergroupID: number, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request, options?: any): AxiosPromise<UsergroupEditUsergroupmembershipsV1Response> {
            return localVarFp.usergroupEditUsergroupmembershipsV1(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Usergroup to be used in a dropdown or autocomplete control.
         * @summary Retrieve Usergroups and IDs
         * @param {'All'} sSelector The type of Usergroups to return
         * @param {'All' | 'Active' | 'Inactive'} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetAutocompleteV2(sSelector: 'All', eFilterActive?: 'All' | 'Active' | 'Inactive', sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: any): AxiosPromise<UsergroupGetAutocompleteV2Response> {
            return localVarFp.usergroupGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Usergroup list
         * @param {'pkiUsergroupID_ASC' | 'pkiUsergroupID_DESC' | 'sUsergroupNameX_ASC' | 'sUsergroupNameX_DESC' | 'iCountUser_ASC' | 'iCountUser_DESC'} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetListV1(eOrderBy?: 'pkiUsergroupID_ASC' | 'pkiUsergroupID_DESC' | 'sUsergroupNameX_ASC' | 'sUsergroupNameX_DESC' | 'iCountUser_ASC' | 'iCountUser_DESC', iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: any): AxiosPromise<UsergroupGetListV1Response> {
            return localVarFp.usergroupGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetObjectV2(pkiUsergroupID: number, options?: any): AxiosPromise<UsergroupGetObjectV2Response> {
            return localVarFp.usergroupGetObjectV2(pkiUsergroupID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup\'s Permissions
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetPermissionsV1(pkiUsergroupID: number, options?: any): AxiosPromise<UsergroupGetPermissionsV1Response> {
            return localVarFp.usergroupGetPermissionsV1(pkiUsergroupID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Usergroup\'s Usergroupmemberships
         * @param {number} pkiUsergroupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupGetUsergroupmembershipsV1(pkiUsergroupID: number, options?: any): AxiosPromise<UsergroupGetUsergroupmembershipsV1Response> {
            return localVarFp.usergroupGetUsergroupmembershipsV1(pkiUsergroupID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectUsergroupApi - object-oriented interface
 * @export
 * @class ObjectUsergroupApi
 * @extends {BaseAPI}
 */
export class ObjectUsergroupApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Usergroup
     * @param {UsergroupCreateObjectV1Request} usergroupCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupCreateObjectV1(usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupCreateObjectV1(usergroupCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Usergroup
     * @param {number} pkiUsergroupID 
     * @param {UsergroupEditObjectV1Request} usergroupEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupEditObjectV1(pkiUsergroupID: number, usergroupEditObjectV1Request: UsergroupEditObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupEditObjectV1(pkiUsergroupID, usergroupEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @summary Edit multiple Permissions
     * @param {number} pkiUsergroupID 
     * @param {UsergroupEditPermissionsV1Request} usergroupEditPermissionsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupEditPermissionsV1(pkiUsergroupID: number, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupEditPermissionsV1(pkiUsergroupID, usergroupEditPermissionsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @summary Edit multiple Usergroupmemberships
     * @param {number} pkiUsergroupID 
     * @param {UsergroupEditUsergroupmembershipsV1Request} usergroupEditUsergroupmembershipsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupEditUsergroupmembershipsV1(pkiUsergroupID: number, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupEditUsergroupmembershipsV1(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @summary Retrieve Usergroups and IDs
     * @param {'All'} sSelector The type of Usergroups to return
     * @param {'All' | 'Active' | 'Inactive'} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupGetAutocompleteV2(sSelector: 'All', eFilterActive?: 'All' | 'Active' | 'Inactive', sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Usergroup list
     * @param {'pkiUsergroupID_ASC' | 'pkiUsergroupID_DESC' | 'sUsergroupNameX_ASC' | 'sUsergroupNameX_DESC' | 'iCountUser_ASC' | 'iCountUser_DESC'} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupGetListV1(eOrderBy?: 'pkiUsergroupID_ASC' | 'pkiUsergroupID_DESC' | 'sUsergroupNameX_ASC' | 'sUsergroupNameX_DESC' | 'iCountUser_ASC' | 'iCountUser_DESC', iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Usergroup
     * @param {number} pkiUsergroupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupGetObjectV2(pkiUsergroupID: number, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupGetObjectV2(pkiUsergroupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Usergroup\'s Permissions
     * @param {number} pkiUsergroupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupGetPermissionsV1(pkiUsergroupID: number, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupGetPermissionsV1(pkiUsergroupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Usergroup\'s Usergroupmemberships
     * @param {number} pkiUsergroupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupApi
     */
    public usergroupGetUsergroupmembershipsV1(pkiUsergroupID: number, options?: AxiosRequestConfig) {
        return ObjectUsergroupApiFp(this.configuration).usergroupGetUsergroupmembershipsV1(pkiUsergroupID, options).then((request) => request(this.axios, this.basePath));
    }
}
