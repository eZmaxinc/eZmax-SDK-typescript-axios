/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { SignatureCreateObjectV1Request } from '../model';
// @ts-ignore
import { SignatureCreateObjectV1Response } from '../model';
// @ts-ignore
import { SignatureDeleteObjectV1Response } from '../model';
// @ts-ignore
import { SignatureEditObjectV1Request } from '../model';
// @ts-ignore
import { SignatureEditObjectV1Response } from '../model';
// @ts-ignore
import { SignatureGetObjectV2Response } from '../model';
// @ts-ignore
import { SignatureGetObjectV3Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectSignatureApi - axios parameter creator
 * @export
 */
export const ObjectSignatureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Signature
         * @param {SignatureCreateObjectV1Request} signatureCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureCreateObjectV1: async (signatureCreateObjectV1Request: SignatureCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signatureCreateObjectV1Request' is not null or undefined
            assertParamExists('signatureCreateObjectV1', 'signatureCreateObjectV1Request', signatureCreateObjectV1Request)
            const localVarPath = `/1/object/signature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signatureCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureDeleteObjectV1: async (pkiSignatureID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSignatureID' is not null or undefined
            assertParamExists('signatureDeleteObjectV1', 'pkiSignatureID', pkiSignatureID)
            const localVarPath = `/1/object/signature/{pkiSignatureID}`
                .replace(`{${"pkiSignatureID"}}`, encodeURIComponent(String(pkiSignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {SignatureEditObjectV1Request} signatureEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureEditObjectV1: async (pkiSignatureID: number, signatureEditObjectV1Request: SignatureEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSignatureID' is not null or undefined
            assertParamExists('signatureEditObjectV1', 'pkiSignatureID', pkiSignatureID)
            // verify required parameter 'signatureEditObjectV1Request' is not null or undefined
            assertParamExists('signatureEditObjectV1', 'signatureEditObjectV1Request', signatureEditObjectV1Request)
            const localVarPath = `/1/object/signature/{pkiSignatureID}`
                .replace(`{${"pkiSignatureID"}}`, encodeURIComponent(String(pkiSignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signatureEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        signatureGetObjectV2: async (pkiSignatureID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSignatureID' is not null or undefined
            assertParamExists('signatureGetObjectV2', 'pkiSignatureID', pkiSignatureID)
            const localVarPath = `/2/object/signature/{pkiSignatureID}`
                .replace(`{${"pkiSignatureID"}}`, encodeURIComponent(String(pkiSignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureGetObjectV3: async (pkiSignatureID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSignatureID' is not null or undefined
            assertParamExists('signatureGetObjectV3', 'pkiSignatureID', pkiSignatureID)
            const localVarPath = `/3/object/signature/{pkiSignatureID}`
                .replace(`{${"pkiSignatureID"}}`, encodeURIComponent(String(pkiSignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Signature initial SVG
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureGetSVGInitialsV1: async (pkiSignatureID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSignatureID' is not null or undefined
            assertParamExists('signatureGetSVGInitialsV1', 'pkiSignatureID', pkiSignatureID)
            const localVarPath = `/1/object/signature/{pkiSignatureID}/getSVGInitials`
                .replace(`{${"pkiSignatureID"}}`, encodeURIComponent(String(pkiSignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Signature SVG
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureGetSVGSignatureV1: async (pkiSignatureID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiSignatureID' is not null or undefined
            assertParamExists('signatureGetSVGSignatureV1', 'pkiSignatureID', pkiSignatureID)
            const localVarPath = `/1/object/signature/{pkiSignatureID}/getSVGSignature`
                .replace(`{${"pkiSignatureID"}}`, encodeURIComponent(String(pkiSignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectSignatureApi - functional programming interface
 * @export
 */
export const ObjectSignatureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectSignatureApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Signature
         * @param {SignatureCreateObjectV1Request} signatureCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signatureCreateObjectV1(signatureCreateObjectV1Request: SignatureCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignatureCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signatureCreateObjectV1(signatureCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSignatureApi.signatureCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signatureDeleteObjectV1(pkiSignatureID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignatureDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signatureDeleteObjectV1(pkiSignatureID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSignatureApi.signatureDeleteObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {SignatureEditObjectV1Request} signatureEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signatureEditObjectV1(pkiSignatureID: number, signatureEditObjectV1Request: SignatureEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignatureEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signatureEditObjectV1(pkiSignatureID, signatureEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSignatureApi.signatureEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async signatureGetObjectV2(pkiSignatureID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignatureGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signatureGetObjectV2(pkiSignatureID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSignatureApi.signatureGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signatureGetObjectV3(pkiSignatureID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignatureGetObjectV3Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signatureGetObjectV3(pkiSignatureID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSignatureApi.signatureGetObjectV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Signature initial SVG
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signatureGetSVGInitialsV1(pkiSignatureID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signatureGetSVGInitialsV1(pkiSignatureID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSignatureApi.signatureGetSVGInitialsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Signature SVG
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signatureGetSVGSignatureV1(pkiSignatureID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signatureGetSVGSignatureV1(pkiSignatureID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectSignatureApi.signatureGetSVGSignatureV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectSignatureApi - factory interface
 * @export
 */
export const ObjectSignatureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectSignatureApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Signature
         * @param {SignatureCreateObjectV1Request} signatureCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureCreateObjectV1(signatureCreateObjectV1Request: SignatureCreateObjectV1Request, options?: any): AxiosPromise<SignatureCreateObjectV1Response> {
            return localVarFp.signatureCreateObjectV1(signatureCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureDeleteObjectV1(pkiSignatureID: number, options?: any): AxiosPromise<SignatureDeleteObjectV1Response> {
            return localVarFp.signatureDeleteObjectV1(pkiSignatureID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {SignatureEditObjectV1Request} signatureEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureEditObjectV1(pkiSignatureID: number, signatureEditObjectV1Request: SignatureEditObjectV1Request, options?: any): AxiosPromise<SignatureEditObjectV1Response> {
            return localVarFp.signatureEditObjectV1(pkiSignatureID, signatureEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        signatureGetObjectV2(pkiSignatureID: number, options?: any): AxiosPromise<SignatureGetObjectV2Response> {
            return localVarFp.signatureGetObjectV2(pkiSignatureID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Signature
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureGetObjectV3(pkiSignatureID: number, options?: any): AxiosPromise<SignatureGetObjectV3Response> {
            return localVarFp.signatureGetObjectV3(pkiSignatureID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Signature initial SVG
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureGetSVGInitialsV1(pkiSignatureID: number, options?: any): AxiosPromise<void> {
            return localVarFp.signatureGetSVGInitialsV1(pkiSignatureID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Signature SVG
         * @param {number} pkiSignatureID The unique ID of the Signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureGetSVGSignatureV1(pkiSignatureID: number, options?: any): AxiosPromise<void> {
            return localVarFp.signatureGetSVGSignatureV1(pkiSignatureID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectSignatureApi - object-oriented interface
 * @export
 * @class ObjectSignatureApi
 * @extends {BaseAPI}
 */
export class ObjectSignatureApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Signature
     * @param {SignatureCreateObjectV1Request} signatureCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSignatureApi
     */
    public signatureCreateObjectV1(signatureCreateObjectV1Request: SignatureCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectSignatureApiFp(this.configuration).signatureCreateObjectV1(signatureCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Signature
     * @param {number} pkiSignatureID The unique ID of the Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSignatureApi
     */
    public signatureDeleteObjectV1(pkiSignatureID: number, options?: RawAxiosRequestConfig) {
        return ObjectSignatureApiFp(this.configuration).signatureDeleteObjectV1(pkiSignatureID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Signature
     * @param {number} pkiSignatureID The unique ID of the Signature
     * @param {SignatureEditObjectV1Request} signatureEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSignatureApi
     */
    public signatureEditObjectV1(pkiSignatureID: number, signatureEditObjectV1Request: SignatureEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectSignatureApiFp(this.configuration).signatureEditObjectV1(pkiSignatureID, signatureEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Signature
     * @param {number} pkiSignatureID The unique ID of the Signature
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectSignatureApi
     */
    public signatureGetObjectV2(pkiSignatureID: number, options?: RawAxiosRequestConfig) {
        return ObjectSignatureApiFp(this.configuration).signatureGetObjectV2(pkiSignatureID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Signature
     * @param {number} pkiSignatureID The unique ID of the Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSignatureApi
     */
    public signatureGetObjectV3(pkiSignatureID: number, options?: RawAxiosRequestConfig) {
        return ObjectSignatureApiFp(this.configuration).signatureGetObjectV3(pkiSignatureID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Signature initial SVG
     * @param {number} pkiSignatureID The unique ID of the Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSignatureApi
     */
    public signatureGetSVGInitialsV1(pkiSignatureID: number, options?: RawAxiosRequestConfig) {
        return ObjectSignatureApiFp(this.configuration).signatureGetSVGInitialsV1(pkiSignatureID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Signature SVG
     * @param {number} pkiSignatureID The unique ID of the Signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectSignatureApi
     */
    public signatureGetSVGSignatureV1(pkiSignatureID: number, options?: RawAxiosRequestConfig) {
        return ObjectSignatureApiFp(this.configuration).signatureGetSVGSignatureV1(pkiSignatureID, options).then((request) => request(this.axios, this.basePath));
    }
}

