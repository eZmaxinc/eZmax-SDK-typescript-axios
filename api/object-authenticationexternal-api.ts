/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AuthenticationexternalCreateObjectV1Request } from '../model';
// @ts-ignore
import { AuthenticationexternalCreateObjectV1Response } from '../model';
// @ts-ignore
import { AuthenticationexternalDeleteObjectV1Response } from '../model';
// @ts-ignore
import { AuthenticationexternalEditObjectV1Request } from '../model';
// @ts-ignore
import { AuthenticationexternalEditObjectV1Response } from '../model';
// @ts-ignore
import { AuthenticationexternalGetAutocompleteV2Response } from '../model';
// @ts-ignore
import { AuthenticationexternalGetListV1Response } from '../model';
// @ts-ignore
import { AuthenticationexternalGetObjectV2Response } from '../model';
// @ts-ignore
import { AuthenticationexternalResetAuthorizationV1Response } from '../model';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectAuthenticationexternalApi - axios parameter creator
 * @export
 */
export const ObjectAuthenticationexternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Authenticationexternal
         * @param {AuthenticationexternalCreateObjectV1Request} authenticationexternalCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalCreateObjectV1: async (authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationexternalCreateObjectV1Request' is not null or undefined
            assertParamExists('authenticationexternalCreateObjectV1', 'authenticationexternalCreateObjectV1Request', authenticationexternalCreateObjectV1Request)
            const localVarPath = `/1/object/authenticationexternal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationexternalCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalDeleteObjectV1: async (pkiAuthenticationexternalID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiAuthenticationexternalID' is not null or undefined
            assertParamExists('authenticationexternalDeleteObjectV1', 'pkiAuthenticationexternalID', pkiAuthenticationexternalID)
            const localVarPath = `/1/object/authenticationexternal/{pkiAuthenticationexternalID}`
                .replace(`{${"pkiAuthenticationexternalID"}}`, encodeURIComponent(String(pkiAuthenticationexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {AuthenticationexternalEditObjectV1Request} authenticationexternalEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalEditObjectV1: async (pkiAuthenticationexternalID: number, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiAuthenticationexternalID' is not null or undefined
            assertParamExists('authenticationexternalEditObjectV1', 'pkiAuthenticationexternalID', pkiAuthenticationexternalID)
            // verify required parameter 'authenticationexternalEditObjectV1Request' is not null or undefined
            assertParamExists('authenticationexternalEditObjectV1', 'authenticationexternalEditObjectV1Request', authenticationexternalEditObjectV1Request)
            const localVarPath = `/1/object/authenticationexternal/{pkiAuthenticationexternalID}`
                .replace(`{${"pkiAuthenticationexternalID"}}`, encodeURIComponent(String(pkiAuthenticationexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationexternalEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
         * @summary Retrieve Authenticationexternals and IDs
         * @param {AuthenticationexternalGetAutocompleteV2SSelectorEnum} sSelector The type of Authenticationexternals to return
         * @param {AuthenticationexternalGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalGetAutocompleteV2: async (sSelector: AuthenticationexternalGetAutocompleteV2SSelectorEnum, eFilterActive?: AuthenticationexternalGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('authenticationexternalGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/authenticationexternal/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce<br>SalesforceSandbox |
         * @summary Retrieve Authenticationexternal list
         * @param {AuthenticationexternalGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalGetListV1: async (eOrderBy?: AuthenticationexternalGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/authenticationexternal/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalGetObjectV2: async (pkiAuthenticationexternalID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiAuthenticationexternalID' is not null or undefined
            assertParamExists('authenticationexternalGetObjectV2', 'pkiAuthenticationexternalID', pkiAuthenticationexternalID)
            const localVarPath = `/2/object/authenticationexternal/{pkiAuthenticationexternalID}`
                .replace(`{${"pkiAuthenticationexternalID"}}`, encodeURIComponent(String(pkiAuthenticationexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset the Authenticationexternal authorization
         * @param {number} pkiAuthenticationexternalID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalResetAuthorizationV1: async (pkiAuthenticationexternalID: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiAuthenticationexternalID' is not null or undefined
            assertParamExists('authenticationexternalResetAuthorizationV1', 'pkiAuthenticationexternalID', pkiAuthenticationexternalID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authenticationexternalResetAuthorizationV1', 'body', body)
            const localVarPath = `/1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization`
                .replace(`{${"pkiAuthenticationexternalID"}}`, encodeURIComponent(String(pkiAuthenticationexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectAuthenticationexternalApi - functional programming interface
 * @export
 */
export const ObjectAuthenticationexternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectAuthenticationexternalApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Authenticationexternal
         * @param {AuthenticationexternalCreateObjectV1Request} authenticationexternalCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationexternalCreateObjectV1(authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationexternalCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationexternalCreateObjectV1(authenticationexternalCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectAuthenticationexternalApi.authenticationexternalCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationexternalDeleteObjectV1(pkiAuthenticationexternalID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationexternalDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationexternalDeleteObjectV1(pkiAuthenticationexternalID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectAuthenticationexternalApi.authenticationexternalDeleteObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {AuthenticationexternalEditObjectV1Request} authenticationexternalEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationexternalEditObjectV1(pkiAuthenticationexternalID: number, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationexternalEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationexternalEditObjectV1(pkiAuthenticationexternalID, authenticationexternalEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectAuthenticationexternalApi.authenticationexternalEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
         * @summary Retrieve Authenticationexternals and IDs
         * @param {AuthenticationexternalGetAutocompleteV2SSelectorEnum} sSelector The type of Authenticationexternals to return
         * @param {AuthenticationexternalGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationexternalGetAutocompleteV2(sSelector: AuthenticationexternalGetAutocompleteV2SSelectorEnum, eFilterActive?: AuthenticationexternalGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationexternalGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationexternalGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectAuthenticationexternalApi.authenticationexternalGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce<br>SalesforceSandbox |
         * @summary Retrieve Authenticationexternal list
         * @param {AuthenticationexternalGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationexternalGetListV1(eOrderBy?: AuthenticationexternalGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationexternalGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationexternalGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectAuthenticationexternalApi.authenticationexternalGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationexternalGetObjectV2(pkiAuthenticationexternalID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationexternalGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationexternalGetObjectV2(pkiAuthenticationexternalID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectAuthenticationexternalApi.authenticationexternalGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset the Authenticationexternal authorization
         * @param {number} pkiAuthenticationexternalID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationexternalResetAuthorizationV1(pkiAuthenticationexternalID: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationexternalResetAuthorizationV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationexternalResetAuthorizationV1(pkiAuthenticationexternalID, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectAuthenticationexternalApi.authenticationexternalResetAuthorizationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectAuthenticationexternalApi - factory interface
 * @export
 */
export const ObjectAuthenticationexternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectAuthenticationexternalApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Authenticationexternal
         * @param {AuthenticationexternalCreateObjectV1Request} authenticationexternalCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalCreateObjectV1(authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request, options?: any): AxiosPromise<AuthenticationexternalCreateObjectV1Response> {
            return localVarFp.authenticationexternalCreateObjectV1(authenticationexternalCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalDeleteObjectV1(pkiAuthenticationexternalID: number, options?: any): AxiosPromise<AuthenticationexternalDeleteObjectV1Response> {
            return localVarFp.authenticationexternalDeleteObjectV1(pkiAuthenticationexternalID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {AuthenticationexternalEditObjectV1Request} authenticationexternalEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalEditObjectV1(pkiAuthenticationexternalID: number, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request, options?: any): AxiosPromise<AuthenticationexternalEditObjectV1Response> {
            return localVarFp.authenticationexternalEditObjectV1(pkiAuthenticationexternalID, authenticationexternalEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
         * @summary Retrieve Authenticationexternals and IDs
         * @param {AuthenticationexternalGetAutocompleteV2SSelectorEnum} sSelector The type of Authenticationexternals to return
         * @param {AuthenticationexternalGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalGetAutocompleteV2(sSelector: AuthenticationexternalGetAutocompleteV2SSelectorEnum, eFilterActive?: AuthenticationexternalGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: any): AxiosPromise<AuthenticationexternalGetAutocompleteV2Response> {
            return localVarFp.authenticationexternalGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce<br>SalesforceSandbox |
         * @summary Retrieve Authenticationexternal list
         * @param {AuthenticationexternalGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalGetListV1(eOrderBy?: AuthenticationexternalGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: any): AxiosPromise<AuthenticationexternalGetListV1Response> {
            return localVarFp.authenticationexternalGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Authenticationexternal
         * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalGetObjectV2(pkiAuthenticationexternalID: number, options?: any): AxiosPromise<AuthenticationexternalGetObjectV2Response> {
            return localVarFp.authenticationexternalGetObjectV2(pkiAuthenticationexternalID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset the Authenticationexternal authorization
         * @param {number} pkiAuthenticationexternalID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationexternalResetAuthorizationV1(pkiAuthenticationexternalID: number, body: object, options?: any): AxiosPromise<AuthenticationexternalResetAuthorizationV1Response> {
            return localVarFp.authenticationexternalResetAuthorizationV1(pkiAuthenticationexternalID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectAuthenticationexternalApi - object-oriented interface
 * @export
 * @class ObjectAuthenticationexternalApi
 * @extends {BaseAPI}
 */
export class ObjectAuthenticationexternalApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Authenticationexternal
     * @param {AuthenticationexternalCreateObjectV1Request} authenticationexternalCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectAuthenticationexternalApi
     */
    public authenticationexternalCreateObjectV1(authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectAuthenticationexternalApiFp(this.configuration).authenticationexternalCreateObjectV1(authenticationexternalCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Authenticationexternal
     * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectAuthenticationexternalApi
     */
    public authenticationexternalDeleteObjectV1(pkiAuthenticationexternalID: number, options?: RawAxiosRequestConfig) {
        return ObjectAuthenticationexternalApiFp(this.configuration).authenticationexternalDeleteObjectV1(pkiAuthenticationexternalID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Authenticationexternal
     * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @param {AuthenticationexternalEditObjectV1Request} authenticationexternalEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectAuthenticationexternalApi
     */
    public authenticationexternalEditObjectV1(pkiAuthenticationexternalID: number, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectAuthenticationexternalApiFp(this.configuration).authenticationexternalEditObjectV1(pkiAuthenticationexternalID, authenticationexternalEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
     * @summary Retrieve Authenticationexternals and IDs
     * @param {AuthenticationexternalGetAutocompleteV2SSelectorEnum} sSelector The type of Authenticationexternals to return
     * @param {AuthenticationexternalGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectAuthenticationexternalApi
     */
    public authenticationexternalGetAutocompleteV2(sSelector: AuthenticationexternalGetAutocompleteV2SSelectorEnum, eFilterActive?: AuthenticationexternalGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectAuthenticationexternalApiFp(this.configuration).authenticationexternalGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce<br>SalesforceSandbox |
     * @summary Retrieve Authenticationexternal list
     * @param {AuthenticationexternalGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectAuthenticationexternalApi
     */
    public authenticationexternalGetListV1(eOrderBy?: AuthenticationexternalGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectAuthenticationexternalApiFp(this.configuration).authenticationexternalGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Authenticationexternal
     * @param {number} pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectAuthenticationexternalApi
     */
    public authenticationexternalGetObjectV2(pkiAuthenticationexternalID: number, options?: RawAxiosRequestConfig) {
        return ObjectAuthenticationexternalApiFp(this.configuration).authenticationexternalGetObjectV2(pkiAuthenticationexternalID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset the Authenticationexternal authorization
     * @param {number} pkiAuthenticationexternalID 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectAuthenticationexternalApi
     */
    public authenticationexternalResetAuthorizationV1(pkiAuthenticationexternalID: number, body: object, options?: RawAxiosRequestConfig) {
        return ObjectAuthenticationexternalApiFp(this.configuration).authenticationexternalResetAuthorizationV1(pkiAuthenticationexternalID, body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AuthenticationexternalGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type AuthenticationexternalGetAutocompleteV2SSelectorEnum = typeof AuthenticationexternalGetAutocompleteV2SSelectorEnum[keyof typeof AuthenticationexternalGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const AuthenticationexternalGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type AuthenticationexternalGetAutocompleteV2EFilterActiveEnum = typeof AuthenticationexternalGetAutocompleteV2EFilterActiveEnum[keyof typeof AuthenticationexternalGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const AuthenticationexternalGetListV1EOrderByEnum = {
    pkiAuthenticationexternalID_ASC: 'pkiAuthenticationexternalID_ASC',
    pkiAuthenticationexternalID_DESC: 'pkiAuthenticationexternalID_DESC',
    sAuthenticationexternalDescription_ASC: 'sAuthenticationexternalDescription_ASC',
    sAuthenticationexternalDescription_DESC: 'sAuthenticationexternalDescription_DESC',
    eAuthenticationexternalType_ASC: 'eAuthenticationexternalType_ASC',
    eAuthenticationexternalType_DESC: 'eAuthenticationexternalType_DESC'
} as const;
export type AuthenticationexternalGetListV1EOrderByEnum = typeof AuthenticationexternalGetListV1EOrderByEnum[keyof typeof AuthenticationexternalGetListV1EOrderByEnum];
