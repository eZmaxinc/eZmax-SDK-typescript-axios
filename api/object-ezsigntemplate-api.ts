/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { EzsigntemplateCopyV1Request } from '../model';
// @ts-ignore
import { EzsigntemplateCopyV1Response } from '../model';
// @ts-ignore
import { EzsigntemplateCreateObjectV1Request } from '../model';
// @ts-ignore
import { EzsigntemplateCreateObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplateCreateObjectV2Request } from '../model';
// @ts-ignore
import { EzsigntemplateCreateObjectV2Response } from '../model';
// @ts-ignore
import { EzsigntemplateDeleteObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplateEditObjectV1Request } from '../model';
// @ts-ignore
import { EzsigntemplateEditObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplateEditObjectV2Request } from '../model';
// @ts-ignore
import { EzsigntemplateEditObjectV2Response } from '../model';
// @ts-ignore
import { EzsigntemplateGetAutocompleteV2Response } from '../model';
// @ts-ignore
import { EzsigntemplateGetListV1Response } from '../model';
// @ts-ignore
import { EzsigntemplateGetObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplateGetObjectV2Response } from '../model';
// @ts-ignore
import { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsigntemplateApi - axios parameter creator
 * @export
 */
export const ObjectEzsigntemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Copy the Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateCopyV1Request} ezsigntemplateCopyV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateCopyV1: async (pkiEzsigntemplateID: number, ezsigntemplateCopyV1Request: EzsigntemplateCopyV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplateID' is not null or undefined
            assertParamExists('ezsigntemplateCopyV1', 'pkiEzsigntemplateID', pkiEzsigntemplateID)
            // verify required parameter 'ezsigntemplateCopyV1Request' is not null or undefined
            assertParamExists('ezsigntemplateCopyV1', 'ezsigntemplateCopyV1Request', ezsigntemplateCopyV1Request)
            const localVarPath = `/1/object/ezsigntemplate/{pkiEzsigntemplateID}/copy`
                .replace(`{${"pkiEzsigntemplateID"}}`, encodeURIComponent(String(pkiEzsigntemplateID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplateCopyV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplate
         * @param {EzsigntemplateCreateObjectV1Request} ezsigntemplateCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigntemplateCreateObjectV1: async (ezsigntemplateCreateObjectV1Request: EzsigntemplateCreateObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigntemplateCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplateCreateObjectV1', 'ezsigntemplateCreateObjectV1Request', ezsigntemplateCreateObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplateCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplate
         * @param {EzsigntemplateCreateObjectV2Request} ezsigntemplateCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateCreateObjectV2: async (ezsigntemplateCreateObjectV2Request: EzsigntemplateCreateObjectV2Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigntemplateCreateObjectV2Request' is not null or undefined
            assertParamExists('ezsigntemplateCreateObjectV2', 'ezsigntemplateCreateObjectV2Request', ezsigntemplateCreateObjectV2Request)
            const localVarPath = `/2/object/ezsigntemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplateCreateObjectV2Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateDeleteObjectV1: async (pkiEzsigntemplateID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplateID' is not null or undefined
            assertParamExists('ezsigntemplateDeleteObjectV1', 'pkiEzsigntemplateID', pkiEzsigntemplateID)
            const localVarPath = `/1/object/ezsigntemplate/{pkiEzsigntemplateID}`
                .replace(`{${"pkiEzsigntemplateID"}}`, encodeURIComponent(String(pkiEzsigntemplateID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateEditObjectV1Request} ezsigntemplateEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigntemplateEditObjectV1: async (pkiEzsigntemplateID: number, ezsigntemplateEditObjectV1Request: EzsigntemplateEditObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplateID' is not null or undefined
            assertParamExists('ezsigntemplateEditObjectV1', 'pkiEzsigntemplateID', pkiEzsigntemplateID)
            // verify required parameter 'ezsigntemplateEditObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplateEditObjectV1', 'ezsigntemplateEditObjectV1Request', ezsigntemplateEditObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplate/{pkiEzsigntemplateID}`
                .replace(`{${"pkiEzsigntemplateID"}}`, encodeURIComponent(String(pkiEzsigntemplateID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplateEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateEditObjectV2Request} ezsigntemplateEditObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateEditObjectV2: async (pkiEzsigntemplateID: number, ezsigntemplateEditObjectV2Request: EzsigntemplateEditObjectV2Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplateID' is not null or undefined
            assertParamExists('ezsigntemplateEditObjectV2', 'pkiEzsigntemplateID', pkiEzsigntemplateID)
            // verify required parameter 'ezsigntemplateEditObjectV2Request' is not null or undefined
            assertParamExists('ezsigntemplateEditObjectV2', 'ezsigntemplateEditObjectV2Request', ezsigntemplateEditObjectV2Request)
            const localVarPath = `/2/object/ezsigntemplate/{pkiEzsigntemplateID}`
                .replace(`{${"pkiEzsigntemplateID"}}`, encodeURIComponent(String(pkiEzsigntemplateID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplateEditObjectV2Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsigntemplates and IDs
         * @param {EzsigntemplateGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsigntemplates to return
         * @param {EzsigntemplateGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateGetAutocompleteV2: async (sSelector: EzsigntemplateGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsigntemplateGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('ezsigntemplateGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/ezsigntemplate/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
         * @summary Retrieve Ezsigntemplate list
         * @param {EzsigntemplateGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateGetListV1: async (eOrderBy?: EzsigntemplateGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/ezsigntemplate/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigntemplateGetObjectV1: async (pkiEzsigntemplateID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplateID' is not null or undefined
            assertParamExists('ezsigntemplateGetObjectV1', 'pkiEzsigntemplateID', pkiEzsigntemplateID)
            const localVarPath = `/1/object/ezsigntemplate/{pkiEzsigntemplateID}`
                .replace(`{${"pkiEzsigntemplateID"}}`, encodeURIComponent(String(pkiEzsigntemplateID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateGetObjectV2: async (pkiEzsigntemplateID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplateID' is not null or undefined
            assertParamExists('ezsigntemplateGetObjectV2', 'pkiEzsigntemplateID', pkiEzsigntemplateID)
            const localVarPath = `/2/object/ezsigntemplate/{pkiEzsigntemplateID}`
                .replace(`{${"pkiEzsigntemplateID"}}`, encodeURIComponent(String(pkiEzsigntemplateID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsigntemplateApi - functional programming interface
 * @export
 */
export const ObjectEzsigntemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsigntemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Copy the Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateCopyV1Request} ezsigntemplateCopyV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplateCopyV1(pkiEzsigntemplateID: number, ezsigntemplateCopyV1Request: EzsigntemplateCopyV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateCopyV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateCopyV1(pkiEzsigntemplateID, ezsigntemplateCopyV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplate
         * @param {EzsigntemplateCreateObjectV1Request} ezsigntemplateCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsigntemplateCreateObjectV1(ezsigntemplateCreateObjectV1Request: EzsigntemplateCreateObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateCreateObjectV1(ezsigntemplateCreateObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplate
         * @param {EzsigntemplateCreateObjectV2Request} ezsigntemplateCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplateCreateObjectV2(ezsigntemplateCreateObjectV2Request: EzsigntemplateCreateObjectV2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateCreateObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateCreateObjectV2(ezsigntemplateCreateObjectV2Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplateDeleteObjectV1(pkiEzsigntemplateID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateDeleteObjectV1(pkiEzsigntemplateID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateEditObjectV1Request} ezsigntemplateEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsigntemplateEditObjectV1(pkiEzsigntemplateID: number, ezsigntemplateEditObjectV1Request: EzsigntemplateEditObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateEditObjectV1(pkiEzsigntemplateID, ezsigntemplateEditObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateEditObjectV2Request} ezsigntemplateEditObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplateEditObjectV2(pkiEzsigntemplateID: number, ezsigntemplateEditObjectV2Request: EzsigntemplateEditObjectV2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateEditObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateEditObjectV2(pkiEzsigntemplateID, ezsigntemplateEditObjectV2Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsigntemplates and IDs
         * @param {EzsigntemplateGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsigntemplates to return
         * @param {EzsigntemplateGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplateGetAutocompleteV2(sSelector: EzsigntemplateGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsigntemplateGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
         * @summary Retrieve Ezsigntemplate list
         * @param {EzsigntemplateGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplateGetListV1(eOrderBy?: EzsigntemplateGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsigntemplateGetObjectV1(pkiEzsigntemplateID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateGetObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateGetObjectV1(pkiEzsigntemplateID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplateGetObjectV2(pkiEzsigntemplateID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplateGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplateGetObjectV2(pkiEzsigntemplateID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectEzsigntemplateApi - factory interface
 * @export
 */
export const ObjectEzsigntemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsigntemplateApiFp(configuration)
    return {
        /**
         * 
         * @summary Copy the Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateCopyV1Request} ezsigntemplateCopyV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateCopyV1(pkiEzsigntemplateID: number, ezsigntemplateCopyV1Request: EzsigntemplateCopyV1Request, options?: any): AxiosPromise<EzsigntemplateCopyV1Response> {
            return localVarFp.ezsigntemplateCopyV1(pkiEzsigntemplateID, ezsigntemplateCopyV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplate
         * @param {EzsigntemplateCreateObjectV1Request} ezsigntemplateCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigntemplateCreateObjectV1(ezsigntemplateCreateObjectV1Request: EzsigntemplateCreateObjectV1Request, options?: any): AxiosPromise<EzsigntemplateCreateObjectV1Response> {
            return localVarFp.ezsigntemplateCreateObjectV1(ezsigntemplateCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplate
         * @param {EzsigntemplateCreateObjectV2Request} ezsigntemplateCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateCreateObjectV2(ezsigntemplateCreateObjectV2Request: EzsigntemplateCreateObjectV2Request, options?: any): AxiosPromise<EzsigntemplateCreateObjectV2Response> {
            return localVarFp.ezsigntemplateCreateObjectV2(ezsigntemplateCreateObjectV2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateDeleteObjectV1(pkiEzsigntemplateID: number, options?: any): AxiosPromise<EzsigntemplateDeleteObjectV1Response> {
            return localVarFp.ezsigntemplateDeleteObjectV1(pkiEzsigntemplateID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateEditObjectV1Request} ezsigntemplateEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigntemplateEditObjectV1(pkiEzsigntemplateID: number, ezsigntemplateEditObjectV1Request: EzsigntemplateEditObjectV1Request, options?: any): AxiosPromise<EzsigntemplateEditObjectV1Response> {
            return localVarFp.ezsigntemplateEditObjectV1(pkiEzsigntemplateID, ezsigntemplateEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {EzsigntemplateEditObjectV2Request} ezsigntemplateEditObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateEditObjectV2(pkiEzsigntemplateID: number, ezsigntemplateEditObjectV2Request: EzsigntemplateEditObjectV2Request, options?: any): AxiosPromise<EzsigntemplateEditObjectV2Response> {
            return localVarFp.ezsigntemplateEditObjectV2(pkiEzsigntemplateID, ezsigntemplateEditObjectV2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsigntemplates and IDs
         * @param {EzsigntemplateGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsigntemplates to return
         * @param {EzsigntemplateGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateGetAutocompleteV2(sSelector: EzsigntemplateGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsigntemplateGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: any): AxiosPromise<EzsigntemplateGetAutocompleteV2Response> {
            return localVarFp.ezsigntemplateGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
         * @summary Retrieve Ezsigntemplate list
         * @param {EzsigntemplateGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateGetListV1(eOrderBy?: EzsigntemplateGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: any): AxiosPromise<EzsigntemplateGetListV1Response> {
            return localVarFp.ezsigntemplateGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigntemplateGetObjectV1(pkiEzsigntemplateID: number, options?: any): AxiosPromise<EzsigntemplateGetObjectV1Response> {
            return localVarFp.ezsigntemplateGetObjectV1(pkiEzsigntemplateID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplate
         * @param {number} pkiEzsigntemplateID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplateGetObjectV2(pkiEzsigntemplateID: number, options?: any): AxiosPromise<EzsigntemplateGetObjectV2Response> {
            return localVarFp.ezsigntemplateGetObjectV2(pkiEzsigntemplateID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsigntemplateApi - object-oriented interface
 * @export
 * @class ObjectEzsigntemplateApi
 * @extends {BaseAPI}
 */
export class ObjectEzsigntemplateApi extends BaseAPI {
    /**
     * 
     * @summary Copy the Ezsigntemplate
     * @param {number} pkiEzsigntemplateID 
     * @param {EzsigntemplateCopyV1Request} ezsigntemplateCopyV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateCopyV1(pkiEzsigntemplateID: number, ezsigntemplateCopyV1Request: EzsigntemplateCopyV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateCopyV1(pkiEzsigntemplateID, ezsigntemplateCopyV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsigntemplate
     * @param {EzsigntemplateCreateObjectV1Request} ezsigntemplateCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateCreateObjectV1(ezsigntemplateCreateObjectV1Request: EzsigntemplateCreateObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateCreateObjectV1(ezsigntemplateCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsigntemplate
     * @param {EzsigntemplateCreateObjectV2Request} ezsigntemplateCreateObjectV2Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateCreateObjectV2(ezsigntemplateCreateObjectV2Request: EzsigntemplateCreateObjectV2Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateCreateObjectV2(ezsigntemplateCreateObjectV2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Ezsigntemplate
     * @param {number} pkiEzsigntemplateID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateDeleteObjectV1(pkiEzsigntemplateID: number, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateDeleteObjectV1(pkiEzsigntemplateID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsigntemplate
     * @param {number} pkiEzsigntemplateID 
     * @param {EzsigntemplateEditObjectV1Request} ezsigntemplateEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateEditObjectV1(pkiEzsigntemplateID: number, ezsigntemplateEditObjectV1Request: EzsigntemplateEditObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateEditObjectV1(pkiEzsigntemplateID, ezsigntemplateEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsigntemplate
     * @param {number} pkiEzsigntemplateID 
     * @param {EzsigntemplateEditObjectV2Request} ezsigntemplateEditObjectV2Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateEditObjectV2(pkiEzsigntemplateID: number, ezsigntemplateEditObjectV2Request: EzsigntemplateEditObjectV2Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateEditObjectV2(pkiEzsigntemplateID, ezsigntemplateEditObjectV2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
     * @summary Retrieve Ezsigntemplates and IDs
     * @param {EzsigntemplateGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsigntemplates to return
     * @param {EzsigntemplateGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateGetAutocompleteV2(sSelector: EzsigntemplateGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsigntemplateGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
     * @summary Retrieve Ezsigntemplate list
     * @param {EzsigntemplateGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateGetListV1(eOrderBy?: EzsigntemplateGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplate
     * @param {number} pkiEzsigntemplateID 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateGetObjectV1(pkiEzsigntemplateID: number, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateGetObjectV1(pkiEzsigntemplateID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplate
     * @param {number} pkiEzsigntemplateID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplateApi
     */
    public ezsigntemplateGetObjectV2(pkiEzsigntemplateID: number, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplateApiFp(this.configuration).ezsigntemplateGetObjectV2(pkiEzsigntemplateID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const EzsigntemplateGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type EzsigntemplateGetAutocompleteV2SSelectorEnum = typeof EzsigntemplateGetAutocompleteV2SSelectorEnum[keyof typeof EzsigntemplateGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const EzsigntemplateGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type EzsigntemplateGetAutocompleteV2EFilterActiveEnum = typeof EzsigntemplateGetAutocompleteV2EFilterActiveEnum[keyof typeof EzsigntemplateGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const EzsigntemplateGetListV1EOrderByEnum = {
    pkiEzsigntemplateID_ASC: 'pkiEzsigntemplateID_ASC',
    pkiEzsigntemplateID_DESC: 'pkiEzsigntemplateID_DESC',
    fkiTeamID_ASC: 'fkiTeamID_ASC',
    fkiTeamID_DESC: 'fkiTeamID_DESC',
    fkiEzsignfoldertypeID_ASC: 'fkiEzsignfoldertypeID_ASC',
    fkiEzsignfoldertypeID_DESC: 'fkiEzsignfoldertypeID_DESC',
    fkiUserIDOwner_ASC: 'fkiUserIDOwner_ASC',
    fkiUserIDOwner_DESC: 'fkiUserIDOwner_DESC',
    fkiLanguageID_ASC: 'fkiLanguageID_ASC',
    fkiLanguageID_DESC: 'fkiLanguageID_DESC',
    eEzsigntemplateType_ASC: 'eEzsigntemplateType_ASC',
    eEzsigntemplateType_DESC: 'eEzsigntemplateType_DESC',
    sEzsigntemplateDescription_ASC: 'sEzsigntemplateDescription_ASC',
    sEzsigntemplateDescription_DESC: 'sEzsigntemplateDescription_DESC',
    sEzsigntemplatedocumentDescription_ASC: 'sEzsigntemplatedocumentDescription_ASC',
    sEzsigntemplatedocumentDescription_DESC: 'sEzsigntemplatedocumentDescription_DESC',
    iEzsigntemplatedocumentPagetotal_ASC: 'iEzsigntemplatedocumentPagetotal_ASC',
    iEzsigntemplatedocumentPagetotal_DESC: 'iEzsigntemplatedocumentPagetotal_DESC',
    iEzsigntemplateSignaturetotal_ASC: 'iEzsigntemplateSignaturetotal_ASC',
    iEzsigntemplateSignaturetotal_DESC: 'iEzsigntemplateSignaturetotal_DESC',
    sEzsignfoldertypeNameX_ASC: 'sEzsignfoldertypeNameX_ASC',
    sEzsignfoldertypeNameX_DESC: 'sEzsignfoldertypeNameX_DESC',
    eEzsigntemplateType_ASC2: 'eEzsigntemplateType_ASC',
    eEzsigntemplateType_DESC2: 'eEzsigntemplateType_DESC'
} as const;
export type EzsigntemplateGetListV1EOrderByEnum = typeof EzsigntemplateGetListV1EOrderByEnum[keyof typeof EzsigntemplateGetListV1EOrderByEnum];
