/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponse } from '../model';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import type { VariableexpenseCreateObjectV1Request } from '../model';
// @ts-ignore
import type { VariableexpenseCreateObjectV1Response } from '../model';
// @ts-ignore
import type { VariableexpenseEditObjectV1Request } from '../model';
// @ts-ignore
import type { VariableexpenseGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { VariableexpenseGetListV1Response } from '../model';
// @ts-ignore
import type { VariableexpenseGetObjectV2Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectVariableexpenseApi - axios parameter creator
 * @export
 */
export const ObjectVariableexpenseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Variableexpense
         * @param {VariableexpenseCreateObjectV1Request} variableexpenseCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseCreateObjectV1: async (variableexpenseCreateObjectV1Request: VariableexpenseCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableexpenseCreateObjectV1Request' is not null or undefined
            assertParamExists('variableexpenseCreateObjectV1', 'variableexpenseCreateObjectV1Request', variableexpenseCreateObjectV1Request)
            const localVarPath = `/1/object/variableexpense`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(variableexpenseCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Variableexpense
         * @param {number} pkiVariableexpenseID 
         * @param {VariableexpenseEditObjectV1Request} variableexpenseEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseEditObjectV1: async (pkiVariableexpenseID: number, variableexpenseEditObjectV1Request: VariableexpenseEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiVariableexpenseID' is not null or undefined
            assertParamExists('variableexpenseEditObjectV1', 'pkiVariableexpenseID', pkiVariableexpenseID)
            // verify required parameter 'variableexpenseEditObjectV1Request' is not null or undefined
            assertParamExists('variableexpenseEditObjectV1', 'variableexpenseEditObjectV1Request', variableexpenseEditObjectV1Request)
            const localVarPath = `/1/object/variableexpense/{pkiVariableexpenseID}`
                .replace(`{${"pkiVariableexpenseID"}}`, encodeURIComponent(String(pkiVariableexpenseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(variableexpenseEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
         * @summary Retrieve Variableexpenses and IDs
         * @param {VariableexpenseGetAutocompleteV2SSelectorEnum} sSelector The type of Variableexpenses to return
         * @param {VariableexpenseGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseGetAutocompleteV2: async (sSelector: VariableexpenseGetAutocompleteV2SSelectorEnum, eFilterActive?: VariableexpenseGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('variableexpenseGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/variableexpense/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes<br>No<br>Included |
         * @summary Retrieve Variableexpense list
         * @param {VariableexpenseGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseGetListV1: async (eOrderBy?: VariableexpenseGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/variableexpense/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Variableexpense
         * @param {number} pkiVariableexpenseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseGetObjectV2: async (pkiVariableexpenseID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiVariableexpenseID' is not null or undefined
            assertParamExists('variableexpenseGetObjectV2', 'pkiVariableexpenseID', pkiVariableexpenseID)
            const localVarPath = `/2/object/variableexpense/{pkiVariableexpenseID}`
                .replace(`{${"pkiVariableexpenseID"}}`, encodeURIComponent(String(pkiVariableexpenseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectVariableexpenseApi - functional programming interface
 * @export
 */
export const ObjectVariableexpenseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectVariableexpenseApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Variableexpense
         * @param {VariableexpenseCreateObjectV1Request} variableexpenseCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async variableexpenseCreateObjectV1(variableexpenseCreateObjectV1Request: VariableexpenseCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableexpenseCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.variableexpenseCreateObjectV1(variableexpenseCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectVariableexpenseApi.variableexpenseCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Variableexpense
         * @param {number} pkiVariableexpenseID 
         * @param {VariableexpenseEditObjectV1Request} variableexpenseEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async variableexpenseEditObjectV1(pkiVariableexpenseID: number, variableexpenseEditObjectV1Request: VariableexpenseEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.variableexpenseEditObjectV1(pkiVariableexpenseID, variableexpenseEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectVariableexpenseApi.variableexpenseEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
         * @summary Retrieve Variableexpenses and IDs
         * @param {VariableexpenseGetAutocompleteV2SSelectorEnum} sSelector The type of Variableexpenses to return
         * @param {VariableexpenseGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async variableexpenseGetAutocompleteV2(sSelector: VariableexpenseGetAutocompleteV2SSelectorEnum, eFilterActive?: VariableexpenseGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableexpenseGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.variableexpenseGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectVariableexpenseApi.variableexpenseGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes<br>No<br>Included |
         * @summary Retrieve Variableexpense list
         * @param {VariableexpenseGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async variableexpenseGetListV1(eOrderBy?: VariableexpenseGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableexpenseGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.variableexpenseGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectVariableexpenseApi.variableexpenseGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Variableexpense
         * @param {number} pkiVariableexpenseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async variableexpenseGetObjectV2(pkiVariableexpenseID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableexpenseGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.variableexpenseGetObjectV2(pkiVariableexpenseID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectVariableexpenseApi.variableexpenseGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectVariableexpenseApi - factory interface
 * @export
 */
export const ObjectVariableexpenseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectVariableexpenseApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Variableexpense
         * @param {VariableexpenseCreateObjectV1Request} variableexpenseCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseCreateObjectV1(variableexpenseCreateObjectV1Request: VariableexpenseCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<VariableexpenseCreateObjectV1Response> {
            return localVarFp.variableexpenseCreateObjectV1(variableexpenseCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Variableexpense
         * @param {number} pkiVariableexpenseID 
         * @param {VariableexpenseEditObjectV1Request} variableexpenseEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseEditObjectV1(pkiVariableexpenseID: number, variableexpenseEditObjectV1Request: VariableexpenseEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.variableexpenseEditObjectV1(pkiVariableexpenseID, variableexpenseEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
         * @summary Retrieve Variableexpenses and IDs
         * @param {VariableexpenseGetAutocompleteV2SSelectorEnum} sSelector The type of Variableexpenses to return
         * @param {VariableexpenseGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseGetAutocompleteV2(sSelector: VariableexpenseGetAutocompleteV2SSelectorEnum, eFilterActive?: VariableexpenseGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<VariableexpenseGetAutocompleteV2Response> {
            return localVarFp.variableexpenseGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes<br>No<br>Included |
         * @summary Retrieve Variableexpense list
         * @param {VariableexpenseGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseGetListV1(eOrderBy?: VariableexpenseGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<VariableexpenseGetListV1Response> {
            return localVarFp.variableexpenseGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Variableexpense
         * @param {number} pkiVariableexpenseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        variableexpenseGetObjectV2(pkiVariableexpenseID: number, options?: RawAxiosRequestConfig): AxiosPromise<VariableexpenseGetObjectV2Response> {
            return localVarFp.variableexpenseGetObjectV2(pkiVariableexpenseID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectVariableexpenseApi - object-oriented interface
 * @export
 * @class ObjectVariableexpenseApi
 * @extends {BaseAPI}
 */
export class ObjectVariableexpenseApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Variableexpense
     * @param {VariableexpenseCreateObjectV1Request} variableexpenseCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectVariableexpenseApi
     */
    public variableexpenseCreateObjectV1(variableexpenseCreateObjectV1Request: VariableexpenseCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectVariableexpenseApiFp(this.configuration).variableexpenseCreateObjectV1(variableexpenseCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Variableexpense
     * @param {number} pkiVariableexpenseID 
     * @param {VariableexpenseEditObjectV1Request} variableexpenseEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectVariableexpenseApi
     */
    public variableexpenseEditObjectV1(pkiVariableexpenseID: number, variableexpenseEditObjectV1Request: VariableexpenseEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectVariableexpenseApiFp(this.configuration).variableexpenseEditObjectV1(pkiVariableexpenseID, variableexpenseEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
     * @summary Retrieve Variableexpenses and IDs
     * @param {VariableexpenseGetAutocompleteV2SSelectorEnum} sSelector The type of Variableexpenses to return
     * @param {VariableexpenseGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectVariableexpenseApi
     */
    public variableexpenseGetAutocompleteV2(sSelector: VariableexpenseGetAutocompleteV2SSelectorEnum, eFilterActive?: VariableexpenseGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectVariableexpenseApiFp(this.configuration).variableexpenseGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes<br>No<br>Included |
     * @summary Retrieve Variableexpense list
     * @param {VariableexpenseGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectVariableexpenseApi
     */
    public variableexpenseGetListV1(eOrderBy?: VariableexpenseGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectVariableexpenseApiFp(this.configuration).variableexpenseGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Variableexpense
     * @param {number} pkiVariableexpenseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectVariableexpenseApi
     */
    public variableexpenseGetObjectV2(pkiVariableexpenseID: number, options?: RawAxiosRequestConfig) {
        return ObjectVariableexpenseApiFp(this.configuration).variableexpenseGetObjectV2(pkiVariableexpenseID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const VariableexpenseGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type VariableexpenseGetAutocompleteV2SSelectorEnum = typeof VariableexpenseGetAutocompleteV2SSelectorEnum[keyof typeof VariableexpenseGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const VariableexpenseGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type VariableexpenseGetAutocompleteV2EFilterActiveEnum = typeof VariableexpenseGetAutocompleteV2EFilterActiveEnum[keyof typeof VariableexpenseGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const VariableexpenseGetListV1EOrderByEnum = {
    pkiVariableexpenseID_ASC: 'pkiVariableexpenseID_ASC',
    pkiVariableexpenseID_DESC: 'pkiVariableexpenseID_DESC',
    sVariableexpenseCode_ASC: 'sVariableexpenseCode_ASC',
    sVariableexpenseCode_DESC: 'sVariableexpenseCode_DESC',
    sVariableexpenseDescriptionX_ASC: 'sVariableexpenseDescriptionX_ASC',
    sVariableexpenseDescriptionX_DESC: 'sVariableexpenseDescriptionX_DESC',
    eVariableexpenseTaxable_ASC: 'eVariableexpenseTaxable_ASC',
    eVariableexpenseTaxable_DESC: 'eVariableexpenseTaxable_DESC',
    bVariableexpenseIsactive_ASC: 'bVariableexpenseIsactive_ASC',
    bVariableexpenseIsactive_DESC: 'bVariableexpenseIsactive_DESC'
} as const;
export type VariableexpenseGetListV1EOrderByEnum = typeof VariableexpenseGetListV1EOrderByEnum[keyof typeof VariableexpenseGetListV1EOrderByEnum];
