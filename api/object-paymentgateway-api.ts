/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import type { PaymentgatewayCreateObjectV1Request } from '../model';
// @ts-ignore
import type { PaymentgatewayCreateObjectV1Response } from '../model';
// @ts-ignore
import type { PaymentgatewayEditObjectV1Request } from '../model';
// @ts-ignore
import type { PaymentgatewayEditObjectV1Response } from '../model';
// @ts-ignore
import type { PaymentgatewayGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { PaymentgatewayGetListV1Response } from '../model';
// @ts-ignore
import type { PaymentgatewayGetObjectV2Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectPaymentgatewayApi - axios parameter creator
 * @export
 */
export const ObjectPaymentgatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Paymentgateway
         * @param {PaymentgatewayCreateObjectV1Request} paymentgatewayCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayCreateObjectV1: async (paymentgatewayCreateObjectV1Request: PaymentgatewayCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentgatewayCreateObjectV1Request' is not null or undefined
            assertParamExists('paymentgatewayCreateObjectV1', 'paymentgatewayCreateObjectV1Request', paymentgatewayCreateObjectV1Request)
            const localVarPath = `/1/object/paymentgateway`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentgatewayCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Paymentgateway
         * @param {number} pkiPaymentgatewayID The unique ID of the Paymentgateway
         * @param {PaymentgatewayEditObjectV1Request} paymentgatewayEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayEditObjectV1: async (pkiPaymentgatewayID: number, paymentgatewayEditObjectV1Request: PaymentgatewayEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiPaymentgatewayID' is not null or undefined
            assertParamExists('paymentgatewayEditObjectV1', 'pkiPaymentgatewayID', pkiPaymentgatewayID)
            // verify required parameter 'paymentgatewayEditObjectV1Request' is not null or undefined
            assertParamExists('paymentgatewayEditObjectV1', 'paymentgatewayEditObjectV1Request', paymentgatewayEditObjectV1Request)
            const localVarPath = `/1/object/paymentgateway/{pkiPaymentgatewayID}`
                .replace(`{${"pkiPaymentgatewayID"}}`, encodeURIComponent(String(pkiPaymentgatewayID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentgatewayEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Paymentgateway to be used in a dropdown or autocomplete control.
         * @summary Retrieve Paymentgateways and IDs
         * @param {PaymentgatewayGetAutocompleteV2SSelectorEnum} sSelector The type of Paymentgateways to return
         * @param {PaymentgatewayGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayGetAutocompleteV2: async (sSelector: PaymentgatewayGetAutocompleteV2SSelectorEnum, eFilterActive?: PaymentgatewayGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('paymentgatewayGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/paymentgateway/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | ePaymentgatewayProcessor | Moneris |
         * @summary Retrieve Paymentgateway list
         * @param {PaymentgatewayGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayGetListV1: async (eOrderBy?: PaymentgatewayGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/paymentgateway/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Paymentgateway
         * @param {number} pkiPaymentgatewayID The unique ID of the Paymentgateway
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayGetObjectV2: async (pkiPaymentgatewayID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiPaymentgatewayID' is not null or undefined
            assertParamExists('paymentgatewayGetObjectV2', 'pkiPaymentgatewayID', pkiPaymentgatewayID)
            const localVarPath = `/2/object/paymentgateway/{pkiPaymentgatewayID}`
                .replace(`{${"pkiPaymentgatewayID"}}`, encodeURIComponent(String(pkiPaymentgatewayID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectPaymentgatewayApi - functional programming interface
 * @export
 */
export const ObjectPaymentgatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectPaymentgatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Paymentgateway
         * @param {PaymentgatewayCreateObjectV1Request} paymentgatewayCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentgatewayCreateObjectV1(paymentgatewayCreateObjectV1Request: PaymentgatewayCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentgatewayCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentgatewayCreateObjectV1(paymentgatewayCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymentgatewayApi.paymentgatewayCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Paymentgateway
         * @param {number} pkiPaymentgatewayID The unique ID of the Paymentgateway
         * @param {PaymentgatewayEditObjectV1Request} paymentgatewayEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentgatewayEditObjectV1(pkiPaymentgatewayID: number, paymentgatewayEditObjectV1Request: PaymentgatewayEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentgatewayEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentgatewayEditObjectV1(pkiPaymentgatewayID, paymentgatewayEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymentgatewayApi.paymentgatewayEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Paymentgateway to be used in a dropdown or autocomplete control.
         * @summary Retrieve Paymentgateways and IDs
         * @param {PaymentgatewayGetAutocompleteV2SSelectorEnum} sSelector The type of Paymentgateways to return
         * @param {PaymentgatewayGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentgatewayGetAutocompleteV2(sSelector: PaymentgatewayGetAutocompleteV2SSelectorEnum, eFilterActive?: PaymentgatewayGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentgatewayGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentgatewayGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymentgatewayApi.paymentgatewayGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | ePaymentgatewayProcessor | Moneris |
         * @summary Retrieve Paymentgateway list
         * @param {PaymentgatewayGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentgatewayGetListV1(eOrderBy?: PaymentgatewayGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentgatewayGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentgatewayGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymentgatewayApi.paymentgatewayGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Paymentgateway
         * @param {number} pkiPaymentgatewayID The unique ID of the Paymentgateway
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentgatewayGetObjectV2(pkiPaymentgatewayID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentgatewayGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentgatewayGetObjectV2(pkiPaymentgatewayID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymentgatewayApi.paymentgatewayGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectPaymentgatewayApi - factory interface
 * @export
 */
export const ObjectPaymentgatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectPaymentgatewayApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Paymentgateway
         * @param {PaymentgatewayCreateObjectV1Request} paymentgatewayCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayCreateObjectV1(paymentgatewayCreateObjectV1Request: PaymentgatewayCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaymentgatewayCreateObjectV1Response> {
            return localVarFp.paymentgatewayCreateObjectV1(paymentgatewayCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Paymentgateway
         * @param {number} pkiPaymentgatewayID The unique ID of the Paymentgateway
         * @param {PaymentgatewayEditObjectV1Request} paymentgatewayEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayEditObjectV1(pkiPaymentgatewayID: number, paymentgatewayEditObjectV1Request: PaymentgatewayEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaymentgatewayEditObjectV1Response> {
            return localVarFp.paymentgatewayEditObjectV1(pkiPaymentgatewayID, paymentgatewayEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Paymentgateway to be used in a dropdown or autocomplete control.
         * @summary Retrieve Paymentgateways and IDs
         * @param {PaymentgatewayGetAutocompleteV2SSelectorEnum} sSelector The type of Paymentgateways to return
         * @param {PaymentgatewayGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayGetAutocompleteV2(sSelector: PaymentgatewayGetAutocompleteV2SSelectorEnum, eFilterActive?: PaymentgatewayGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<PaymentgatewayGetAutocompleteV2Response> {
            return localVarFp.paymentgatewayGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | ePaymentgatewayProcessor | Moneris |
         * @summary Retrieve Paymentgateway list
         * @param {PaymentgatewayGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayGetListV1(eOrderBy?: PaymentgatewayGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaymentgatewayGetListV1Response> {
            return localVarFp.paymentgatewayGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Paymentgateway
         * @param {number} pkiPaymentgatewayID The unique ID of the Paymentgateway
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentgatewayGetObjectV2(pkiPaymentgatewayID: number, options?: RawAxiosRequestConfig): AxiosPromise<PaymentgatewayGetObjectV2Response> {
            return localVarFp.paymentgatewayGetObjectV2(pkiPaymentgatewayID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectPaymentgatewayApi - object-oriented interface
 * @export
 * @class ObjectPaymentgatewayApi
 * @extends {BaseAPI}
 */
export class ObjectPaymentgatewayApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Paymentgateway
     * @param {PaymentgatewayCreateObjectV1Request} paymentgatewayCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymentgatewayApi
     */
    public paymentgatewayCreateObjectV1(paymentgatewayCreateObjectV1Request: PaymentgatewayCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectPaymentgatewayApiFp(this.configuration).paymentgatewayCreateObjectV1(paymentgatewayCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Paymentgateway
     * @param {number} pkiPaymentgatewayID The unique ID of the Paymentgateway
     * @param {PaymentgatewayEditObjectV1Request} paymentgatewayEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymentgatewayApi
     */
    public paymentgatewayEditObjectV1(pkiPaymentgatewayID: number, paymentgatewayEditObjectV1Request: PaymentgatewayEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectPaymentgatewayApiFp(this.configuration).paymentgatewayEditObjectV1(pkiPaymentgatewayID, paymentgatewayEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Paymentgateway to be used in a dropdown or autocomplete control.
     * @summary Retrieve Paymentgateways and IDs
     * @param {PaymentgatewayGetAutocompleteV2SSelectorEnum} sSelector The type of Paymentgateways to return
     * @param {PaymentgatewayGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymentgatewayApi
     */
    public paymentgatewayGetAutocompleteV2(sSelector: PaymentgatewayGetAutocompleteV2SSelectorEnum, eFilterActive?: PaymentgatewayGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectPaymentgatewayApiFp(this.configuration).paymentgatewayGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | ePaymentgatewayProcessor | Moneris |
     * @summary Retrieve Paymentgateway list
     * @param {PaymentgatewayGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymentgatewayApi
     */
    public paymentgatewayGetListV1(eOrderBy?: PaymentgatewayGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectPaymentgatewayApiFp(this.configuration).paymentgatewayGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Paymentgateway
     * @param {number} pkiPaymentgatewayID The unique ID of the Paymentgateway
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymentgatewayApi
     */
    public paymentgatewayGetObjectV2(pkiPaymentgatewayID: number, options?: RawAxiosRequestConfig) {
        return ObjectPaymentgatewayApiFp(this.configuration).paymentgatewayGetObjectV2(pkiPaymentgatewayID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PaymentgatewayGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type PaymentgatewayGetAutocompleteV2SSelectorEnum = typeof PaymentgatewayGetAutocompleteV2SSelectorEnum[keyof typeof PaymentgatewayGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const PaymentgatewayGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type PaymentgatewayGetAutocompleteV2EFilterActiveEnum = typeof PaymentgatewayGetAutocompleteV2EFilterActiveEnum[keyof typeof PaymentgatewayGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const PaymentgatewayGetListV1EOrderByEnum = {
    pkiPaymentgatewayID_ASC: 'pkiPaymentgatewayID_ASC',
    pkiPaymentgatewayID_DESC: 'pkiPaymentgatewayID_DESC',
    fkiCreditcardmerchantID_ASC: 'fkiCreditcardmerchantID_ASC',
    fkiCreditcardmerchantID_DESC: 'fkiCreditcardmerchantID_DESC',
    ePaymentgatewayProcessor_ASC: 'ePaymentgatewayProcessor_ASC',
    ePaymentgatewayProcessor_DESC: 'ePaymentgatewayProcessor_DESC'
} as const;
export type PaymentgatewayGetListV1EOrderByEnum = typeof PaymentgatewayGetListV1EOrderByEnum[keyof typeof PaymentgatewayGetListV1EOrderByEnum];
