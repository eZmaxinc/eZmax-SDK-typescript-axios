/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { CommonResponseErrorTooManyRequests } from '../model';
// @ts-ignore
import { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { WebhookCreateObjectV1Request } from '../model';
// @ts-ignore
import { WebhookCreateObjectV1Response } from '../model';
// @ts-ignore
import { WebhookDeleteObjectV1Response } from '../model';
// @ts-ignore
import { WebhookEditObjectV1Request } from '../model';
// @ts-ignore
import { WebhookEditObjectV1Response } from '../model';
// @ts-ignore
import { WebhookGetHistoryV1Response } from '../model';
// @ts-ignore
import { WebhookGetListV1Response } from '../model';
// @ts-ignore
import { WebhookGetObjectV1Response } from '../model';
// @ts-ignore
import { WebhookGetObjectV2Response } from '../model';
// @ts-ignore
import { WebhookTestV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectWebhookApi - axios parameter creator
 * @export
 */
export const ObjectWebhookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Webhook
         * @param {WebhookCreateObjectV1Request} webhookCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookCreateObjectV1: async (webhookCreateObjectV1Request: WebhookCreateObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookCreateObjectV1Request' is not null or undefined
            assertParamExists('webhookCreateObjectV1', 'webhookCreateObjectV1Request', webhookCreateObjectV1Request)
            const localVarPath = `/1/object/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookDeleteObjectV1: async (pkiWebhookID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiWebhookID' is not null or undefined
            assertParamExists('webhookDeleteObjectV1', 'pkiWebhookID', pkiWebhookID)
            const localVarPath = `/1/object/webhook/{pkiWebhookID}`
                .replace(`{${"pkiWebhookID"}}`, encodeURIComponent(String(pkiWebhookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {WebhookEditObjectV1Request} webhookEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookEditObjectV1: async (pkiWebhookID: number, webhookEditObjectV1Request: WebhookEditObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiWebhookID' is not null or undefined
            assertParamExists('webhookEditObjectV1', 'pkiWebhookID', pkiWebhookID)
            // verify required parameter 'webhookEditObjectV1Request' is not null or undefined
            assertParamExists('webhookEditObjectV1', 'webhookEditObjectV1Request', webhookEditObjectV1Request)
            const localVarPath = `/1/object/webhook/{pkiWebhookID}`
                .replace(`{${"pkiWebhookID"}}`, encodeURIComponent(String(pkiWebhookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the logs for recent Webhook calls
         * @param {number} pkiWebhookID 
         * @param {'LastDay' | 'LastWeek'} eWebhookHistoryinterval The number of days to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGetHistoryV1: async (pkiWebhookID: number, eWebhookHistoryinterval: 'LastDay' | 'LastWeek', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiWebhookID' is not null or undefined
            assertParamExists('webhookGetHistoryV1', 'pkiWebhookID', pkiWebhookID)
            // verify required parameter 'eWebhookHistoryinterval' is not null or undefined
            assertParamExists('webhookGetHistoryV1', 'eWebhookHistoryinterval', eWebhookHistoryinterval)
            const localVarPath = `/1/object/webhook/{pkiWebhookID}/getHistory`
                .replace(`{${"pkiWebhookID"}}`, encodeURIComponent(String(pkiWebhookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eWebhookHistoryinterval !== undefined) {
                localVarQueryParameter['eWebhookHistoryinterval'] = eWebhookHistoryinterval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
         * @summary Retrieve Webhook list
         * @param {'pkiWebhookID_ASC' | 'pkiWebhookID_DESC' | 'sWebhookDescription_ASC' | 'sWebhookDescription_DESC' | 'eWebhookEzsignevent_ASC' | 'eWebhookEzsignevent_DESC' | 'eWebhookManagementevent_ASC' | 'eWebhookManagementevent_DESC' | 'eWebhookModule_ASC' | 'eWebhookModule_DESC' | 'sWebhookEmailfailed_ASC' | 'sWebhookEmailfailed_DESC' | 'sWebhookEvent_ASC' | 'sWebhookEvent_DESC' | 'sWebhookUrl_ASC' | 'sWebhookUrl_DESC' | 'bWebhookIsactive_ASC' | 'bWebhookIsactive_DESC'} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGetListV1: async (eOrderBy?: 'pkiWebhookID_ASC' | 'pkiWebhookID_DESC' | 'sWebhookDescription_ASC' | 'sWebhookDescription_DESC' | 'eWebhookEzsignevent_ASC' | 'eWebhookEzsignevent_DESC' | 'eWebhookManagementevent_ASC' | 'eWebhookManagementevent_DESC' | 'eWebhookModule_ASC' | 'eWebhookModule_DESC' | 'sWebhookEmailfailed_ASC' | 'sWebhookEmailfailed_DESC' | 'sWebhookEvent_ASC' | 'sWebhookEvent_DESC' | 'sWebhookUrl_ASC' | 'sWebhookUrl_DESC' | 'bWebhookIsactive_ASC' | 'bWebhookIsactive_DESC', iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/webhook/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        webhookGetObjectV1: async (pkiWebhookID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiWebhookID' is not null or undefined
            assertParamExists('webhookGetObjectV1', 'pkiWebhookID', pkiWebhookID)
            const localVarPath = `/1/object/webhook/{pkiWebhookID}`
                .replace(`{${"pkiWebhookID"}}`, encodeURIComponent(String(pkiWebhookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGetObjectV2: async (pkiWebhookID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiWebhookID' is not null or undefined
            assertParamExists('webhookGetObjectV2', 'pkiWebhookID', pkiWebhookID)
            const localVarPath = `/2/object/webhook/{pkiWebhookID}`
                .replace(`{${"pkiWebhookID"}}`, encodeURIComponent(String(pkiWebhookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test the Webhook by calling the Url
         * @param {number} pkiWebhookID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookTestV1: async (pkiWebhookID: number, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiWebhookID' is not null or undefined
            assertParamExists('webhookTestV1', 'pkiWebhookID', pkiWebhookID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('webhookTestV1', 'body', body)
            const localVarPath = `/1/object/webhook/{pkiWebhookID}/test`
                .replace(`{${"pkiWebhookID"}}`, encodeURIComponent(String(pkiWebhookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectWebhookApi - functional programming interface
 * @export
 */
export const ObjectWebhookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectWebhookApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Webhook
         * @param {WebhookCreateObjectV1Request} webhookCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookCreateObjectV1(webhookCreateObjectV1Request: WebhookCreateObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookCreateObjectV1(webhookCreateObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookDeleteObjectV1(pkiWebhookID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookDeleteObjectV1(pkiWebhookID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {WebhookEditObjectV1Request} webhookEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookEditObjectV1(pkiWebhookID: number, webhookEditObjectV1Request: WebhookEditObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookEditObjectV1(pkiWebhookID, webhookEditObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve the logs for recent Webhook calls
         * @param {number} pkiWebhookID 
         * @param {'LastDay' | 'LastWeek'} eWebhookHistoryinterval The number of days to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookGetHistoryV1(pkiWebhookID: number, eWebhookHistoryinterval: 'LastDay' | 'LastWeek', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookGetHistoryV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookGetHistoryV1(pkiWebhookID, eWebhookHistoryinterval, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
         * @summary Retrieve Webhook list
         * @param {'pkiWebhookID_ASC' | 'pkiWebhookID_DESC' | 'sWebhookDescription_ASC' | 'sWebhookDescription_DESC' | 'eWebhookEzsignevent_ASC' | 'eWebhookEzsignevent_DESC' | 'eWebhookManagementevent_ASC' | 'eWebhookManagementevent_DESC' | 'eWebhookModule_ASC' | 'eWebhookModule_DESC' | 'sWebhookEmailfailed_ASC' | 'sWebhookEmailfailed_DESC' | 'sWebhookEvent_ASC' | 'sWebhookEvent_DESC' | 'sWebhookUrl_ASC' | 'sWebhookUrl_DESC' | 'bWebhookIsactive_ASC' | 'bWebhookIsactive_DESC'} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookGetListV1(eOrderBy?: 'pkiWebhookID_ASC' | 'pkiWebhookID_DESC' | 'sWebhookDescription_ASC' | 'sWebhookDescription_DESC' | 'eWebhookEzsignevent_ASC' | 'eWebhookEzsignevent_DESC' | 'eWebhookManagementevent_ASC' | 'eWebhookManagementevent_DESC' | 'eWebhookModule_ASC' | 'eWebhookModule_DESC' | 'sWebhookEmailfailed_ASC' | 'sWebhookEmailfailed_DESC' | 'sWebhookEvent_ASC' | 'sWebhookEvent_DESC' | 'sWebhookUrl_ASC' | 'sWebhookUrl_DESC' | 'bWebhookIsactive_ASC' | 'bWebhookIsactive_DESC', iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async webhookGetObjectV1(pkiWebhookID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookGetObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookGetObjectV1(pkiWebhookID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookGetObjectV2(pkiWebhookID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookGetObjectV2(pkiWebhookID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Test the Webhook by calling the Url
         * @param {number} pkiWebhookID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookTestV1(pkiWebhookID: number, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookTestV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookTestV1(pkiWebhookID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectWebhookApi - factory interface
 * @export
 */
export const ObjectWebhookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectWebhookApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Webhook
         * @param {WebhookCreateObjectV1Request} webhookCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookCreateObjectV1(webhookCreateObjectV1Request: WebhookCreateObjectV1Request, options?: any): AxiosPromise<WebhookCreateObjectV1Response> {
            return localVarFp.webhookCreateObjectV1(webhookCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookDeleteObjectV1(pkiWebhookID: number, options?: any): AxiosPromise<WebhookDeleteObjectV1Response> {
            return localVarFp.webhookDeleteObjectV1(pkiWebhookID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {WebhookEditObjectV1Request} webhookEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookEditObjectV1(pkiWebhookID: number, webhookEditObjectV1Request: WebhookEditObjectV1Request, options?: any): AxiosPromise<WebhookEditObjectV1Response> {
            return localVarFp.webhookEditObjectV1(pkiWebhookID, webhookEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the logs for recent Webhook calls
         * @param {number} pkiWebhookID 
         * @param {'LastDay' | 'LastWeek'} eWebhookHistoryinterval The number of days to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGetHistoryV1(pkiWebhookID: number, eWebhookHistoryinterval: 'LastDay' | 'LastWeek', options?: any): AxiosPromise<WebhookGetHistoryV1Response> {
            return localVarFp.webhookGetHistoryV1(pkiWebhookID, eWebhookHistoryinterval, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
         * @summary Retrieve Webhook list
         * @param {'pkiWebhookID_ASC' | 'pkiWebhookID_DESC' | 'sWebhookDescription_ASC' | 'sWebhookDescription_DESC' | 'eWebhookEzsignevent_ASC' | 'eWebhookEzsignevent_DESC' | 'eWebhookManagementevent_ASC' | 'eWebhookManagementevent_DESC' | 'eWebhookModule_ASC' | 'eWebhookModule_DESC' | 'sWebhookEmailfailed_ASC' | 'sWebhookEmailfailed_DESC' | 'sWebhookEvent_ASC' | 'sWebhookEvent_DESC' | 'sWebhookUrl_ASC' | 'sWebhookUrl_DESC' | 'bWebhookIsactive_ASC' | 'bWebhookIsactive_DESC'} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGetListV1(eOrderBy?: 'pkiWebhookID_ASC' | 'pkiWebhookID_DESC' | 'sWebhookDescription_ASC' | 'sWebhookDescription_DESC' | 'eWebhookEzsignevent_ASC' | 'eWebhookEzsignevent_DESC' | 'eWebhookManagementevent_ASC' | 'eWebhookManagementevent_DESC' | 'eWebhookModule_ASC' | 'eWebhookModule_DESC' | 'sWebhookEmailfailed_ASC' | 'sWebhookEmailfailed_DESC' | 'sWebhookEvent_ASC' | 'sWebhookEvent_DESC' | 'sWebhookUrl_ASC' | 'sWebhookUrl_DESC' | 'bWebhookIsactive_ASC' | 'bWebhookIsactive_DESC', iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: any): AxiosPromise<WebhookGetListV1Response> {
            return localVarFp.webhookGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        webhookGetObjectV1(pkiWebhookID: number, options?: any): AxiosPromise<WebhookGetObjectV1Response> {
            return localVarFp.webhookGetObjectV1(pkiWebhookID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Webhook
         * @param {number} pkiWebhookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGetObjectV2(pkiWebhookID: number, options?: any): AxiosPromise<WebhookGetObjectV2Response> {
            return localVarFp.webhookGetObjectV2(pkiWebhookID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test the Webhook by calling the Url
         * @param {number} pkiWebhookID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookTestV1(pkiWebhookID: number, body: object, options?: any): AxiosPromise<WebhookTestV1Response> {
            return localVarFp.webhookTestV1(pkiWebhookID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectWebhookApi - object-oriented interface
 * @export
 * @class ObjectWebhookApi
 * @extends {BaseAPI}
 */
export class ObjectWebhookApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Webhook
     * @param {WebhookCreateObjectV1Request} webhookCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectWebhookApi
     */
    public webhookCreateObjectV1(webhookCreateObjectV1Request: WebhookCreateObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectWebhookApiFp(this.configuration).webhookCreateObjectV1(webhookCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Webhook
     * @param {number} pkiWebhookID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectWebhookApi
     */
    public webhookDeleteObjectV1(pkiWebhookID: number, options?: AxiosRequestConfig) {
        return ObjectWebhookApiFp(this.configuration).webhookDeleteObjectV1(pkiWebhookID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Webhook
     * @param {number} pkiWebhookID 
     * @param {WebhookEditObjectV1Request} webhookEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectWebhookApi
     */
    public webhookEditObjectV1(pkiWebhookID: number, webhookEditObjectV1Request: WebhookEditObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectWebhookApiFp(this.configuration).webhookEditObjectV1(pkiWebhookID, webhookEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the logs for recent Webhook calls
     * @param {number} pkiWebhookID 
     * @param {'LastDay' | 'LastWeek'} eWebhookHistoryinterval The number of days to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectWebhookApi
     */
    public webhookGetHistoryV1(pkiWebhookID: number, eWebhookHistoryinterval: 'LastDay' | 'LastWeek', options?: AxiosRequestConfig) {
        return ObjectWebhookApiFp(this.configuration).webhookGetHistoryV1(pkiWebhookID, eWebhookHistoryinterval, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
     * @summary Retrieve Webhook list
     * @param {'pkiWebhookID_ASC' | 'pkiWebhookID_DESC' | 'sWebhookDescription_ASC' | 'sWebhookDescription_DESC' | 'eWebhookEzsignevent_ASC' | 'eWebhookEzsignevent_DESC' | 'eWebhookManagementevent_ASC' | 'eWebhookManagementevent_DESC' | 'eWebhookModule_ASC' | 'eWebhookModule_DESC' | 'sWebhookEmailfailed_ASC' | 'sWebhookEmailfailed_DESC' | 'sWebhookEvent_ASC' | 'sWebhookEvent_DESC' | 'sWebhookUrl_ASC' | 'sWebhookUrl_DESC' | 'bWebhookIsactive_ASC' | 'bWebhookIsactive_DESC'} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectWebhookApi
     */
    public webhookGetListV1(eOrderBy?: 'pkiWebhookID_ASC' | 'pkiWebhookID_DESC' | 'sWebhookDescription_ASC' | 'sWebhookDescription_DESC' | 'eWebhookEzsignevent_ASC' | 'eWebhookEzsignevent_DESC' | 'eWebhookManagementevent_ASC' | 'eWebhookManagementevent_DESC' | 'eWebhookModule_ASC' | 'eWebhookModule_DESC' | 'sWebhookEmailfailed_ASC' | 'sWebhookEmailfailed_DESC' | 'sWebhookEvent_ASC' | 'sWebhookEvent_DESC' | 'sWebhookUrl_ASC' | 'sWebhookUrl_DESC' | 'bWebhookIsactive_ASC' | 'bWebhookIsactive_DESC', iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: AxiosRequestConfig) {
        return ObjectWebhookApiFp(this.configuration).webhookGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Webhook
     * @param {number} pkiWebhookID 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectWebhookApi
     */
    public webhookGetObjectV1(pkiWebhookID: number, options?: AxiosRequestConfig) {
        return ObjectWebhookApiFp(this.configuration).webhookGetObjectV1(pkiWebhookID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Webhook
     * @param {number} pkiWebhookID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectWebhookApi
     */
    public webhookGetObjectV2(pkiWebhookID: number, options?: AxiosRequestConfig) {
        return ObjectWebhookApiFp(this.configuration).webhookGetObjectV2(pkiWebhookID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test the Webhook by calling the Url
     * @param {number} pkiWebhookID 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectWebhookApi
     */
    public webhookTestV1(pkiWebhookID: number, body: object, options?: AxiosRequestConfig) {
        return ObjectWebhookApiFp(this.configuration).webhookTestV1(pkiWebhookID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
