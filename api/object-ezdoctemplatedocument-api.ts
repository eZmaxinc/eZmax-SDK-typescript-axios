/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentCreateObjectV1Request } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentCreateObjectV1Response } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentEditObjectV1Request } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentEditObjectV1Response } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentGetListV1Response } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentGetObjectV2Response } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentPatchObjectV1Request } from '../model';
// @ts-ignore
import type { EzdoctemplatedocumentPatchObjectV1Response } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzdoctemplatedocumentApi - axios parameter creator
 * @export
 */
export const ObjectEzdoctemplatedocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentCreateObjectV1Request} ezdoctemplatedocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentCreateObjectV1: async (ezdoctemplatedocumentCreateObjectV1Request: EzdoctemplatedocumentCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezdoctemplatedocumentCreateObjectV1Request' is not null or undefined
            assertParamExists('ezdoctemplatedocumentCreateObjectV1', 'ezdoctemplatedocumentCreateObjectV1Request', ezdoctemplatedocumentCreateObjectV1Request)
            const localVarPath = `/1/object/ezdoctemplatedocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezdoctemplatedocumentCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
         * @summary Retrieve the content
         * @param {number} pkiEzdoctemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentDownloadV1: async (pkiEzdoctemplatedocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzdoctemplatedocumentID' is not null or undefined
            assertParamExists('ezdoctemplatedocumentDownloadV1', 'pkiEzdoctemplatedocumentID', pkiEzdoctemplatedocumentID)
            const localVarPath = `/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}/download`
                .replace(`{${"pkiEzdoctemplatedocumentID"}}`, encodeURIComponent(String(pkiEzdoctemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Presigned required
            // await setApiKeyToObject(localVarQueryParameter, "sAuthorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentEditObjectV1Request} ezdoctemplatedocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentEditObjectV1: async (pkiEzdoctemplatedocumentID: number, ezdoctemplatedocumentEditObjectV1Request: EzdoctemplatedocumentEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzdoctemplatedocumentID' is not null or undefined
            assertParamExists('ezdoctemplatedocumentEditObjectV1', 'pkiEzdoctemplatedocumentID', pkiEzdoctemplatedocumentID)
            // verify required parameter 'ezdoctemplatedocumentEditObjectV1Request' is not null or undefined
            assertParamExists('ezdoctemplatedocumentEditObjectV1', 'ezdoctemplatedocumentEditObjectV1Request', ezdoctemplatedocumentEditObjectV1Request)
            const localVarPath = `/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}`
                .replace(`{${"pkiEzdoctemplatedocumentID"}}`, encodeURIComponent(String(pkiEzdoctemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezdoctemplatedocumentEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezdoctemplatedocuments and IDs
         * @param {EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum} sSelector The type of Ezdoctemplatedocuments to return
         * @param {EzdoctemplatedocumentGetAutocompleteV2ETypeEnum} eType The type of Ezdoctemplatedocument
         * @param {string} [fkiEzsignfoldertypeID] Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype
         * @param {EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentGetAutocompleteV2: async (sSelector: EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum, eType: EzdoctemplatedocumentGetAutocompleteV2ETypeEnum, fkiEzsignfoldertypeID?: string, eFilterActive?: EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('ezdoctemplatedocumentGetAutocompleteV2', 'sSelector', sSelector)
            // verify required parameter 'eType' is not null or undefined
            assertParamExists('ezdoctemplatedocumentGetAutocompleteV2', 'eType', eType)
            const localVarPath = `/2/object/ezdoctemplatedocument/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (fkiEzsignfoldertypeID !== undefined) {
                localVarQueryParameter['fkiEzsignfoldertypeID'] = fkiEzsignfoldertypeID;
            }

            if (eType !== undefined) {
                localVarQueryParameter['eType'] = eType;
            }

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Ezdoctemplatedocument list
         * @param {EzdoctemplatedocumentGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentGetListV1: async (eOrderBy?: EzdoctemplatedocumentGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/ezdoctemplatedocument/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentGetObjectV2: async (pkiEzdoctemplatedocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzdoctemplatedocumentID' is not null or undefined
            assertParamExists('ezdoctemplatedocumentGetObjectV2', 'pkiEzdoctemplatedocumentID', pkiEzdoctemplatedocumentID)
            const localVarPath = `/2/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}`
                .replace(`{${"pkiEzdoctemplatedocumentID"}}`, encodeURIComponent(String(pkiEzdoctemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentPatchObjectV1Request} ezdoctemplatedocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentPatchObjectV1: async (pkiEzdoctemplatedocumentID: number, ezdoctemplatedocumentPatchObjectV1Request: EzdoctemplatedocumentPatchObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzdoctemplatedocumentID' is not null or undefined
            assertParamExists('ezdoctemplatedocumentPatchObjectV1', 'pkiEzdoctemplatedocumentID', pkiEzdoctemplatedocumentID)
            // verify required parameter 'ezdoctemplatedocumentPatchObjectV1Request' is not null or undefined
            assertParamExists('ezdoctemplatedocumentPatchObjectV1', 'ezdoctemplatedocumentPatchObjectV1Request', ezdoctemplatedocumentPatchObjectV1Request)
            const localVarPath = `/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}`
                .replace(`{${"pkiEzdoctemplatedocumentID"}}`, encodeURIComponent(String(pkiEzdoctemplatedocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezdoctemplatedocumentPatchObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PATCH' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzdoctemplatedocumentApi - functional programming interface
 * @export
 */
export const ObjectEzdoctemplatedocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzdoctemplatedocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentCreateObjectV1Request} ezdoctemplatedocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezdoctemplatedocumentCreateObjectV1(ezdoctemplatedocumentCreateObjectV1Request: EzdoctemplatedocumentCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzdoctemplatedocumentCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezdoctemplatedocumentCreateObjectV1(ezdoctemplatedocumentCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzdoctemplatedocumentApi.ezdoctemplatedocumentCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
         * @summary Retrieve the content
         * @param {number} pkiEzdoctemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezdoctemplatedocumentDownloadV1(pkiEzdoctemplatedocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezdoctemplatedocumentDownloadV1(pkiEzdoctemplatedocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzdoctemplatedocumentApi.ezdoctemplatedocumentDownloadV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentEditObjectV1Request} ezdoctemplatedocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezdoctemplatedocumentEditObjectV1(pkiEzdoctemplatedocumentID: number, ezdoctemplatedocumentEditObjectV1Request: EzdoctemplatedocumentEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzdoctemplatedocumentEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezdoctemplatedocumentEditObjectV1(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzdoctemplatedocumentApi.ezdoctemplatedocumentEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezdoctemplatedocuments and IDs
         * @param {EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum} sSelector The type of Ezdoctemplatedocuments to return
         * @param {EzdoctemplatedocumentGetAutocompleteV2ETypeEnum} eType The type of Ezdoctemplatedocument
         * @param {string} [fkiEzsignfoldertypeID] Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype
         * @param {EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezdoctemplatedocumentGetAutocompleteV2(sSelector: EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum, eType: EzdoctemplatedocumentGetAutocompleteV2ETypeEnum, fkiEzsignfoldertypeID?: string, eFilterActive?: EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzdoctemplatedocumentGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezdoctemplatedocumentGetAutocompleteV2(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzdoctemplatedocumentApi.ezdoctemplatedocumentGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Ezdoctemplatedocument list
         * @param {EzdoctemplatedocumentGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezdoctemplatedocumentGetListV1(eOrderBy?: EzdoctemplatedocumentGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzdoctemplatedocumentGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezdoctemplatedocumentGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzdoctemplatedocumentApi.ezdoctemplatedocumentGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezdoctemplatedocumentGetObjectV2(pkiEzdoctemplatedocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzdoctemplatedocumentGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezdoctemplatedocumentGetObjectV2(pkiEzdoctemplatedocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzdoctemplatedocumentApi.ezdoctemplatedocumentGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentPatchObjectV1Request} ezdoctemplatedocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezdoctemplatedocumentPatchObjectV1(pkiEzdoctemplatedocumentID: number, ezdoctemplatedocumentPatchObjectV1Request: EzdoctemplatedocumentPatchObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzdoctemplatedocumentPatchObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezdoctemplatedocumentPatchObjectV1(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzdoctemplatedocumentApi.ezdoctemplatedocumentPatchObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectEzdoctemplatedocumentApi - factory interface
 * @export
 */
export const ObjectEzdoctemplatedocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzdoctemplatedocumentApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentCreateObjectV1Request} ezdoctemplatedocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentCreateObjectV1(ezdoctemplatedocumentCreateObjectV1Request: EzdoctemplatedocumentCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzdoctemplatedocumentCreateObjectV1Response> {
            return localVarFp.ezdoctemplatedocumentCreateObjectV1(ezdoctemplatedocumentCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
         * @summary Retrieve the content
         * @param {number} pkiEzdoctemplatedocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentDownloadV1(pkiEzdoctemplatedocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ezdoctemplatedocumentDownloadV1(pkiEzdoctemplatedocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentEditObjectV1Request} ezdoctemplatedocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentEditObjectV1(pkiEzdoctemplatedocumentID: number, ezdoctemplatedocumentEditObjectV1Request: EzdoctemplatedocumentEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzdoctemplatedocumentEditObjectV1Response> {
            return localVarFp.ezdoctemplatedocumentEditObjectV1(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezdoctemplatedocuments and IDs
         * @param {EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum} sSelector The type of Ezdoctemplatedocuments to return
         * @param {EzdoctemplatedocumentGetAutocompleteV2ETypeEnum} eType The type of Ezdoctemplatedocument
         * @param {string} [fkiEzsignfoldertypeID] Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype
         * @param {EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentGetAutocompleteV2(sSelector: EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum, eType: EzdoctemplatedocumentGetAutocompleteV2ETypeEnum, fkiEzsignfoldertypeID?: string, eFilterActive?: EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<EzdoctemplatedocumentGetAutocompleteV2Response> {
            return localVarFp.ezdoctemplatedocumentGetAutocompleteV2(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Ezdoctemplatedocument list
         * @param {EzdoctemplatedocumentGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentGetListV1(eOrderBy?: EzdoctemplatedocumentGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<EzdoctemplatedocumentGetListV1Response> {
            return localVarFp.ezdoctemplatedocumentGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentGetObjectV2(pkiEzdoctemplatedocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzdoctemplatedocumentGetObjectV2Response> {
            return localVarFp.ezdoctemplatedocumentGetObjectV2(pkiEzdoctemplatedocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch an existing Ezdoctemplatedocument
         * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
         * @param {EzdoctemplatedocumentPatchObjectV1Request} ezdoctemplatedocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezdoctemplatedocumentPatchObjectV1(pkiEzdoctemplatedocumentID: number, ezdoctemplatedocumentPatchObjectV1Request: EzdoctemplatedocumentPatchObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzdoctemplatedocumentPatchObjectV1Response> {
            return localVarFp.ezdoctemplatedocumentPatchObjectV1(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzdoctemplatedocumentApi - object-oriented interface
 * @export
 * @class ObjectEzdoctemplatedocumentApi
 * @extends {BaseAPI}
 */
export class ObjectEzdoctemplatedocumentApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezdoctemplatedocument
     * @param {EzdoctemplatedocumentCreateObjectV1Request} ezdoctemplatedocumentCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzdoctemplatedocumentApi
     */
    public ezdoctemplatedocumentCreateObjectV1(ezdoctemplatedocumentCreateObjectV1Request: EzdoctemplatedocumentCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzdoctemplatedocumentApiFp(this.configuration).ezdoctemplatedocumentCreateObjectV1(ezdoctemplatedocumentCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
     * @summary Retrieve the content
     * @param {number} pkiEzdoctemplatedocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzdoctemplatedocumentApi
     */
    public ezdoctemplatedocumentDownloadV1(pkiEzdoctemplatedocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzdoctemplatedocumentApiFp(this.configuration).ezdoctemplatedocumentDownloadV1(pkiEzdoctemplatedocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezdoctemplatedocument
     * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param {EzdoctemplatedocumentEditObjectV1Request} ezdoctemplatedocumentEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzdoctemplatedocumentApi
     */
    public ezdoctemplatedocumentEditObjectV1(pkiEzdoctemplatedocumentID: number, ezdoctemplatedocumentEditObjectV1Request: EzdoctemplatedocumentEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzdoctemplatedocumentApiFp(this.configuration).ezdoctemplatedocumentEditObjectV1(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
     * @summary Retrieve Ezdoctemplatedocuments and IDs
     * @param {EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum} sSelector The type of Ezdoctemplatedocuments to return
     * @param {EzdoctemplatedocumentGetAutocompleteV2ETypeEnum} eType The type of Ezdoctemplatedocument
     * @param {string} [fkiEzsignfoldertypeID] Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype
     * @param {EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzdoctemplatedocumentApi
     */
    public ezdoctemplatedocumentGetAutocompleteV2(sSelector: EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum, eType: EzdoctemplatedocumentGetAutocompleteV2ETypeEnum, fkiEzsignfoldertypeID?: string, eFilterActive?: EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectEzdoctemplatedocumentApiFp(this.configuration).ezdoctemplatedocumentGetAutocompleteV2(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Ezdoctemplatedocument list
     * @param {EzdoctemplatedocumentGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzdoctemplatedocumentApi
     */
    public ezdoctemplatedocumentGetListV1(eOrderBy?: EzdoctemplatedocumentGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectEzdoctemplatedocumentApiFp(this.configuration).ezdoctemplatedocumentGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezdoctemplatedocument
     * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzdoctemplatedocumentApi
     */
    public ezdoctemplatedocumentGetObjectV2(pkiEzdoctemplatedocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzdoctemplatedocumentApiFp(this.configuration).ezdoctemplatedocumentGetObjectV2(pkiEzdoctemplatedocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch an existing Ezdoctemplatedocument
     * @param {number} pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param {EzdoctemplatedocumentPatchObjectV1Request} ezdoctemplatedocumentPatchObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzdoctemplatedocumentApi
     */
    public ezdoctemplatedocumentPatchObjectV1(pkiEzdoctemplatedocumentID: number, ezdoctemplatedocumentPatchObjectV1Request: EzdoctemplatedocumentPatchObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzdoctemplatedocumentApiFp(this.configuration).ezdoctemplatedocumentPatchObjectV1(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum = {
    All: 'All',
    Ezsignfolder: 'Ezsignfolder',
    Ezsignfoldersignerassociations: 'Ezsignfoldersignerassociations'
} as const;
export type EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum = typeof EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum[keyof typeof EzdoctemplatedocumentGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const EzdoctemplatedocumentGetAutocompleteV2ETypeEnum = {
    User: 'User',
    Company: 'Company',
    Ezsignfoldertype: 'Ezsignfoldertype',
    CompanyUser: 'CompanyUser',
    CompanyEzsignfoldertype: 'CompanyEzsignfoldertype'
} as const;
export type EzdoctemplatedocumentGetAutocompleteV2ETypeEnum = typeof EzdoctemplatedocumentGetAutocompleteV2ETypeEnum[keyof typeof EzdoctemplatedocumentGetAutocompleteV2ETypeEnum];
/**
 * @export
 */
export const EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum = typeof EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum[keyof typeof EzdoctemplatedocumentGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const EzdoctemplatedocumentGetListV1EOrderByEnum = {
    pkiEzdoctemplatedocumentID_ASC: 'pkiEzdoctemplatedocumentID_ASC',
    pkiEzdoctemplatedocumentID_DESC: 'pkiEzdoctemplatedocumentID_DESC',
    fkiLanguageID_ASC: 'fkiLanguageID_ASC',
    fkiLanguageID_DESC: 'fkiLanguageID_DESC',
    fkiEzdoctemplatetypeID_ASC: 'fkiEzdoctemplatetypeID_ASC',
    fkiEzdoctemplatetypeID_DESC: 'fkiEzdoctemplatetypeID_DESC',
    fkiEzdoctemplatefieldtypecategoryID_ASC: 'fkiEzdoctemplatefieldtypecategoryID_ASC',
    fkiEzdoctemplatefieldtypecategoryID_DESC: 'fkiEzdoctemplatefieldtypecategoryID_DESC',
    bEzdoctemplatedocumentIsactive_ASC: 'bEzdoctemplatedocumentIsactive_ASC',
    bEzdoctemplatedocumentIsactive_DESC: 'bEzdoctemplatedocumentIsactive_DESC',
    sEzdoctemplatedocumentNameX_ASC: 'sEzdoctemplatedocumentNameX_ASC',
    sEzdoctemplatedocumentNameX_DESC: 'sEzdoctemplatedocumentNameX_DESC'
} as const;
export type EzdoctemplatedocumentGetListV1EOrderByEnum = typeof EzdoctemplatedocumentGetListV1EOrderByEnum[keyof typeof EzdoctemplatedocumentGetListV1EOrderByEnum];
