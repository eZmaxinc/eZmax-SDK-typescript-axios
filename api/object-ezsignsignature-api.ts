/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { EzsignsignatureCreateObjectV1Request } from '../model';
// @ts-ignore
import type { EzsignsignatureCreateObjectV1Response } from '../model';
// @ts-ignore
import type { EzsignsignatureCreateObjectV2Request } from '../model';
// @ts-ignore
import type { EzsignsignatureCreateObjectV2Response } from '../model';
// @ts-ignore
import type { EzsignsignatureCreateObjectV3Request } from '../model';
// @ts-ignore
import type { EzsignsignatureCreateObjectV3Response } from '../model';
// @ts-ignore
import type { EzsignsignatureDeleteObjectV1Response } from '../model';
// @ts-ignore
import type { EzsignsignatureEditObjectV2Request } from '../model';
// @ts-ignore
import type { EzsignsignatureEditObjectV2Response } from '../model';
// @ts-ignore
import type { EzsignsignatureGetEzsignsignatureattachmentV1Response } from '../model';
// @ts-ignore
import type { EzsignsignatureGetEzsignsignaturesAutomaticV1Response } from '../model';
// @ts-ignore
import type { EzsignsignatureGetObjectV3Response } from '../model';
// @ts-ignore
import type { EzsignsignatureSignV1Request } from '../model';
// @ts-ignore
import type { EzsignsignatureSignV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsignsignatureApi - axios parameter creator
 * @export
 */
export const ObjectEzsignsignatureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsignsignature
         * @param {Array<EzsignsignatureCreateObjectV1Request>} ezsignsignatureCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsignsignatureCreateObjectV1: async (ezsignsignatureCreateObjectV1Request: Array<EzsignsignatureCreateObjectV1Request>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsignsignatureCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsignsignatureCreateObjectV1', 'ezsignsignatureCreateObjectV1Request', ezsignsignatureCreateObjectV1Request)
            const localVarPath = `/1/object/ezsignsignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignsignatureCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignature
         * @param {EzsignsignatureCreateObjectV2Request} ezsignsignatureCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsignsignatureCreateObjectV2: async (ezsignsignatureCreateObjectV2Request: EzsignsignatureCreateObjectV2Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsignsignatureCreateObjectV2Request' is not null or undefined
            assertParamExists('ezsignsignatureCreateObjectV2', 'ezsignsignatureCreateObjectV2Request', ezsignsignatureCreateObjectV2Request)
            const localVarPath = `/2/object/ezsignsignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignsignatureCreateObjectV2Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignature
         * @param {EzsignsignatureCreateObjectV3Request} ezsignsignatureCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureCreateObjectV3: async (ezsignsignatureCreateObjectV3Request: EzsignsignatureCreateObjectV3Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsignsignatureCreateObjectV3Request' is not null or undefined
            assertParamExists('ezsignsignatureCreateObjectV3', 'ezsignsignatureCreateObjectV3Request', ezsignsignatureCreateObjectV3Request)
            const localVarPath = `/3/object/ezsignsignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignsignatureCreateObjectV3Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureDeleteObjectV1: async (pkiEzsignsignatureID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignatureID' is not null or undefined
            assertParamExists('ezsignsignatureDeleteObjectV1', 'pkiEzsignsignatureID', pkiEzsignsignatureID)
            const localVarPath = `/1/object/ezsignsignature/{pkiEzsignsignatureID}`
                .replace(`{${"pkiEzsignsignatureID"}}`, encodeURIComponent(String(pkiEzsignsignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {EzsignsignatureEditObjectV2Request} ezsignsignatureEditObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureEditObjectV2: async (pkiEzsignsignatureID: number, ezsignsignatureEditObjectV2Request: EzsignsignatureEditObjectV2Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignatureID' is not null or undefined
            assertParamExists('ezsignsignatureEditObjectV2', 'pkiEzsignsignatureID', pkiEzsignsignatureID)
            // verify required parameter 'ezsignsignatureEditObjectV2Request' is not null or undefined
            assertParamExists('ezsignsignatureEditObjectV2', 'ezsignsignatureEditObjectV2Request', ezsignsignatureEditObjectV2Request)
            const localVarPath = `/2/object/ezsignsignature/{pkiEzsignsignatureID}`
                .replace(`{${"pkiEzsignsignatureID"}}`, encodeURIComponent(String(pkiEzsignsignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignsignatureEditObjectV2Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignature\'s Ezsignsignatureattachments
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureGetEzsignsignatureattachmentV1: async (pkiEzsignsignatureID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignatureID' is not null or undefined
            assertParamExists('ezsignsignatureGetEzsignsignatureattachmentV1', 'pkiEzsignsignatureID', pkiEzsignsignatureID)
            const localVarPath = `/1/object/ezsignsignature/{pkiEzsignsignatureID}/getEzsignsignatureattachment`
                .replace(`{${"pkiEzsignsignatureID"}}`, encodeURIComponent(String(pkiEzsignsignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all the Ezsignsignatures that can be signed by the current user
         * @summary Retrieve all automatic Ezsignsignatures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureGetEzsignsignaturesAutomaticV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/ezsignsignature/getEzsignsignaturesAutomatic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureGetObjectV3: async (pkiEzsignsignatureID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignatureID' is not null or undefined
            assertParamExists('ezsignsignatureGetObjectV3', 'pkiEzsignsignatureID', pkiEzsignsignatureID)
            const localVarPath = `/3/object/ezsignsignature/{pkiEzsignsignatureID}`
                .replace(`{${"pkiEzsignsignatureID"}}`, encodeURIComponent(String(pkiEzsignsignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign the Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {EzsignsignatureSignV1Request} ezsignsignatureSignV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureSignV1: async (pkiEzsignsignatureID: number, ezsignsignatureSignV1Request: EzsignsignatureSignV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignsignatureID' is not null or undefined
            assertParamExists('ezsignsignatureSignV1', 'pkiEzsignsignatureID', pkiEzsignsignatureID)
            // verify required parameter 'ezsignsignatureSignV1Request' is not null or undefined
            assertParamExists('ezsignsignatureSignV1', 'ezsignsignatureSignV1Request', ezsignsignatureSignV1Request)
            const localVarPath = `/1/object/ezsignsignature/{pkiEzsignsignatureID}/sign`
                .replace(`{${"pkiEzsignsignatureID"}}`, encodeURIComponent(String(pkiEzsignsignatureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignsignatureSignV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsignsignatureApi - functional programming interface
 * @export
 */
export const ObjectEzsignsignatureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsignsignatureApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsignsignature
         * @param {Array<EzsignsignatureCreateObjectV1Request>} ezsignsignatureCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsignsignatureCreateObjectV1(ezsignsignatureCreateObjectV1Request: Array<EzsignsignatureCreateObjectV1Request>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureCreateObjectV1(ezsignsignatureCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignature
         * @param {EzsignsignatureCreateObjectV2Request} ezsignsignatureCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsignsignatureCreateObjectV2(ezsignsignatureCreateObjectV2Request: EzsignsignatureCreateObjectV2Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureCreateObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureCreateObjectV2(ezsignsignatureCreateObjectV2Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureCreateObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignature
         * @param {EzsignsignatureCreateObjectV3Request} ezsignsignatureCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignatureCreateObjectV3(ezsignsignatureCreateObjectV3Request: EzsignsignatureCreateObjectV3Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureCreateObjectV3Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureCreateObjectV3(ezsignsignatureCreateObjectV3Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureCreateObjectV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignatureDeleteObjectV1(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureDeleteObjectV1(pkiEzsignsignatureID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureDeleteObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {EzsignsignatureEditObjectV2Request} ezsignsignatureEditObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignatureEditObjectV2(pkiEzsignsignatureID: number, ezsignsignatureEditObjectV2Request: EzsignsignatureEditObjectV2Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureEditObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureEditObjectV2(pkiEzsignsignatureID, ezsignsignatureEditObjectV2Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureEditObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignature\'s Ezsignsignatureattachments
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignatureGetEzsignsignatureattachmentV1(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureGetEzsignsignatureattachmentV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureGetEzsignsignatureattachmentV1(pkiEzsignsignatureID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureGetEzsignsignatureattachmentV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return all the Ezsignsignatures that can be signed by the current user
         * @summary Retrieve all automatic Ezsignsignatures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignatureGetEzsignsignaturesAutomaticV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureGetEzsignsignaturesAutomaticV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureGetEzsignsignaturesAutomaticV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureGetEzsignsignaturesAutomaticV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignatureGetObjectV3(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureGetObjectV3Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureGetObjectV3(pkiEzsignsignatureID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureGetObjectV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Sign the Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {EzsignsignatureSignV1Request} ezsignsignatureSignV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignsignatureSignV1(pkiEzsignsignatureID: number, ezsignsignatureSignV1Request: EzsignsignatureSignV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignsignatureSignV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignsignatureSignV1(pkiEzsignsignatureID, ezsignsignatureSignV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignsignatureApi.ezsignsignatureSignV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectEzsignsignatureApi - factory interface
 * @export
 */
export const ObjectEzsignsignatureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsignsignatureApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsignsignature
         * @param {Array<EzsignsignatureCreateObjectV1Request>} ezsignsignatureCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsignsignatureCreateObjectV1(ezsignsignatureCreateObjectV1Request: Array<EzsignsignatureCreateObjectV1Request>, options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureCreateObjectV1Response> {
            return localVarFp.ezsignsignatureCreateObjectV1(ezsignsignatureCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignature
         * @param {EzsignsignatureCreateObjectV2Request} ezsignsignatureCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsignsignatureCreateObjectV2(ezsignsignatureCreateObjectV2Request: EzsignsignatureCreateObjectV2Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureCreateObjectV2Response> {
            return localVarFp.ezsignsignatureCreateObjectV2(ezsignsignatureCreateObjectV2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignsignature
         * @param {EzsignsignatureCreateObjectV3Request} ezsignsignatureCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureCreateObjectV3(ezsignsignatureCreateObjectV3Request: EzsignsignatureCreateObjectV3Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureCreateObjectV3Response> {
            return localVarFp.ezsignsignatureCreateObjectV3(ezsignsignatureCreateObjectV3Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureDeleteObjectV1(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureDeleteObjectV1Response> {
            return localVarFp.ezsignsignatureDeleteObjectV1(pkiEzsignsignatureID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {EzsignsignatureEditObjectV2Request} ezsignsignatureEditObjectV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureEditObjectV2(pkiEzsignsignatureID: number, ezsignsignatureEditObjectV2Request: EzsignsignatureEditObjectV2Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureEditObjectV2Response> {
            return localVarFp.ezsignsignatureEditObjectV2(pkiEzsignsignatureID, ezsignsignatureEditObjectV2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignature\'s Ezsignsignatureattachments
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureGetEzsignsignatureattachmentV1(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureGetEzsignsignatureattachmentV1Response> {
            return localVarFp.ezsignsignatureGetEzsignsignatureattachmentV1(pkiEzsignsignatureID, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all the Ezsignsignatures that can be signed by the current user
         * @summary Retrieve all automatic Ezsignsignatures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureGetEzsignsignaturesAutomaticV1(options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureGetEzsignsignaturesAutomaticV1Response> {
            return localVarFp.ezsignsignatureGetEzsignsignaturesAutomaticV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureGetObjectV3(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureGetObjectV3Response> {
            return localVarFp.ezsignsignatureGetObjectV3(pkiEzsignsignatureID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign the Ezsignsignature
         * @param {number} pkiEzsignsignatureID 
         * @param {EzsignsignatureSignV1Request} ezsignsignatureSignV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignsignatureSignV1(pkiEzsignsignatureID: number, ezsignsignatureSignV1Request: EzsignsignatureSignV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsignsignatureSignV1Response> {
            return localVarFp.ezsignsignatureSignV1(pkiEzsignsignatureID, ezsignsignatureSignV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsignsignatureApi - object-oriented interface
 * @export
 * @class ObjectEzsignsignatureApi
 * @extends {BaseAPI}
 */
export class ObjectEzsignsignatureApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @summary Create a new Ezsignsignature
     * @param {Array<EzsignsignatureCreateObjectV1Request>} ezsignsignatureCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureCreateObjectV1(ezsignsignatureCreateObjectV1Request: Array<EzsignsignatureCreateObjectV1Request>, options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureCreateObjectV1(ezsignsignatureCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsignsignature
     * @param {EzsignsignatureCreateObjectV2Request} ezsignsignatureCreateObjectV2Request 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureCreateObjectV2(ezsignsignatureCreateObjectV2Request: EzsignsignatureCreateObjectV2Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureCreateObjectV2(ezsignsignatureCreateObjectV2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsignsignature
     * @param {EzsignsignatureCreateObjectV3Request} ezsignsignatureCreateObjectV3Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureCreateObjectV3(ezsignsignatureCreateObjectV3Request: EzsignsignatureCreateObjectV3Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureCreateObjectV3(ezsignsignatureCreateObjectV3Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Ezsignsignature
     * @param {number} pkiEzsignsignatureID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureDeleteObjectV1(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureDeleteObjectV1(pkiEzsignsignatureID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsignsignature
     * @param {number} pkiEzsignsignatureID 
     * @param {EzsignsignatureEditObjectV2Request} ezsignsignatureEditObjectV2Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureEditObjectV2(pkiEzsignsignatureID: number, ezsignsignatureEditObjectV2Request: EzsignsignatureEditObjectV2Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureEditObjectV2(pkiEzsignsignatureID, ezsignsignatureEditObjectV2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignsignature\'s Ezsignsignatureattachments
     * @param {number} pkiEzsignsignatureID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureGetEzsignsignatureattachmentV1(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureGetEzsignsignatureattachmentV1(pkiEzsignsignatureID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all the Ezsignsignatures that can be signed by the current user
     * @summary Retrieve all automatic Ezsignsignatures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureGetEzsignsignaturesAutomaticV1(options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureGetEzsignsignaturesAutomaticV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignsignature
     * @param {number} pkiEzsignsignatureID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureGetObjectV3(pkiEzsignsignatureID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureGetObjectV3(pkiEzsignsignatureID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign the Ezsignsignature
     * @param {number} pkiEzsignsignatureID 
     * @param {EzsignsignatureSignV1Request} ezsignsignatureSignV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignsignatureApi
     */
    public ezsignsignatureSignV1(pkiEzsignsignatureID: number, ezsignsignatureSignV1Request: EzsignsignatureSignV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignsignatureApiFp(this.configuration).ezsignsignatureSignV1(pkiEzsignsignatureID, ezsignsignatureSignV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}

