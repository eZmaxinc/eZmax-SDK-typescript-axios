/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { EzsignbulksendCreateEzsignbulksendtransmissionV2Request } from '../model';
// @ts-ignore
import { EzsignbulksendCreateEzsignbulksendtransmissionV2Response } from '../model';
// @ts-ignore
import { EzsignbulksendCreateObjectV1Request } from '../model';
// @ts-ignore
import { EzsignbulksendCreateObjectV1Response } from '../model';
// @ts-ignore
import { EzsignbulksendDeleteObjectV1Response } from '../model';
// @ts-ignore
import { EzsignbulksendEditObjectV1Request } from '../model';
// @ts-ignore
import { EzsignbulksendEditObjectV1Response } from '../model';
// @ts-ignore
import { EzsignbulksendGetEzsignbulksendtransmissionsV1Response } from '../model';
// @ts-ignore
import { EzsignbulksendGetEzsignsignaturesAutomaticV1Response } from '../model';
// @ts-ignore
import { EzsignbulksendGetFormsDataV1Response } from '../model';
// @ts-ignore
import { EzsignbulksendGetListV1Response } from '../model';
// @ts-ignore
import { EzsignbulksendGetObjectV2Response } from '../model';
// @ts-ignore
import { EzsignbulksendReorderV1Request } from '../model';
// @ts-ignore
import { EzsignbulksendReorderV1Response } from '../model';
// @ts-ignore
import { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsignbulksendApi - axios parameter creator
 * @export
 */
export const ObjectEzsignbulksendApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Ezsignbulksendtransmission in the Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendCreateEzsignbulksendtransmissionV2Request} ezsignbulksendCreateEzsignbulksendtransmissionV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendCreateEzsignbulksendtransmissionV2: async (pkiEzsignbulksendID: number, ezsignbulksendCreateEzsignbulksendtransmissionV2Request: EzsignbulksendCreateEzsignbulksendtransmissionV2Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendCreateEzsignbulksendtransmissionV2', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            // verify required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV2Request' is not null or undefined
            assertParamExists('ezsignbulksendCreateEzsignbulksendtransmissionV2', 'ezsignbulksendCreateEzsignbulksendtransmissionV2Request', ezsignbulksendCreateEzsignbulksendtransmissionV2Request)
            const localVarPath = `/2/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignbulksendCreateEzsignbulksendtransmissionV2Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignbulksend
         * @param {EzsignbulksendCreateObjectV1Request} ezsignbulksendCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendCreateObjectV1: async (ezsignbulksendCreateObjectV1Request: EzsignbulksendCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsignbulksendCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsignbulksendCreateObjectV1', 'ezsignbulksendCreateObjectV1Request', ezsignbulksendCreateObjectV1Request)
            const localVarPath = `/1/object/ezsignbulksend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignbulksendCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendDeleteObjectV1: async (pkiEzsignbulksendID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendDeleteObjectV1', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            const localVarPath = `/1/object/ezsignbulksend/{pkiEzsignbulksendID}`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendEditObjectV1Request} ezsignbulksendEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendEditObjectV1: async (pkiEzsignbulksendID: number, ezsignbulksendEditObjectV1Request: EzsignbulksendEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendEditObjectV1', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            // verify required parameter 'ezsignbulksendEditObjectV1Request' is not null or undefined
            assertParamExists('ezsignbulksendEditObjectV1', 'ezsignbulksendEditObjectV1Request', ezsignbulksendEditObjectV1Request)
            const localVarPath = `/1/object/ezsignbulksend/{pkiEzsignbulksendID}`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignbulksendEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s empty Csv template
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum} eCsvSeparator Separator that will be used to separate fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetCsvTemplateV1: async (pkiEzsignbulksendID: number, eCsvSeparator: EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendGetCsvTemplateV1', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            // verify required parameter 'eCsvSeparator' is not null or undefined
            assertParamExists('ezsignbulksendGetCsvTemplateV1', 'eCsvSeparator', eCsvSeparator)
            const localVarPath = `/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getCsvTemplate`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eCsvSeparator !== undefined) {
                localVarQueryParameter['eCsvSeparator'] = eCsvSeparator;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s Ezsignbulksendtransmissions
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetEzsignbulksendtransmissionsV1: async (pkiEzsignbulksendID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendGetEzsignbulksendtransmissionsV1', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            const localVarPath = `/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignbulksendtransmissions`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
         * @summary Retrieve an existing Ezsignbulksend\'s automatic Ezsignsignatures
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetEzsignsignaturesAutomaticV1: async (pkiEzsignbulksendID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendGetEzsignsignaturesAutomaticV1', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            const localVarPath = `/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignsignaturesAutomatic`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s forms data
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetFormsDataV1: async (pkiEzsignbulksendID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendGetFormsDataV1', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            const localVarPath = `/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getFormsData`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
         * @summary Retrieve Ezsignbulksend list
         * @param {EzsignbulksendGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetListV1: async (eOrderBy?: EzsignbulksendGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/ezsignbulksend/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetObjectV2: async (pkiEzsignbulksendID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendGetObjectV2', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            const localVarPath = `/2/object/ezsignbulksend/{pkiEzsignbulksendID}`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendReorderV1Request} ezsignbulksendReorderV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendReorderV1: async (pkiEzsignbulksendID: number, ezsignbulksendReorderV1Request: EzsignbulksendReorderV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsignbulksendID' is not null or undefined
            assertParamExists('ezsignbulksendReorderV1', 'pkiEzsignbulksendID', pkiEzsignbulksendID)
            // verify required parameter 'ezsignbulksendReorderV1Request' is not null or undefined
            assertParamExists('ezsignbulksendReorderV1', 'ezsignbulksendReorderV1Request', ezsignbulksendReorderV1Request)
            const localVarPath = `/1/object/ezsignbulksend/{pkiEzsignbulksendID}/reorder`
                .replace(`{${"pkiEzsignbulksendID"}}`, encodeURIComponent(String(pkiEzsignbulksendID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsignbulksendReorderV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsignbulksendApi - functional programming interface
 * @export
 */
export const ObjectEzsignbulksendApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsignbulksendApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Ezsignbulksendtransmission in the Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendCreateEzsignbulksendtransmissionV2Request} ezsignbulksendCreateEzsignbulksendtransmissionV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendCreateEzsignbulksendtransmissionV2(pkiEzsignbulksendID: number, ezsignbulksendCreateEzsignbulksendtransmissionV2Request: EzsignbulksendCreateEzsignbulksendtransmissionV2Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendCreateEzsignbulksendtransmissionV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendCreateEzsignbulksendtransmissionV2(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV2Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendCreateEzsignbulksendtransmissionV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignbulksend
         * @param {EzsignbulksendCreateObjectV1Request} ezsignbulksendCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendCreateObjectV1(ezsignbulksendCreateObjectV1Request: EzsignbulksendCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendCreateObjectV1(ezsignbulksendCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendDeleteObjectV1(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendDeleteObjectV1(pkiEzsignbulksendID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendDeleteObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendEditObjectV1Request} ezsignbulksendEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendEditObjectV1(pkiEzsignbulksendID: number, ezsignbulksendEditObjectV1Request: EzsignbulksendEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendEditObjectV1(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s empty Csv template
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum} eCsvSeparator Separator that will be used to separate fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendGetCsvTemplateV1(pkiEzsignbulksendID: number, eCsvSeparator: EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendGetCsvTemplateV1(pkiEzsignbulksendID, eCsvSeparator, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendGetCsvTemplateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s Ezsignbulksendtransmissions
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendGetEzsignbulksendtransmissionsV1(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendGetEzsignbulksendtransmissionsV1(pkiEzsignbulksendID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendGetEzsignbulksendtransmissionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
         * @summary Retrieve an existing Ezsignbulksend\'s automatic Ezsignsignatures
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendGetEzsignsignaturesAutomaticV1(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendGetEzsignsignaturesAutomaticV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendGetEzsignsignaturesAutomaticV1(pkiEzsignbulksendID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendGetEzsignsignaturesAutomaticV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s forms data
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendGetFormsDataV1(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendGetFormsDataV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendGetFormsDataV1(pkiEzsignbulksendID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendGetFormsDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
         * @summary Retrieve Ezsignbulksend list
         * @param {EzsignbulksendGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendGetListV1(eOrderBy?: EzsignbulksendGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendGetObjectV2(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendGetObjectV2(pkiEzsignbulksendID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendReorderV1Request} ezsignbulksendReorderV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsignbulksendReorderV1(pkiEzsignbulksendID: number, ezsignbulksendReorderV1Request: EzsignbulksendReorderV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsignbulksendReorderV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsignbulksendReorderV1(pkiEzsignbulksendID, ezsignbulksendReorderV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsignbulksendApi.ezsignbulksendReorderV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectEzsignbulksendApi - factory interface
 * @export
 */
export const ObjectEzsignbulksendApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsignbulksendApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Ezsignbulksendtransmission in the Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendCreateEzsignbulksendtransmissionV2Request} ezsignbulksendCreateEzsignbulksendtransmissionV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendCreateEzsignbulksendtransmissionV2(pkiEzsignbulksendID: number, ezsignbulksendCreateEzsignbulksendtransmissionV2Request: EzsignbulksendCreateEzsignbulksendtransmissionV2Request, options?: any): AxiosPromise<EzsignbulksendCreateEzsignbulksendtransmissionV2Response> {
            return localVarFp.ezsignbulksendCreateEzsignbulksendtransmissionV2(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsignbulksend
         * @param {EzsignbulksendCreateObjectV1Request} ezsignbulksendCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendCreateObjectV1(ezsignbulksendCreateObjectV1Request: EzsignbulksendCreateObjectV1Request, options?: any): AxiosPromise<EzsignbulksendCreateObjectV1Response> {
            return localVarFp.ezsignbulksendCreateObjectV1(ezsignbulksendCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendDeleteObjectV1(pkiEzsignbulksendID: number, options?: any): AxiosPromise<EzsignbulksendDeleteObjectV1Response> {
            return localVarFp.ezsignbulksendDeleteObjectV1(pkiEzsignbulksendID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendEditObjectV1Request} ezsignbulksendEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendEditObjectV1(pkiEzsignbulksendID: number, ezsignbulksendEditObjectV1Request: EzsignbulksendEditObjectV1Request, options?: any): AxiosPromise<EzsignbulksendEditObjectV1Response> {
            return localVarFp.ezsignbulksendEditObjectV1(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s empty Csv template
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum} eCsvSeparator Separator that will be used to separate fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetCsvTemplateV1(pkiEzsignbulksendID: number, eCsvSeparator: EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum, options?: any): AxiosPromise<string> {
            return localVarFp.ezsignbulksendGetCsvTemplateV1(pkiEzsignbulksendID, eCsvSeparator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s Ezsignbulksendtransmissions
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetEzsignbulksendtransmissionsV1(pkiEzsignbulksendID: number, options?: any): AxiosPromise<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> {
            return localVarFp.ezsignbulksendGetEzsignbulksendtransmissionsV1(pkiEzsignbulksendID, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
         * @summary Retrieve an existing Ezsignbulksend\'s automatic Ezsignsignatures
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetEzsignsignaturesAutomaticV1(pkiEzsignbulksendID: number, options?: any): AxiosPromise<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> {
            return localVarFp.ezsignbulksendGetEzsignsignaturesAutomaticV1(pkiEzsignbulksendID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend\'s forms data
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetFormsDataV1(pkiEzsignbulksendID: number, options?: any): AxiosPromise<EzsignbulksendGetFormsDataV1Response> {
            return localVarFp.ezsignbulksendGetFormsDataV1(pkiEzsignbulksendID, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
         * @summary Retrieve Ezsignbulksend list
         * @param {EzsignbulksendGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetListV1(eOrderBy?: EzsignbulksendGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: any): AxiosPromise<EzsignbulksendGetListV1Response> {
            return localVarFp.ezsignbulksendGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendGetObjectV2(pkiEzsignbulksendID: number, options?: any): AxiosPromise<EzsignbulksendGetObjectV2Response> {
            return localVarFp.ezsignbulksendGetObjectV2(pkiEzsignbulksendID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
         * @param {number} pkiEzsignbulksendID 
         * @param {EzsignbulksendReorderV1Request} ezsignbulksendReorderV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsignbulksendReorderV1(pkiEzsignbulksendID: number, ezsignbulksendReorderV1Request: EzsignbulksendReorderV1Request, options?: any): AxiosPromise<EzsignbulksendReorderV1Response> {
            return localVarFp.ezsignbulksendReorderV1(pkiEzsignbulksendID, ezsignbulksendReorderV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsignbulksendApi - object-oriented interface
 * @export
 * @class ObjectEzsignbulksendApi
 * @extends {BaseAPI}
 */
export class ObjectEzsignbulksendApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Ezsignbulksendtransmission in the Ezsignbulksend
     * @param {number} pkiEzsignbulksendID 
     * @param {EzsignbulksendCreateEzsignbulksendtransmissionV2Request} ezsignbulksendCreateEzsignbulksendtransmissionV2Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendCreateEzsignbulksendtransmissionV2(pkiEzsignbulksendID: number, ezsignbulksendCreateEzsignbulksendtransmissionV2Request: EzsignbulksendCreateEzsignbulksendtransmissionV2Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendCreateEzsignbulksendtransmissionV2(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsignbulksend
     * @param {EzsignbulksendCreateObjectV1Request} ezsignbulksendCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendCreateObjectV1(ezsignbulksendCreateObjectV1Request: EzsignbulksendCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendCreateObjectV1(ezsignbulksendCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Ezsignbulksend
     * @param {number} pkiEzsignbulksendID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendDeleteObjectV1(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendDeleteObjectV1(pkiEzsignbulksendID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsignbulksend
     * @param {number} pkiEzsignbulksendID 
     * @param {EzsignbulksendEditObjectV1Request} ezsignbulksendEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendEditObjectV1(pkiEzsignbulksendID: number, ezsignbulksendEditObjectV1Request: EzsignbulksendEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendEditObjectV1(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignbulksend\'s empty Csv template
     * @param {number} pkiEzsignbulksendID 
     * @param {EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum} eCsvSeparator Separator that will be used to separate fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendGetCsvTemplateV1(pkiEzsignbulksendID: number, eCsvSeparator: EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendGetCsvTemplateV1(pkiEzsignbulksendID, eCsvSeparator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignbulksend\'s Ezsignbulksendtransmissions
     * @param {number} pkiEzsignbulksendID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendGetEzsignbulksendtransmissionsV1(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendGetEzsignbulksendtransmissionsV1(pkiEzsignbulksendID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @summary Retrieve an existing Ezsignbulksend\'s automatic Ezsignsignatures
     * @param {number} pkiEzsignbulksendID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendGetEzsignsignaturesAutomaticV1(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendGetEzsignsignaturesAutomaticV1(pkiEzsignbulksendID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignbulksend\'s forms data
     * @param {number} pkiEzsignbulksendID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendGetFormsDataV1(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendGetFormsDataV1(pkiEzsignbulksendID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
     * @summary Retrieve Ezsignbulksend list
     * @param {EzsignbulksendGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendGetListV1(eOrderBy?: EzsignbulksendGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsignbulksend
     * @param {number} pkiEzsignbulksendID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendGetObjectV2(pkiEzsignbulksendID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendGetObjectV2(pkiEzsignbulksendID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
     * @param {number} pkiEzsignbulksendID 
     * @param {EzsignbulksendReorderV1Request} ezsignbulksendReorderV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsignbulksendApi
     */
    public ezsignbulksendReorderV1(pkiEzsignbulksendID: number, ezsignbulksendReorderV1Request: EzsignbulksendReorderV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsignbulksendApiFp(this.configuration).ezsignbulksendReorderV1(pkiEzsignbulksendID, ezsignbulksendReorderV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum = {
    Comma: 'Comma',
    Semicolon: 'Semicolon'
} as const;
export type EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum = typeof EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum[keyof typeof EzsignbulksendGetCsvTemplateV1ECsvSeparatorEnum];
/**
 * @export
 */
export const EzsignbulksendGetListV1EOrderByEnum = {
    pkiEzsignbulksendID_ASC: 'pkiEzsignbulksendID_ASC',
    pkiEzsignbulksendID_DESC: 'pkiEzsignbulksendID_DESC',
    fkiEzsignfoldertypeID_ASC: 'fkiEzsignfoldertypeID_ASC',
    fkiEzsignfoldertypeID_DESC: 'fkiEzsignfoldertypeID_DESC',
    sEzsignbulksendDescription_ASC: 'sEzsignbulksendDescription_ASC',
    sEzsignbulksendDescription_DESC: 'sEzsignbulksendDescription_DESC',
    sEzsignfoldertypeNameX_ASC: 'sEzsignfoldertypeNameX_ASC',
    sEzsignfoldertypeNameX_DESC: 'sEzsignfoldertypeNameX_DESC',
    eEzsignfoldertypePrivacylevel_ASC: 'eEzsignfoldertypePrivacylevel_ASC',
    eEzsignfoldertypePrivacylevel_DESC: 'eEzsignfoldertypePrivacylevel_DESC',
    bEzsignbulksendNeedvalidation_ASC: 'bEzsignbulksendNeedvalidation_ASC',
    bEzsignbulksendNeedvalidation_DESC: 'bEzsignbulksendNeedvalidation_DESC',
    iEzsignbulksendtransmission_ASC: 'iEzsignbulksendtransmission_ASC',
    iEzsignbulksendtransmission_DESC: 'iEzsignbulksendtransmission_DESC',
    iEzsignfolder_ASC: 'iEzsignfolder_ASC',
    iEzsignfolder_DESC: 'iEzsignfolder_DESC',
    iEzsigndocument_ASC: 'iEzsigndocument_ASC',
    iEzsigndocument_DESC: 'iEzsigndocument_DESC',
    iEzsignsignature_ASC: 'iEzsignsignature_ASC',
    iEzsignsignature_DESC: 'iEzsignsignature_DESC',
    iEzsignsignatureSigned_ASC: 'iEzsignsignatureSigned_ASC',
    iEzsignsignatureSigned_DESC: 'iEzsignsignatureSigned_DESC',
    bEzsignbulksendIsactive_ASC: 'bEzsignbulksendIsactive_ASC',
    bEzsignbulksendIsactive_DESC: 'bEzsignbulksendIsactive_DESC'
} as const;
export type EzsignbulksendGetListV1EOrderByEnum = typeof EzsignbulksendGetListV1EOrderByEnum[keyof typeof EzsignbulksendGetListV1EOrderByEnum];
