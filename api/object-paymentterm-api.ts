/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import type { PaymenttermCreateObjectV1Request } from '../model';
// @ts-ignore
import type { PaymenttermCreateObjectV1Response } from '../model';
// @ts-ignore
import type { PaymenttermEditObjectV1Request } from '../model';
// @ts-ignore
import type { PaymenttermEditObjectV1Response } from '../model';
// @ts-ignore
import type { PaymenttermGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { PaymenttermGetListV1Response } from '../model';
// @ts-ignore
import type { PaymenttermGetObjectV2Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectPaymenttermApi - axios parameter creator
 * @export
 */
export const ObjectPaymenttermApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Paymentterm
         * @param {PaymenttermCreateObjectV1Request} paymenttermCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermCreateObjectV1: async (paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymenttermCreateObjectV1Request' is not null or undefined
            assertParamExists('paymenttermCreateObjectV1', 'paymenttermCreateObjectV1Request', paymenttermCreateObjectV1Request)
            const localVarPath = `/1/object/paymentterm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymenttermCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Paymentterm
         * @param {number} pkiPaymenttermID 
         * @param {PaymenttermEditObjectV1Request} paymenttermEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermEditObjectV1: async (pkiPaymenttermID: number, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiPaymenttermID' is not null or undefined
            assertParamExists('paymenttermEditObjectV1', 'pkiPaymenttermID', pkiPaymenttermID)
            // verify required parameter 'paymenttermEditObjectV1Request' is not null or undefined
            assertParamExists('paymenttermEditObjectV1', 'paymenttermEditObjectV1Request', paymenttermEditObjectV1Request)
            const localVarPath = `/1/object/paymentterm/{pkiPaymenttermID}`
                .replace(`{${"pkiPaymenttermID"}}`, encodeURIComponent(String(pkiPaymenttermID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymenttermEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Paymentterm to be used in a dropdown or autocomplete control.
         * @summary Retrieve Paymentterms and IDs
         * @param {PaymenttermGetAutocompleteV2SSelectorEnum} sSelector The type of Paymentterms to return
         * @param {PaymenttermGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermGetAutocompleteV2: async (sSelector: PaymenttermGetAutocompleteV2SSelectorEnum, eFilterActive?: PaymenttermGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('paymenttermGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/paymentterm/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Paymentterm list
         * @param {PaymenttermGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermGetListV1: async (eOrderBy?: PaymenttermGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/paymentterm/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Paymentterm
         * @param {number} pkiPaymenttermID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermGetObjectV2: async (pkiPaymenttermID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiPaymenttermID' is not null or undefined
            assertParamExists('paymenttermGetObjectV2', 'pkiPaymenttermID', pkiPaymenttermID)
            const localVarPath = `/2/object/paymentterm/{pkiPaymenttermID}`
                .replace(`{${"pkiPaymenttermID"}}`, encodeURIComponent(String(pkiPaymenttermID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectPaymenttermApi - functional programming interface
 * @export
 */
export const ObjectPaymenttermApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectPaymenttermApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Paymentterm
         * @param {PaymenttermCreateObjectV1Request} paymenttermCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymenttermCreateObjectV1(paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymenttermCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymenttermCreateObjectV1(paymenttermCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymenttermApi.paymenttermCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Paymentterm
         * @param {number} pkiPaymenttermID 
         * @param {PaymenttermEditObjectV1Request} paymenttermEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymenttermEditObjectV1(pkiPaymenttermID: number, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymenttermEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymenttermEditObjectV1(pkiPaymenttermID, paymenttermEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymenttermApi.paymenttermEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Paymentterm to be used in a dropdown or autocomplete control.
         * @summary Retrieve Paymentterms and IDs
         * @param {PaymenttermGetAutocompleteV2SSelectorEnum} sSelector The type of Paymentterms to return
         * @param {PaymenttermGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymenttermGetAutocompleteV2(sSelector: PaymenttermGetAutocompleteV2SSelectorEnum, eFilterActive?: PaymenttermGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymenttermGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymenttermGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymenttermApi.paymenttermGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Paymentterm list
         * @param {PaymenttermGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymenttermGetListV1(eOrderBy?: PaymenttermGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymenttermGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymenttermGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymenttermApi.paymenttermGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Paymentterm
         * @param {number} pkiPaymenttermID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymenttermGetObjectV2(pkiPaymenttermID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymenttermGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymenttermGetObjectV2(pkiPaymenttermID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectPaymenttermApi.paymenttermGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectPaymenttermApi - factory interface
 * @export
 */
export const ObjectPaymenttermApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectPaymenttermApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Paymentterm
         * @param {PaymenttermCreateObjectV1Request} paymenttermCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermCreateObjectV1(paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaymenttermCreateObjectV1Response> {
            return localVarFp.paymenttermCreateObjectV1(paymenttermCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Paymentterm
         * @param {number} pkiPaymenttermID 
         * @param {PaymenttermEditObjectV1Request} paymenttermEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermEditObjectV1(pkiPaymenttermID: number, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaymenttermEditObjectV1Response> {
            return localVarFp.paymenttermEditObjectV1(pkiPaymenttermID, paymenttermEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Paymentterm to be used in a dropdown or autocomplete control.
         * @summary Retrieve Paymentterms and IDs
         * @param {PaymenttermGetAutocompleteV2SSelectorEnum} sSelector The type of Paymentterms to return
         * @param {PaymenttermGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermGetAutocompleteV2(sSelector: PaymenttermGetAutocompleteV2SSelectorEnum, eFilterActive?: PaymenttermGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<PaymenttermGetAutocompleteV2Response> {
            return localVarFp.paymenttermGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Paymentterm list
         * @param {PaymenttermGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermGetListV1(eOrderBy?: PaymenttermGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaymenttermGetListV1Response> {
            return localVarFp.paymenttermGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Paymentterm
         * @param {number} pkiPaymenttermID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymenttermGetObjectV2(pkiPaymenttermID: number, options?: RawAxiosRequestConfig): AxiosPromise<PaymenttermGetObjectV2Response> {
            return localVarFp.paymenttermGetObjectV2(pkiPaymenttermID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectPaymenttermApi - object-oriented interface
 * @export
 * @class ObjectPaymenttermApi
 * @extends {BaseAPI}
 */
export class ObjectPaymenttermApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Paymentterm
     * @param {PaymenttermCreateObjectV1Request} paymenttermCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymenttermApi
     */
    public paymenttermCreateObjectV1(paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectPaymenttermApiFp(this.configuration).paymenttermCreateObjectV1(paymenttermCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Paymentterm
     * @param {number} pkiPaymenttermID 
     * @param {PaymenttermEditObjectV1Request} paymenttermEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymenttermApi
     */
    public paymenttermEditObjectV1(pkiPaymenttermID: number, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectPaymenttermApiFp(this.configuration).paymenttermEditObjectV1(pkiPaymenttermID, paymenttermEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Paymentterm to be used in a dropdown or autocomplete control.
     * @summary Retrieve Paymentterms and IDs
     * @param {PaymenttermGetAutocompleteV2SSelectorEnum} sSelector The type of Paymentterms to return
     * @param {PaymenttermGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymenttermApi
     */
    public paymenttermGetAutocompleteV2(sSelector: PaymenttermGetAutocompleteV2SSelectorEnum, eFilterActive?: PaymenttermGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectPaymenttermApiFp(this.configuration).paymenttermGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Paymentterm list
     * @param {PaymenttermGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymenttermApi
     */
    public paymenttermGetListV1(eOrderBy?: PaymenttermGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectPaymenttermApiFp(this.configuration).paymenttermGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Paymentterm
     * @param {number} pkiPaymenttermID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectPaymenttermApi
     */
    public paymenttermGetObjectV2(pkiPaymenttermID: number, options?: RawAxiosRequestConfig) {
        return ObjectPaymenttermApiFp(this.configuration).paymenttermGetObjectV2(pkiPaymenttermID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PaymenttermGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type PaymenttermGetAutocompleteV2SSelectorEnum = typeof PaymenttermGetAutocompleteV2SSelectorEnum[keyof typeof PaymenttermGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const PaymenttermGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type PaymenttermGetAutocompleteV2EFilterActiveEnum = typeof PaymenttermGetAutocompleteV2EFilterActiveEnum[keyof typeof PaymenttermGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const PaymenttermGetListV1EOrderByEnum = {
    pkiPaymenttermID_ASC: 'pkiPaymenttermID_ASC',
    pkiPaymenttermID_DESC: 'pkiPaymenttermID_DESC',
    sPaymenttermCode_ASC: 'sPaymenttermCode_ASC',
    sPaymenttermCode_DESC: 'sPaymenttermCode_DESC',
    ePaymenttermType_ASC: 'ePaymenttermType_ASC',
    ePaymenttermType_DESC: 'ePaymenttermType_DESC',
    iPaymenttermDay_ASC: 'iPaymenttermDay_ASC',
    iPaymenttermDay_DESC: 'iPaymenttermDay_DESC',
    sPaymenttermDescriptionX_ASC: 'sPaymenttermDescriptionX_ASC',
    sPaymenttermDescriptionX_DESC: 'sPaymenttermDescriptionX_DESC',
    bPaymenttermIsactive_ASC: 'bPaymenttermIsactive_ASC',
    bPaymenttermIsactive_DESC: 'bPaymenttermIsactive_DESC'
} as const;
export type PaymenttermGetListV1EOrderByEnum = typeof PaymenttermGetListV1EOrderByEnum[keyof typeof PaymenttermGetListV1EOrderByEnum];
