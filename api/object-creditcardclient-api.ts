/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponse } from '../model';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { CommonResponseErrorCreditcardValidation } from '../model';
// @ts-ignore
import type { CreditcardclientCreateObjectV1Request } from '../model';
// @ts-ignore
import type { CreditcardclientCreateObjectV1Response } from '../model';
// @ts-ignore
import type { CreditcardclientEditObjectV1Request } from '../model';
// @ts-ignore
import type { CreditcardclientGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { CreditcardclientGetListV1Response } from '../model';
// @ts-ignore
import type { CreditcardclientGetObjectV2Response } from '../model';
// @ts-ignore
import type { CreditcardclientPatchObjectV1Request } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectCreditcardclientApi - axios parameter creator
 * @export
 */
export const ObjectCreditcardclientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Creditcardclient
         * @param {CreditcardclientCreateObjectV1Request} creditcardclientCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientCreateObjectV1: async (creditcardclientCreateObjectV1Request: CreditcardclientCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditcardclientCreateObjectV1Request' is not null or undefined
            assertParamExists('creditcardclientCreateObjectV1', 'creditcardclientCreateObjectV1Request', creditcardclientCreateObjectV1Request)
            const localVarPath = `/1/object/creditcardclient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditcardclientCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientDeleteObjectV1: async (pkiCreditcardclientID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiCreditcardclientID' is not null or undefined
            assertParamExists('creditcardclientDeleteObjectV1', 'pkiCreditcardclientID', pkiCreditcardclientID)
            const localVarPath = `/1/object/creditcardclient/{pkiCreditcardclientID}`
                .replace(`{${"pkiCreditcardclientID"}}`, encodeURIComponent(String(pkiCreditcardclientID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {CreditcardclientEditObjectV1Request} creditcardclientEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientEditObjectV1: async (pkiCreditcardclientID: number, creditcardclientEditObjectV1Request: CreditcardclientEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiCreditcardclientID' is not null or undefined
            assertParamExists('creditcardclientEditObjectV1', 'pkiCreditcardclientID', pkiCreditcardclientID)
            // verify required parameter 'creditcardclientEditObjectV1Request' is not null or undefined
            assertParamExists('creditcardclientEditObjectV1', 'creditcardclientEditObjectV1Request', creditcardclientEditObjectV1Request)
            const localVarPath = `/1/object/creditcardclient/{pkiCreditcardclientID}`
                .replace(`{${"pkiCreditcardclientID"}}`, encodeURIComponent(String(pkiCreditcardclientID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditcardclientEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
         * @summary Retrieve Creditcardclients and IDs
         * @param {CreditcardclientGetAutocompleteV2SSelectorEnum} sSelector The type of Creditcardclients to return
         * @param {CreditcardclientGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientGetAutocompleteV2: async (sSelector: CreditcardclientGetAutocompleteV2SSelectorEnum, eFilterActive?: CreditcardclientGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('creditcardclientGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/creditcardclient/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Creditcardclient list
         * @param {CreditcardclientGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientGetListV1: async (eOrderBy?: CreditcardclientGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/creditcardclient/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientGetObjectV2: async (pkiCreditcardclientID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiCreditcardclientID' is not null or undefined
            assertParamExists('creditcardclientGetObjectV2', 'pkiCreditcardclientID', pkiCreditcardclientID)
            const localVarPath = `/2/object/creditcardclient/{pkiCreditcardclientID}`
                .replace(`{${"pkiCreditcardclientID"}}`, encodeURIComponent(String(pkiCreditcardclientID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {CreditcardclientPatchObjectV1Request} creditcardclientPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientPatchObjectV1: async (pkiCreditcardclientID: number, creditcardclientPatchObjectV1Request: CreditcardclientPatchObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiCreditcardclientID' is not null or undefined
            assertParamExists('creditcardclientPatchObjectV1', 'pkiCreditcardclientID', pkiCreditcardclientID)
            // verify required parameter 'creditcardclientPatchObjectV1Request' is not null or undefined
            assertParamExists('creditcardclientPatchObjectV1', 'creditcardclientPatchObjectV1Request', creditcardclientPatchObjectV1Request)
            const localVarPath = `/1/object/creditcardclient/{pkiCreditcardclientID}`
                .replace(`{${"pkiCreditcardclientID"}}`, encodeURIComponent(String(pkiCreditcardclientID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditcardclientPatchObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PATCH' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectCreditcardclientApi - functional programming interface
 * @export
 */
export const ObjectCreditcardclientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectCreditcardclientApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Creditcardclient
         * @param {CreditcardclientCreateObjectV1Request} creditcardclientCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardclientCreateObjectV1(creditcardclientCreateObjectV1Request: CreditcardclientCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditcardclientCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardclientCreateObjectV1(creditcardclientCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardclientApi.creditcardclientCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardclientDeleteObjectV1(pkiCreditcardclientID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardclientDeleteObjectV1(pkiCreditcardclientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardclientApi.creditcardclientDeleteObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {CreditcardclientEditObjectV1Request} creditcardclientEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardclientEditObjectV1(pkiCreditcardclientID: number, creditcardclientEditObjectV1Request: CreditcardclientEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardclientEditObjectV1(pkiCreditcardclientID, creditcardclientEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardclientApi.creditcardclientEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
         * @summary Retrieve Creditcardclients and IDs
         * @param {CreditcardclientGetAutocompleteV2SSelectorEnum} sSelector The type of Creditcardclients to return
         * @param {CreditcardclientGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardclientGetAutocompleteV2(sSelector: CreditcardclientGetAutocompleteV2SSelectorEnum, eFilterActive?: CreditcardclientGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditcardclientGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardclientGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardclientApi.creditcardclientGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Creditcardclient list
         * @param {CreditcardclientGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardclientGetListV1(eOrderBy?: CreditcardclientGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditcardclientGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardclientGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardclientApi.creditcardclientGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardclientGetObjectV2(pkiCreditcardclientID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditcardclientGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardclientGetObjectV2(pkiCreditcardclientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardclientApi.creditcardclientGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {CreditcardclientPatchObjectV1Request} creditcardclientPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardclientPatchObjectV1(pkiCreditcardclientID: number, creditcardclientPatchObjectV1Request: CreditcardclientPatchObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardclientPatchObjectV1(pkiCreditcardclientID, creditcardclientPatchObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardclientApi.creditcardclientPatchObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectCreditcardclientApi - factory interface
 * @export
 */
export const ObjectCreditcardclientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectCreditcardclientApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Creditcardclient
         * @param {CreditcardclientCreateObjectV1Request} creditcardclientCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientCreateObjectV1(creditcardclientCreateObjectV1Request: CreditcardclientCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CreditcardclientCreateObjectV1Response> {
            return localVarFp.creditcardclientCreateObjectV1(creditcardclientCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientDeleteObjectV1(pkiCreditcardclientID: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.creditcardclientDeleteObjectV1(pkiCreditcardclientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {CreditcardclientEditObjectV1Request} creditcardclientEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientEditObjectV1(pkiCreditcardclientID: number, creditcardclientEditObjectV1Request: CreditcardclientEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.creditcardclientEditObjectV1(pkiCreditcardclientID, creditcardclientEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
         * @summary Retrieve Creditcardclients and IDs
         * @param {CreditcardclientGetAutocompleteV2SSelectorEnum} sSelector The type of Creditcardclients to return
         * @param {CreditcardclientGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientGetAutocompleteV2(sSelector: CreditcardclientGetAutocompleteV2SSelectorEnum, eFilterActive?: CreditcardclientGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<CreditcardclientGetAutocompleteV2Response> {
            return localVarFp.creditcardclientGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Creditcardclient list
         * @param {CreditcardclientGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientGetListV1(eOrderBy?: CreditcardclientGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreditcardclientGetListV1Response> {
            return localVarFp.creditcardclientGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientGetObjectV2(pkiCreditcardclientID: number, options?: RawAxiosRequestConfig): AxiosPromise<CreditcardclientGetObjectV2Response> {
            return localVarFp.creditcardclientGetObjectV2(pkiCreditcardclientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch an existing Creditcardclient
         * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
         * @param {CreditcardclientPatchObjectV1Request} creditcardclientPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardclientPatchObjectV1(pkiCreditcardclientID: number, creditcardclientPatchObjectV1Request: CreditcardclientPatchObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.creditcardclientPatchObjectV1(pkiCreditcardclientID, creditcardclientPatchObjectV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectCreditcardclientApi - object-oriented interface
 * @export
 * @class ObjectCreditcardclientApi
 * @extends {BaseAPI}
 */
export class ObjectCreditcardclientApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Creditcardclient
     * @param {CreditcardclientCreateObjectV1Request} creditcardclientCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardclientApi
     */
    public creditcardclientCreateObjectV1(creditcardclientCreateObjectV1Request: CreditcardclientCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardclientApiFp(this.configuration).creditcardclientCreateObjectV1(creditcardclientCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Creditcardclient
     * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardclientApi
     */
    public creditcardclientDeleteObjectV1(pkiCreditcardclientID: number, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardclientApiFp(this.configuration).creditcardclientDeleteObjectV1(pkiCreditcardclientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Creditcardclient
     * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
     * @param {CreditcardclientEditObjectV1Request} creditcardclientEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardclientApi
     */
    public creditcardclientEditObjectV1(pkiCreditcardclientID: number, creditcardclientEditObjectV1Request: CreditcardclientEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardclientApiFp(this.configuration).creditcardclientEditObjectV1(pkiCreditcardclientID, creditcardclientEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
     * @summary Retrieve Creditcardclients and IDs
     * @param {CreditcardclientGetAutocompleteV2SSelectorEnum} sSelector The type of Creditcardclients to return
     * @param {CreditcardclientGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardclientApi
     */
    public creditcardclientGetAutocompleteV2(sSelector: CreditcardclientGetAutocompleteV2SSelectorEnum, eFilterActive?: CreditcardclientGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardclientApiFp(this.configuration).creditcardclientGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Creditcardclient list
     * @param {CreditcardclientGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardclientApi
     */
    public creditcardclientGetListV1(eOrderBy?: CreditcardclientGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardclientApiFp(this.configuration).creditcardclientGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Creditcardclient
     * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardclientApi
     */
    public creditcardclientGetObjectV2(pkiCreditcardclientID: number, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardclientApiFp(this.configuration).creditcardclientGetObjectV2(pkiCreditcardclientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch an existing Creditcardclient
     * @param {number} pkiCreditcardclientID The unique ID of the Creditcardclient
     * @param {CreditcardclientPatchObjectV1Request} creditcardclientPatchObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardclientApi
     */
    public creditcardclientPatchObjectV1(pkiCreditcardclientID: number, creditcardclientPatchObjectV1Request: CreditcardclientPatchObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardclientApiFp(this.configuration).creditcardclientPatchObjectV1(pkiCreditcardclientID, creditcardclientPatchObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreditcardclientGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type CreditcardclientGetAutocompleteV2SSelectorEnum = typeof CreditcardclientGetAutocompleteV2SSelectorEnum[keyof typeof CreditcardclientGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const CreditcardclientGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type CreditcardclientGetAutocompleteV2EFilterActiveEnum = typeof CreditcardclientGetAutocompleteV2EFilterActiveEnum[keyof typeof CreditcardclientGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const CreditcardclientGetListV1EOrderByEnum = {
    pkiCreditcardclientID_ASC: 'pkiCreditcardclientID_ASC',
    pkiCreditcardclientID_DESC: 'pkiCreditcardclientID_DESC',
    fkiCreditcarddetailID_ASC: 'fkiCreditcarddetailID_ASC',
    fkiCreditcarddetailID_DESC: 'fkiCreditcarddetailID_DESC',
    fkiCreditcardtypeID_ASC: 'fkiCreditcardtypeID_ASC',
    fkiCreditcardtypeID_DESC: 'fkiCreditcardtypeID_DESC',
    bCreditcardclientrelationIsdefault_ASC: 'bCreditcardclientrelationIsdefault_ASC',
    bCreditcardclientrelationIsdefault_DESC: 'bCreditcardclientrelationIsdefault_DESC',
    sCreditcardclientDescription_ASC: 'sCreditcardclientDescription_ASC',
    sCreditcardclientDescription_DESC: 'sCreditcardclientDescription_DESC',
    bCreditcardclientIsactive_ASC: 'bCreditcardclientIsactive_ASC',
    bCreditcardclientIsactive_DESC: 'bCreditcardclientIsactive_DESC',
    bCreditcardclientAllowedagencypayment_ASC: 'bCreditcardclientAllowedagencypayment_ASC',
    bCreditcardclientAllowedagencypayment_DESC: 'bCreditcardclientAllowedagencypayment_DESC',
    bCreditcardclientAllowedtranquillit_ASC: 'bCreditcardclientAllowedtranquillit_ASC',
    bCreditcardclientAllowedtranquillit_DESC: 'bCreditcardclientAllowedtranquillit_DESC',
    iCreditcarddetailExpirationmonth_ASC: 'iCreditcarddetailExpirationmonth_ASC',
    iCreditcarddetailExpirationmonth_DESC: 'iCreditcarddetailExpirationmonth_DESC',
    iCreditcarddetailExpirationyear_ASC: 'iCreditcarddetailExpirationyear_ASC',
    iCreditcarddetailExpirationyear_DESC: 'iCreditcarddetailExpirationyear_DESC'
} as const;
export type CreditcardclientGetListV1EOrderByEnum = typeof CreditcardclientGetListV1EOrderByEnum[keyof typeof CreditcardclientGetListV1EOrderByEnum];
