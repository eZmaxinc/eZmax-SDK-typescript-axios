/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { EzsigntemplatepackageCreateObjectV1Request } from '../model';
// @ts-ignore
import { EzsigntemplatepackageCreateObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackageDeleteObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request } from '../model';
// @ts-ignore
import { EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackageEditObjectV1Request } from '../model';
// @ts-ignore
import { EzsigntemplatepackageEditObjectV1Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackageGetAutocompleteV2Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackageGetListV1Response } from '../model';
// @ts-ignore
import { EzsigntemplatepackageGetObjectV2Response } from '../model';
// @ts-ignore
import { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsigntemplatepackageApi - axios parameter creator
 * @export
 */
export const ObjectEzsigntemplatepackageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepackage
         * @param {EzsigntemplatepackageCreateObjectV1Request} ezsigntemplatepackageCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageCreateObjectV1: async (ezsigntemplatepackageCreateObjectV1Request: EzsigntemplatepackageCreateObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigntemplatepackageCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepackageCreateObjectV1', 'ezsigntemplatepackageCreateObjectV1Request', ezsigntemplatepackageCreateObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatepackage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepackageCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageDeleteObjectV1: async (pkiEzsigntemplatepackageID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepackageID' is not null or undefined
            assertParamExists('ezsigntemplatepackageDeleteObjectV1', 'pkiEzsigntemplatepackageID', pkiEzsigntemplatepackageID)
            const localVarPath = `/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}`
                .replace(`{${"pkiEzsigntemplatepackageID"}}`, encodeURIComponent(String(pkiEzsigntemplatepackageID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplatepackagesigners at the same time.
         * @summary Edit multiple Ezsigntemplatepackagesigners
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request} ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageEditEzsigntemplatepackagesignersV1: async (pkiEzsigntemplatepackageID: number, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepackageID' is not null or undefined
            assertParamExists('ezsigntemplatepackageEditEzsigntemplatepackagesignersV1', 'pkiEzsigntemplatepackageID', pkiEzsigntemplatepackageID)
            // verify required parameter 'ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepackageEditEzsigntemplatepackagesignersV1', 'ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request', ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request)
            const localVarPath = `/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}/editEzsigntemplatepackagesigners`
                .replace(`{${"pkiEzsigntemplatepackageID"}}`, encodeURIComponent(String(pkiEzsigntemplatepackageID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {EzsigntemplatepackageEditObjectV1Request} ezsigntemplatepackageEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageEditObjectV1: async (pkiEzsigntemplatepackageID: number, ezsigntemplatepackageEditObjectV1Request: EzsigntemplatepackageEditObjectV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepackageID' is not null or undefined
            assertParamExists('ezsigntemplatepackageEditObjectV1', 'pkiEzsigntemplatepackageID', pkiEzsigntemplatepackageID)
            // verify required parameter 'ezsigntemplatepackageEditObjectV1Request' is not null or undefined
            assertParamExists('ezsigntemplatepackageEditObjectV1', 'ezsigntemplatepackageEditObjectV1Request', ezsigntemplatepackageEditObjectV1Request)
            const localVarPath = `/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}`
                .replace(`{${"pkiEzsigntemplatepackageID"}}`, encodeURIComponent(String(pkiEzsigntemplatepackageID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigntemplatepackageEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Ezsigntemplatepackage to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsigntemplatepackages and IDs
         * @param {EzsigntemplatepackageGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsigntemplatepackages to return
         * @param {EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageGetAutocompleteV2: async (sSelector: EzsigntemplatepackageGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('ezsigntemplatepackageGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/ezsigntemplatepackage/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepackageType | Company<br>Team<br>User<br>Usergroup |
         * @summary Retrieve Ezsigntemplatepackage list
         * @param {EzsigntemplatepackageGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageGetListV1: async (eOrderBy?: EzsigntemplatepackageGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/ezsigntemplatepackage/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageGetObjectV2: async (pkiEzsigntemplatepackageID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigntemplatepackageID' is not null or undefined
            assertParamExists('ezsigntemplatepackageGetObjectV2', 'pkiEzsigntemplatepackageID', pkiEzsigntemplatepackageID)
            const localVarPath = `/2/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}`
                .replace(`{${"pkiEzsigntemplatepackageID"}}`, encodeURIComponent(String(pkiEzsigntemplatepackageID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsigntemplatepackageApi - functional programming interface
 * @export
 */
export const ObjectEzsigntemplatepackageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsigntemplatepackageApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepackage
         * @param {EzsigntemplatepackageCreateObjectV1Request} ezsigntemplatepackageCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackageCreateObjectV1(ezsigntemplatepackageCreateObjectV1Request: EzsigntemplatepackageCreateObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackageCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackageCreateObjectV1(ezsigntemplatepackageCreateObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackageDeleteObjectV1(pkiEzsigntemplatepackageID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackageDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackageDeleteObjectV1(pkiEzsigntemplatepackageID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplatepackagesigners at the same time.
         * @summary Edit multiple Ezsigntemplatepackagesigners
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request} ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackageEditEzsigntemplatepackagesignersV1(pkiEzsigntemplatepackageID: number, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackageEditEzsigntemplatepackagesignersV1(pkiEzsigntemplatepackageID, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {EzsigntemplatepackageEditObjectV1Request} ezsigntemplatepackageEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackageEditObjectV1(pkiEzsigntemplatepackageID: number, ezsigntemplatepackageEditObjectV1Request: EzsigntemplatepackageEditObjectV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackageEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackageEditObjectV1(pkiEzsigntemplatepackageID, ezsigntemplatepackageEditObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of Ezsigntemplatepackage to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsigntemplatepackages and IDs
         * @param {EzsigntemplatepackageGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsigntemplatepackages to return
         * @param {EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackageGetAutocompleteV2(sSelector: EzsigntemplatepackageGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackageGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackageGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepackageType | Company<br>Team<br>User<br>Usergroup |
         * @summary Retrieve Ezsigntemplatepackage list
         * @param {EzsigntemplatepackageGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackageGetListV1(eOrderBy?: EzsigntemplatepackageGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackageGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackageGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigntemplatepackageGetObjectV2(pkiEzsigntemplatepackageID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigntemplatepackageGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigntemplatepackageGetObjectV2(pkiEzsigntemplatepackageID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectEzsigntemplatepackageApi - factory interface
 * @export
 */
export const ObjectEzsigntemplatepackageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsigntemplatepackageApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigntemplatepackage
         * @param {EzsigntemplatepackageCreateObjectV1Request} ezsigntemplatepackageCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageCreateObjectV1(ezsigntemplatepackageCreateObjectV1Request: EzsigntemplatepackageCreateObjectV1Request, options?: any): AxiosPromise<EzsigntemplatepackageCreateObjectV1Response> {
            return localVarFp.ezsigntemplatepackageCreateObjectV1(ezsigntemplatepackageCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageDeleteObjectV1(pkiEzsigntemplatepackageID: number, options?: any): AxiosPromise<EzsigntemplatepackageDeleteObjectV1Response> {
            return localVarFp.ezsigntemplatepackageDeleteObjectV1(pkiEzsigntemplatepackageID, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Ezsigntemplatepackagesigners at the same time.
         * @summary Edit multiple Ezsigntemplatepackagesigners
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request} ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageEditEzsigntemplatepackagesignersV1(pkiEzsigntemplatepackageID: number, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, options?: any): AxiosPromise<EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response> {
            return localVarFp.ezsigntemplatepackageEditEzsigntemplatepackagesignersV1(pkiEzsigntemplatepackageID, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {EzsigntemplatepackageEditObjectV1Request} ezsigntemplatepackageEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageEditObjectV1(pkiEzsigntemplatepackageID: number, ezsigntemplatepackageEditObjectV1Request: EzsigntemplatepackageEditObjectV1Request, options?: any): AxiosPromise<EzsigntemplatepackageEditObjectV1Response> {
            return localVarFp.ezsigntemplatepackageEditObjectV1(pkiEzsigntemplatepackageID, ezsigntemplatepackageEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Ezsigntemplatepackage to be used in a dropdown or autocomplete control.
         * @summary Retrieve Ezsigntemplatepackages and IDs
         * @param {EzsigntemplatepackageGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsigntemplatepackages to return
         * @param {EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageGetAutocompleteV2(sSelector: EzsigntemplatepackageGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: any): AxiosPromise<EzsigntemplatepackageGetAutocompleteV2Response> {
            return localVarFp.ezsigntemplatepackageGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepackageType | Company<br>Team<br>User<br>Usergroup |
         * @summary Retrieve Ezsigntemplatepackage list
         * @param {EzsigntemplatepackageGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageGetListV1(eOrderBy?: EzsigntemplatepackageGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: any): AxiosPromise<EzsigntemplatepackageGetListV1Response> {
            return localVarFp.ezsigntemplatepackageGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigntemplatepackage
         * @param {number} pkiEzsigntemplatepackageID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigntemplatepackageGetObjectV2(pkiEzsigntemplatepackageID: number, options?: any): AxiosPromise<EzsigntemplatepackageGetObjectV2Response> {
            return localVarFp.ezsigntemplatepackageGetObjectV2(pkiEzsigntemplatepackageID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsigntemplatepackageApi - object-oriented interface
 * @export
 * @class ObjectEzsigntemplatepackageApi
 * @extends {BaseAPI}
 */
export class ObjectEzsigntemplatepackageApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsigntemplatepackage
     * @param {EzsigntemplatepackageCreateObjectV1Request} ezsigntemplatepackageCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackageApi
     */
    public ezsigntemplatepackageCreateObjectV1(ezsigntemplatepackageCreateObjectV1Request: EzsigntemplatepackageCreateObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackageApiFp(this.configuration).ezsigntemplatepackageCreateObjectV1(ezsigntemplatepackageCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Ezsigntemplatepackage
     * @param {number} pkiEzsigntemplatepackageID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackageApi
     */
    public ezsigntemplatepackageDeleteObjectV1(pkiEzsigntemplatepackageID: number, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackageApiFp(this.configuration).ezsigntemplatepackageDeleteObjectV1(pkiEzsigntemplatepackageID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Ezsigntemplatepackagesigners at the same time.
     * @summary Edit multiple Ezsigntemplatepackagesigners
     * @param {number} pkiEzsigntemplatepackageID 
     * @param {EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request} ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackageApi
     */
    public ezsigntemplatepackageEditEzsigntemplatepackagesignersV1(pkiEzsigntemplatepackageID: number, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackageApiFp(this.configuration).ezsigntemplatepackageEditEzsigntemplatepackagesignersV1(pkiEzsigntemplatepackageID, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsigntemplatepackage
     * @param {number} pkiEzsigntemplatepackageID 
     * @param {EzsigntemplatepackageEditObjectV1Request} ezsigntemplatepackageEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackageApi
     */
    public ezsigntemplatepackageEditObjectV1(pkiEzsigntemplatepackageID: number, ezsigntemplatepackageEditObjectV1Request: EzsigntemplatepackageEditObjectV1Request, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackageApiFp(this.configuration).ezsigntemplatepackageEditObjectV1(pkiEzsigntemplatepackageID, ezsigntemplatepackageEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Ezsigntemplatepackage to be used in a dropdown or autocomplete control.
     * @summary Retrieve Ezsigntemplatepackages and IDs
     * @param {EzsigntemplatepackageGetAutocompleteV2SSelectorEnum} sSelector The type of Ezsigntemplatepackages to return
     * @param {EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackageApi
     */
    public ezsigntemplatepackageGetAutocompleteV2(sSelector: EzsigntemplatepackageGetAutocompleteV2SSelectorEnum, eFilterActive?: EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackageApiFp(this.configuration).ezsigntemplatepackageGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepackageType | Company<br>Team<br>User<br>Usergroup |
     * @summary Retrieve Ezsigntemplatepackage list
     * @param {EzsigntemplatepackageGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackageApi
     */
    public ezsigntemplatepackageGetListV1(eOrderBy?: EzsigntemplatepackageGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackageApiFp(this.configuration).ezsigntemplatepackageGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigntemplatepackage
     * @param {number} pkiEzsigntemplatepackageID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigntemplatepackageApi
     */
    public ezsigntemplatepackageGetObjectV2(pkiEzsigntemplatepackageID: number, options?: AxiosRequestConfig) {
        return ObjectEzsigntemplatepackageApiFp(this.configuration).ezsigntemplatepackageGetObjectV2(pkiEzsigntemplatepackageID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const EzsigntemplatepackageGetAutocompleteV2SSelectorEnum = {
    All: 'All',
    AllMultipleCopiesDisabled: 'AllMultipleCopiesDisabled'
} as const;
export type EzsigntemplatepackageGetAutocompleteV2SSelectorEnum = typeof EzsigntemplatepackageGetAutocompleteV2SSelectorEnum[keyof typeof EzsigntemplatepackageGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum = typeof EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum[keyof typeof EzsigntemplatepackageGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const EzsigntemplatepackageGetListV1EOrderByEnum = {
    pkiEzsigntemplatepackageID_ASC: 'pkiEzsigntemplatepackageID_ASC',
    pkiEzsigntemplatepackageID_DESC: 'pkiEzsigntemplatepackageID_DESC',
    fkiTeamID_ASC: 'fkiTeamID_ASC',
    fkiTeamID_DESC: 'fkiTeamID_DESC',
    fkiEzsignfoldertypeID_ASC: 'fkiEzsignfoldertypeID_ASC',
    fkiEzsignfoldertypeID_DESC: 'fkiEzsignfoldertypeID_DESC',
    fkiLanguageID_ASC: 'fkiLanguageID_ASC',
    fkiLanguageID_DESC: 'fkiLanguageID_DESC',
    eEzsigntemplatepackageType_ASC: 'eEzsigntemplatepackageType_ASC',
    eEzsigntemplatepackageType_DESC: 'eEzsigntemplatepackageType_DESC',
    sEzsigntemplatepackageTypedescriptionX_ASC: 'sEzsigntemplatepackageTypedescriptionX_ASC',
    sEzsigntemplatepackageTypedescriptionX_DESC: 'sEzsigntemplatepackageTypedescriptionX_DESC',
    sEzsigntemplatepackageDescription_ASC: 'sEzsigntemplatepackageDescription_ASC',
    sEzsigntemplatepackageDescription_DESC: 'sEzsigntemplatepackageDescription_DESC',
    bEzsigntemplatepackageNeedvalidation_ASC: 'bEzsigntemplatepackageNeedvalidation_ASC',
    bEzsigntemplatepackageNeedvalidation_DESC: 'bEzsigntemplatepackageNeedvalidation_DESC',
    iEzsigntemplatepackagemembership_ASC: 'iEzsigntemplatepackagemembership_ASC',
    iEzsigntemplatepackagemembership_DESC: 'iEzsigntemplatepackagemembership_DESC',
    bEzsigntemplatepackageIsactive_ASC: 'bEzsigntemplatepackageIsactive_ASC',
    bEzsigntemplatepackageIsactive_DESC: 'bEzsigntemplatepackageIsactive_DESC'
} as const;
export type EzsigntemplatepackageGetListV1EOrderByEnum = typeof EzsigntemplatepackageGetListV1EOrderByEnum[keyof typeof EzsigntemplatepackageGetListV1EOrderByEnum];
