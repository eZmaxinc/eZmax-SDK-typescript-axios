/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { CommonResponseErrorEzsignformValidation } from '../model';
// @ts-ignore
import type { CommonResponseErrorSTemporaryFileUrl } from '../model';
// @ts-ignore
import type { EzsigndocumentApplyEzsigntemplateV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentApplyEzsigntemplateV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentApplyEzsigntemplateV2Request } from '../model';
// @ts-ignore
import type { EzsigndocumentApplyEzsigntemplateV2Response } from '../model';
// @ts-ignore
import type { EzsigndocumentApplyEzsigntemplateglobalV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentApplyEzsigntemplateglobalV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentCreateEzsignelementsPositionedByWordV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentCreateEzsignelementsPositionedByWordV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentCreateObjectV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentCreateObjectV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentCreateObjectV2Request } from '../model';
// @ts-ignore
import type { EzsigndocumentCreateObjectV2Response } from '../model';
// @ts-ignore
import type { EzsigndocumentCreateObjectV3Request } from '../model';
// @ts-ignore
import type { EzsigndocumentCreateObjectV3Response } from '../model';
// @ts-ignore
import type { EzsigndocumentDeclineToSignV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentDeclineToSignV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentDeleteObjectV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentEditEzsignannotationsV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentEditEzsignannotationsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentEditEzsignformfieldgroupsV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentEditEzsignformfieldgroupsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentEditEzsignsignaturesV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentEditEzsignsignaturesV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentEditObjectV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentEditObjectV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentEndPrematurelyV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentExtractTextV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentExtractTextV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentFlattenV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetActionableElementsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetAttachmentsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetCompletedElementsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetDownloadUrlV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetEzsignannotationsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetEzsigndiscussionsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetEzsignformfieldgroupsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetEzsignpagesV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetEzsignsignaturesAutomaticV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetEzsignsignaturesV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetFormDataV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetObjectV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetObjectV2Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetTemporaryProofV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentGetWordsPositionsV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentGetWordsPositionsV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentPatchObjectV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentPatchObjectV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentSubmitEzsignformV1Request } from '../model';
// @ts-ignore
import type { EzsigndocumentSubmitEzsignformV1Response } from '../model';
// @ts-ignore
import type { EzsigndocumentUnsendV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectEzsigndocumentApi - axios parameter creator
 * @export
 */
export const ObjectEzsigndocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \"E\" to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplate to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateV1: async (pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: EzsigndocumentApplyEzsigntemplateV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentApplyEzsigntemplateV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is not null or undefined
            assertParamExists('ezsigndocumentApplyEzsigntemplateV1', 'ezsigndocumentApplyEzsigntemplateV1Request', ezsigndocumentApplyEzsigntemplateV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentApplyEzsigntemplateV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplate to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateV2Request} ezsigndocumentApplyEzsigntemplateV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateV2: async (pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV2Request: EzsigndocumentApplyEzsigntemplateV2Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentApplyEzsigntemplateV2', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' is not null or undefined
            assertParamExists('ezsigndocumentApplyEzsigntemplateV2', 'ezsigndocumentApplyEzsigntemplateV2Request', ezsigndocumentApplyEzsigntemplateV2Request)
            const localVarPath = `/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentApplyEzsigntemplateV2Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplateglobal to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateglobalV1Request} ezsigndocumentApplyEzsigntemplateglobalV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateglobalV1: async (pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateglobalV1Request: EzsigndocumentApplyEzsigntemplateglobalV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentApplyEzsigntemplateglobalV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentApplyEzsigntemplateglobalV1Request' is not null or undefined
            assertParamExists('ezsigndocumentApplyEzsigntemplateglobalV1', 'ezsigndocumentApplyEzsigntemplateglobalV1Request', ezsigndocumentApplyEzsigntemplateglobalV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplateglobal`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentApplyEzsigntemplateglobalV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
         * @summary Create multiple Ezsignsignatures/Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentCreateEzsignelementsPositionedByWordV1Request} ezsigndocumentCreateEzsignelementsPositionedByWordV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentCreateEzsignelementsPositionedByWordV1: async (pkiEzsigndocumentID: number, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request: EzsigndocumentCreateEzsignelementsPositionedByWordV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentCreateEzsignelementsPositionedByWordV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentCreateEzsignelementsPositionedByWordV1Request' is not null or undefined
            assertParamExists('ezsigndocumentCreateEzsignelementsPositionedByWordV1', 'ezsigndocumentCreateEzsignelementsPositionedByWordV1Request', ezsigndocumentCreateEzsignelementsPositionedByWordV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/createEzsignelementsPositionedByWord`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsigndocument
         * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV1: async (ezsigndocumentCreateObjectV1Request: Array<EzsigndocumentCreateObjectV1Request>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigndocumentCreateObjectV1Request' is not null or undefined
            assertParamExists('ezsigndocumentCreateObjectV1', 'ezsigndocumentCreateObjectV1Request', ezsigndocumentCreateObjectV1Request)
            const localVarPath = `/1/object/ezsigndocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigndocument
         * @param {EzsigndocumentCreateObjectV2Request} ezsigndocumentCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV2: async (ezsigndocumentCreateObjectV2Request: EzsigndocumentCreateObjectV2Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigndocumentCreateObjectV2Request' is not null or undefined
            assertParamExists('ezsigndocumentCreateObjectV2', 'ezsigndocumentCreateObjectV2Request', ezsigndocumentCreateObjectV2Request)
            const localVarPath = `/2/object/ezsigndocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentCreateObjectV2Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigndocument
         * @param {EzsigndocumentCreateObjectV3Request} ezsigndocumentCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV3: async (ezsigndocumentCreateObjectV3Request: EzsigndocumentCreateObjectV3Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ezsigndocumentCreateObjectV3Request' is not null or undefined
            assertParamExists('ezsigndocumentCreateObjectV3', 'ezsigndocumentCreateObjectV3Request', ezsigndocumentCreateObjectV3Request)
            const localVarPath = `/3/object/ezsigndocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentCreateObjectV3Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Decline to sign
         * @summary Decline to sign
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentDeclineToSignV1Request} ezsigndocumentDeclineToSignV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentDeclineToSignV1: async (pkiEzsigndocumentID: number, ezsigndocumentDeclineToSignV1Request: EzsigndocumentDeclineToSignV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentDeclineToSignV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentDeclineToSignV1Request' is not null or undefined
            assertParamExists('ezsigndocumentDeclineToSignV1', 'ezsigndocumentDeclineToSignV1Request', ezsigndocumentDeclineToSignV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/declineToSign`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentDeclineToSignV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentDeleteObjectV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentDeleteObjectV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignannotations at the same time.
         * @summary Edit multiple Ezsignannotations
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignannotationsV1Request} ezsigndocumentEditEzsignannotationsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEditEzsignannotationsV1: async (pkiEzsigndocumentID: number, ezsigndocumentEditEzsignannotationsV1Request: EzsigndocumentEditEzsignannotationsV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentEditEzsignannotationsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentEditEzsignannotationsV1Request' is not null or undefined
            assertParamExists('ezsigndocumentEditEzsignannotationsV1', 'ezsigndocumentEditEzsignannotationsV1Request', ezsigndocumentEditEzsignannotationsV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignannotations`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentEditEzsignannotationsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
         * @summary Edit multiple Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignformfieldgroupsV1Request} ezsigndocumentEditEzsignformfieldgroupsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEditEzsignformfieldgroupsV1: async (pkiEzsigndocumentID: number, ezsigndocumentEditEzsignformfieldgroupsV1Request: EzsigndocumentEditEzsignformfieldgroupsV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentEditEzsignformfieldgroupsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentEditEzsignformfieldgroupsV1Request' is not null or undefined
            assertParamExists('ezsigndocumentEditEzsignformfieldgroupsV1', 'ezsigndocumentEditEzsignformfieldgroupsV1Request', ezsigndocumentEditEzsignformfieldgroupsV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignformfieldgroups`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentEditEzsignformfieldgroupsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
         * @summary Edit multiple Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignsignaturesV1Request} ezsigndocumentEditEzsignsignaturesV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEditEzsignsignaturesV1: async (pkiEzsigndocumentID: number, ezsigndocumentEditEzsignsignaturesV1Request: EzsigndocumentEditEzsignsignaturesV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentEditEzsignsignaturesV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentEditEzsignsignaturesV1Request' is not null or undefined
            assertParamExists('ezsigndocumentEditEzsignsignaturesV1', 'ezsigndocumentEditEzsignsignaturesV1Request', ezsigndocumentEditEzsignsignaturesV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentEditEzsignsignaturesV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditObjectV1Request} ezsigndocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEditObjectV1: async (pkiEzsigndocumentID: number, ezsigndocumentEditObjectV1Request: EzsigndocumentEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentEditObjectV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentEditObjectV1Request' is not null or undefined
            assertParamExists('ezsigndocumentEditObjectV1', 'ezsigndocumentEditObjectV1Request', ezsigndocumentEditObjectV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * End prematurely an Ezsigndocument when some signatures are still required
         * @summary End prematurely
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEndPrematurelyV1: async (pkiEzsigndocumentID: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentEndPrematurelyV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ezsigndocumentEndPrematurelyV1', 'body', body)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/endPrematurely`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Extract text from Ezsigndocument area
         * @summary Extract text from Ezsigndocument area
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentExtractTextV1Request} ezsigndocumentExtractTextV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentExtractTextV1: async (pkiEzsigndocumentID: number, ezsigndocumentExtractTextV1Request: EzsigndocumentExtractTextV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentExtractTextV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentExtractTextV1Request' is not null or undefined
            assertParamExists('ezsigndocumentExtractTextV1', 'ezsigndocumentExtractTextV1Request', ezsigndocumentExtractTextV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/extractText`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentExtractTextV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
         * @summary Flatten
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentFlattenV1: async (pkiEzsigndocumentID: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentFlattenV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ezsigndocumentFlattenV1', 'body', body)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/flatten`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
         * @summary Retrieve actionable elements for the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetActionableElementsV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetActionableElementsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getActionableElements`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Ezsigndocument\'s Attachments
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetAttachmentsV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetAttachmentsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getAttachments`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
         * @summary Retrieve completed elements for the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetCompletedElementsV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetCompletedElementsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getCompletedElements`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
         * @summary Retrieve a URL to download documents.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetDownloadUrlV1: async (pkiEzsigndocumentID: number, eDocumentType: EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetDownloadUrlV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'eDocumentType' is not null or undefined
            assertParamExists('ezsigndocumentGetDownloadUrlV1', 'eDocumentType', eDocumentType)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)))
                .replace(`{${"eDocumentType"}}`, encodeURIComponent(String(eDocumentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignannotations
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignannotationsV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetEzsignannotationsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignannotations`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsigndiscussions
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsigndiscussionsV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetEzsigndiscussionsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsigndiscussions`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignformfieldgroupsV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetEzsignformfieldgroupsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignformfieldgroups`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignpages
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignpagesV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetEzsignpagesV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
         * @summary Retrieve an existing Ezsigndocument\'s automatic Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignsignaturesAutomaticV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetEzsignsignaturesAutomaticV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignaturesAutomatic`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignsignaturesV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetEzsignsignaturesV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignatures`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Form Data
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetFormDataV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetFormDataV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigndocumentGetObjectV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetObjectV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetObjectV2: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetObjectV2', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/2/object/ezsigndocument/{pkiEzsigndocumentID}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn\'t available until the Ezsigndocument is completed
         * @summary Retrieve the temporary proof
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetTemporaryProofV1: async (pkiEzsigndocumentID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetTemporaryProofV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getTemporaryProof`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve positions X,Y of given words from a Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentGetWordsPositionsV1Request} ezsigndocumentGetWordsPositionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetWordsPositionsV1: async (pkiEzsigndocumentID: number, ezsigndocumentGetWordsPositionsV1Request: EzsigndocumentGetWordsPositionsV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentGetWordsPositionsV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentGetWordsPositionsV1Request' is not null or undefined
            assertParamExists('ezsigndocumentGetWordsPositionsV1', 'ezsigndocumentGetWordsPositionsV1Request', ezsigndocumentGetWordsPositionsV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentGetWordsPositionsV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentPatchObjectV1Request} ezsigndocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentPatchObjectV1: async (pkiEzsigndocumentID: number, ezsigndocumentPatchObjectV1Request: EzsigndocumentPatchObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentPatchObjectV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentPatchObjectV1Request' is not null or undefined
            assertParamExists('ezsigndocumentPatchObjectV1', 'ezsigndocumentPatchObjectV1Request', ezsigndocumentPatchObjectV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentPatchObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PATCH' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit the Ezsignform
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentSubmitEzsignformV1Request} ezsigndocumentSubmitEzsignformV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentSubmitEzsignformV1: async (pkiEzsigndocumentID: number, ezsigndocumentSubmitEzsignformV1Request: EzsigndocumentSubmitEzsignformV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentSubmitEzsignformV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'ezsigndocumentSubmitEzsignformV1Request' is not null or undefined
            assertParamExists('ezsigndocumentSubmitEzsignformV1', 'ezsigndocumentSubmitEzsignformV1Request', ezsigndocumentSubmitEzsignformV1Request)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/submitEzsignform`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ezsigndocumentSubmitEzsignformV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
         * @summary Unsend the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentUnsendV1: async (pkiEzsigndocumentID: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            assertParamExists('ezsigndocumentUnsendV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ezsigndocumentUnsendV1', 'body', body)
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/unsend`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectEzsigndocumentApi - functional programming interface
 * @export
 */
export const ObjectEzsigndocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectEzsigndocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \"E\" to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplate to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: EzsigndocumentApplyEzsigntemplateV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentApplyEzsigntemplateV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentApplyEzsigntemplateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplate to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateV2Request} ezsigndocumentApplyEzsigntemplateV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentApplyEzsigntemplateV2(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV2Request: EzsigndocumentApplyEzsigntemplateV2Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentApplyEzsigntemplateV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentApplyEzsigntemplateV2(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentApplyEzsigntemplateV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplateglobal to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateglobalV1Request} ezsigndocumentApplyEzsigntemplateglobalV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentApplyEzsigntemplateglobalV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateglobalV1Request: EzsigndocumentApplyEzsigntemplateglobalV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentApplyEzsigntemplateglobalV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentApplyEzsigntemplateglobalV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateglobalV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentApplyEzsigntemplateglobalV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
         * @summary Create multiple Ezsignsignatures/Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentCreateEzsignelementsPositionedByWordV1Request} ezsigndocumentCreateEzsignelementsPositionedByWordV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentCreateEzsignelementsPositionedByWordV1(pkiEzsigndocumentID: number, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request: EzsigndocumentCreateEzsignelementsPositionedByWordV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentCreateEzsignelementsPositionedByWordV1(pkiEzsigndocumentID, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentCreateEzsignelementsPositionedByWordV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsigndocument
         * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request: Array<EzsigndocumentCreateObjectV1Request>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigndocument
         * @param {EzsigndocumentCreateObjectV2Request} ezsigndocumentCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsigndocumentCreateObjectV2(ezsigndocumentCreateObjectV2Request: EzsigndocumentCreateObjectV2Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentCreateObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentCreateObjectV2(ezsigndocumentCreateObjectV2Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentCreateObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigndocument
         * @param {EzsigndocumentCreateObjectV3Request} ezsigndocumentCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentCreateObjectV3(ezsigndocumentCreateObjectV3Request: EzsigndocumentCreateObjectV3Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentCreateObjectV3Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentCreateObjectV3(ezsigndocumentCreateObjectV3Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentCreateObjectV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Decline to sign
         * @summary Decline to sign
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentDeclineToSignV1Request} ezsigndocumentDeclineToSignV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentDeclineToSignV1(pkiEzsigndocumentID: number, ezsigndocumentDeclineToSignV1Request: EzsigndocumentDeclineToSignV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentDeclineToSignV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentDeclineToSignV1(pkiEzsigndocumentID, ezsigndocumentDeclineToSignV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentDeclineToSignV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentDeleteObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignannotations at the same time.
         * @summary Edit multiple Ezsignannotations
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignannotationsV1Request} ezsigndocumentEditEzsignannotationsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentEditEzsignannotationsV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignannotationsV1Request: EzsigndocumentEditEzsignannotationsV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentEditEzsignannotationsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentEditEzsignannotationsV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignannotationsV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentEditEzsignannotationsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
         * @summary Edit multiple Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignformfieldgroupsV1Request} ezsigndocumentEditEzsignformfieldgroupsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentEditEzsignformfieldgroupsV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignformfieldgroupsV1Request: EzsigndocumentEditEzsignformfieldgroupsV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentEditEzsignformfieldgroupsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentEditEzsignformfieldgroupsV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignformfieldgroupsV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentEditEzsignformfieldgroupsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
         * @summary Edit multiple Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignsignaturesV1Request} ezsigndocumentEditEzsignsignaturesV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentEditEzsignsignaturesV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignsignaturesV1Request: EzsigndocumentEditEzsignsignaturesV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentEditEzsignsignaturesV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentEditEzsignsignaturesV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignsignaturesV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentEditEzsignsignaturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditObjectV1Request} ezsigndocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentEditObjectV1(pkiEzsigndocumentID: number, ezsigndocumentEditObjectV1Request: EzsigndocumentEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentEditObjectV1(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * End prematurely an Ezsigndocument when some signatures are still required
         * @summary End prematurely
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentEndPrematurelyV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentEndPrematurelyV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentEndPrematurelyV1(pkiEzsigndocumentID, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentEndPrematurelyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Extract text from Ezsigndocument area
         * @summary Extract text from Ezsigndocument area
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentExtractTextV1Request} ezsigndocumentExtractTextV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentExtractTextV1(pkiEzsigndocumentID: number, ezsigndocumentExtractTextV1Request: EzsigndocumentExtractTextV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentExtractTextV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentExtractTextV1(pkiEzsigndocumentID, ezsigndocumentExtractTextV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentExtractTextV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
         * @summary Flatten
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentFlattenV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentFlattenV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentFlattenV1(pkiEzsigndocumentID, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentFlattenV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
         * @summary Retrieve actionable elements for the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetActionableElementsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetActionableElementsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetActionableElementsV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetActionableElementsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Ezsigndocument\'s Attachments
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetAttachmentsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetAttachmentsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetAttachmentsV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetAttachmentsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
         * @summary Retrieve completed elements for the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetCompletedElementsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetCompletedElementsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetCompletedElementsV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetCompletedElementsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
         * @summary Retrieve a URL to download documents.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID: number, eDocumentType: EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetDownloadUrlV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetDownloadUrlV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignannotations
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetEzsignannotationsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetEzsignannotationsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetEzsignannotationsV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetEzsignannotationsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsigndiscussions
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetEzsigndiscussionsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetEzsigndiscussionsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetEzsigndiscussionsV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetEzsigndiscussionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetEzsignformfieldgroupsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetEzsignformfieldgroupsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetEzsignformfieldgroupsV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetEzsignformfieldgroupsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignpages
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetEzsignpagesV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetEzsignpagesV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetEzsignpagesV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetEzsignpagesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
         * @summary Retrieve an existing Ezsigndocument\'s automatic Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetEzsignsignaturesAutomaticV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetEzsignsignaturesAutomaticV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetEzsignsignaturesAutomaticV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetEzsignsignaturesAutomaticV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetEzsignsignaturesV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetEzsignsignaturesV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetEzsignsignaturesV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetEzsignsignaturesV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Form Data
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetFormDataV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetFormDataV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetFormDataV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetFormDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ezsigndocumentGetObjectV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetObjectV2(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetObjectV2(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn\'t available until the Ezsigndocument is completed
         * @summary Retrieve the temporary proof
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetTemporaryProofV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetTemporaryProofV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetTemporaryProofV1(pkiEzsigndocumentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetTemporaryProofV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve positions X,Y of given words from a Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentGetWordsPositionsV1Request} ezsigndocumentGetWordsPositionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentGetWordsPositionsV1(pkiEzsigndocumentID: number, ezsigndocumentGetWordsPositionsV1Request: EzsigndocumentGetWordsPositionsV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetWordsPositionsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentGetWordsPositionsV1(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentGetWordsPositionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentPatchObjectV1Request} ezsigndocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentPatchObjectV1(pkiEzsigndocumentID: number, ezsigndocumentPatchObjectV1Request: EzsigndocumentPatchObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentPatchObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentPatchObjectV1(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentPatchObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Submit the Ezsignform
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentSubmitEzsignformV1Request} ezsigndocumentSubmitEzsignformV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentSubmitEzsignformV1(pkiEzsigndocumentID: number, ezsigndocumentSubmitEzsignformV1Request: EzsigndocumentSubmitEzsignformV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentSubmitEzsignformV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentSubmitEzsignformV1(pkiEzsigndocumentID, ezsigndocumentSubmitEzsignformV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentSubmitEzsignformV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
         * @summary Unsend the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ezsigndocumentUnsendV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentUnsendV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ezsigndocumentUnsendV1(pkiEzsigndocumentID, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectEzsigndocumentApi.ezsigndocumentUnsendV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectEzsigndocumentApi - factory interface
 * @export
 */
export const ObjectEzsigndocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectEzsigndocumentApiFp(configuration)
    return {
        /**
         * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \"E\" to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplate to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: EzsigndocumentApplyEzsigntemplateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentApplyEzsigntemplateV1Response> {
            return localVarFp.ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplate to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateV2Request} ezsigndocumentApplyEzsigntemplateV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateV2(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV2Request: EzsigndocumentApplyEzsigntemplateV2Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentApplyEzsigntemplateV2Response> {
            return localVarFp.ezsigndocumentApplyEzsigntemplateV2(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsigntemplateglobal to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentApplyEzsigntemplateglobalV1Request} ezsigndocumentApplyEzsigntemplateglobalV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateglobalV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateglobalV1Request: EzsigndocumentApplyEzsigntemplateglobalV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentApplyEzsigntemplateglobalV1Response> {
            return localVarFp.ezsigndocumentApplyEzsigntemplateglobalV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateglobalV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
         * @summary Create multiple Ezsignsignatures/Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentCreateEzsignelementsPositionedByWordV1Request} ezsigndocumentCreateEzsignelementsPositionedByWordV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentCreateEzsignelementsPositionedByWordV1(pkiEzsigndocumentID: number, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request: EzsigndocumentCreateEzsignelementsPositionedByWordV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response> {
            return localVarFp.ezsigndocumentCreateEzsignelementsPositionedByWordV1(pkiEzsigndocumentID, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsigndocument
         * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request: Array<EzsigndocumentCreateObjectV1Request>, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentCreateObjectV1Response> {
            return localVarFp.ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigndocument
         * @param {EzsigndocumentCreateObjectV2Request} ezsigndocumentCreateObjectV2Request 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV2(ezsigndocumentCreateObjectV2Request: EzsigndocumentCreateObjectV2Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentCreateObjectV2Response> {
            return localVarFp.ezsigndocumentCreateObjectV2(ezsigndocumentCreateObjectV2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Ezsigndocument
         * @param {EzsigndocumentCreateObjectV3Request} ezsigndocumentCreateObjectV3Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV3(ezsigndocumentCreateObjectV3Request: EzsigndocumentCreateObjectV3Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentCreateObjectV3Response> {
            return localVarFp.ezsigndocumentCreateObjectV3(ezsigndocumentCreateObjectV3Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Decline to sign
         * @summary Decline to sign
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentDeclineToSignV1Request} ezsigndocumentDeclineToSignV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentDeclineToSignV1(pkiEzsigndocumentID: number, ezsigndocumentDeclineToSignV1Request: EzsigndocumentDeclineToSignV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentDeclineToSignV1Response> {
            return localVarFp.ezsigndocumentDeclineToSignV1(pkiEzsigndocumentID, ezsigndocumentDeclineToSignV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentDeleteObjectV1Response> {
            return localVarFp.ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignannotations at the same time.
         * @summary Edit multiple Ezsignannotations
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignannotationsV1Request} ezsigndocumentEditEzsignannotationsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEditEzsignannotationsV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignannotationsV1Request: EzsigndocumentEditEzsignannotationsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentEditEzsignannotationsV1Response> {
            return localVarFp.ezsigndocumentEditEzsignannotationsV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignannotationsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
         * @summary Edit multiple Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignformfieldgroupsV1Request} ezsigndocumentEditEzsignformfieldgroupsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEditEzsignformfieldgroupsV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignformfieldgroupsV1Request: EzsigndocumentEditEzsignformfieldgroupsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentEditEzsignformfieldgroupsV1Response> {
            return localVarFp.ezsigndocumentEditEzsignformfieldgroupsV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignformfieldgroupsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
         * @summary Edit multiple Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditEzsignsignaturesV1Request} ezsigndocumentEditEzsignsignaturesV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEditEzsignsignaturesV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignsignaturesV1Request: EzsigndocumentEditEzsignsignaturesV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentEditEzsignsignaturesV1Response> {
            return localVarFp.ezsigndocumentEditEzsignsignaturesV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignsignaturesV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentEditObjectV1Request} ezsigndocumentEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEditObjectV1(pkiEzsigndocumentID: number, ezsigndocumentEditObjectV1Request: EzsigndocumentEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentEditObjectV1Response> {
            return localVarFp.ezsigndocumentEditObjectV1(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * End prematurely an Ezsigndocument when some signatures are still required
         * @summary End prematurely
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentEndPrematurelyV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentEndPrematurelyV1Response> {
            return localVarFp.ezsigndocumentEndPrematurelyV1(pkiEzsigndocumentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Extract text from Ezsigndocument area
         * @summary Extract text from Ezsigndocument area
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentExtractTextV1Request} ezsigndocumentExtractTextV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentExtractTextV1(pkiEzsigndocumentID: number, ezsigndocumentExtractTextV1Request: EzsigndocumentExtractTextV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentExtractTextV1Response> {
            return localVarFp.ezsigndocumentExtractTextV1(pkiEzsigndocumentID, ezsigndocumentExtractTextV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
         * @summary Flatten
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentFlattenV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentFlattenV1Response> {
            return localVarFp.ezsigndocumentFlattenV1(pkiEzsigndocumentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
         * @summary Retrieve actionable elements for the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetActionableElementsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetActionableElementsV1Response> {
            return localVarFp.ezsigndocumentGetActionableElementsV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Ezsigndocument\'s Attachments
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetAttachmentsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetAttachmentsV1Response> {
            return localVarFp.ezsigndocumentGetAttachmentsV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
         * @summary Retrieve completed elements for the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetCompletedElementsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetCompletedElementsV1Response> {
            return localVarFp.ezsigndocumentGetCompletedElementsV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
         * @summary Retrieve a URL to download documents.
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID: number, eDocumentType: EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetDownloadUrlV1Response> {
            return localVarFp.ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignannotations
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignannotationsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetEzsignannotationsV1Response> {
            return localVarFp.ezsigndocumentGetEzsignannotationsV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsigndiscussions
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsigndiscussionsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetEzsigndiscussionsV1Response> {
            return localVarFp.ezsigndocumentGetEzsigndiscussionsV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignformfieldgroups
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignformfieldgroupsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetEzsignformfieldgroupsV1Response> {
            return localVarFp.ezsigndocumentGetEzsignformfieldgroupsV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignpages
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignpagesV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetEzsignpagesV1Response> {
            return localVarFp.ezsigndocumentGetEzsignpagesV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
         * @summary Retrieve an existing Ezsigndocument\'s automatic Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignsignaturesAutomaticV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetEzsignsignaturesAutomaticV1Response> {
            return localVarFp.ezsigndocumentGetEzsignsignaturesAutomaticV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Ezsignsignatures
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetEzsignsignaturesV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetEzsignsignaturesV1Response> {
            return localVarFp.ezsigndocumentGetEzsignsignaturesV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument\'s Form Data
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetFormDataV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetFormDataV1Response> {
            return localVarFp.ezsigndocumentGetFormDataV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ezsigndocumentGetObjectV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetObjectV1Response> {
            return localVarFp.ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetObjectV2(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetObjectV2Response> {
            return localVarFp.ezsigndocumentGetObjectV2(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn\'t available until the Ezsigndocument is completed
         * @summary Retrieve the temporary proof
         * @param {number} pkiEzsigndocumentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetTemporaryProofV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetTemporaryProofV1Response> {
            return localVarFp.ezsigndocumentGetTemporaryProofV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve positions X,Y of given words from a Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentGetWordsPositionsV1Request} ezsigndocumentGetWordsPositionsV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetWordsPositionsV1(pkiEzsigndocumentID: number, ezsigndocumentGetWordsPositionsV1Request: EzsigndocumentGetWordsPositionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentGetWordsPositionsV1Response> {
            return localVarFp.ezsigndocumentGetWordsPositionsV1(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentPatchObjectV1Request} ezsigndocumentPatchObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentPatchObjectV1(pkiEzsigndocumentID: number, ezsigndocumentPatchObjectV1Request: EzsigndocumentPatchObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentPatchObjectV1Response> {
            return localVarFp.ezsigndocumentPatchObjectV1(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit the Ezsignform
         * @param {number} pkiEzsigndocumentID 
         * @param {EzsigndocumentSubmitEzsignformV1Request} ezsigndocumentSubmitEzsignformV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentSubmitEzsignformV1(pkiEzsigndocumentID: number, ezsigndocumentSubmitEzsignformV1Request: EzsigndocumentSubmitEzsignformV1Request, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentSubmitEzsignformV1Response> {
            return localVarFp.ezsigndocumentSubmitEzsignformV1(pkiEzsigndocumentID, ezsigndocumentSubmitEzsignformV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
         * @summary Unsend the Ezsigndocument
         * @param {number} pkiEzsigndocumentID 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentUnsendV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig): AxiosPromise<EzsigndocumentUnsendV1Response> {
            return localVarFp.ezsigndocumentUnsendV1(pkiEzsigndocumentID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectEzsigndocumentApi - object-oriented interface
 * @export
 * @class ObjectEzsigndocumentApi
 * @extends {BaseAPI}
 */
export class ObjectEzsigndocumentApi extends BaseAPI {
    /**
     * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \"E\" to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsigntemplate to the Ezsigndocument.
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: EzsigndocumentApplyEzsigntemplateV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsigntemplate to the Ezsigndocument.
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentApplyEzsigntemplateV2Request} ezsigndocumentApplyEzsigntemplateV2Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentApplyEzsigntemplateV2(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV2Request: EzsigndocumentApplyEzsigntemplateV2Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentApplyEzsigntemplateV2(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsigntemplateglobal to the Ezsigndocument.
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentApplyEzsigntemplateglobalV1Request} ezsigndocumentApplyEzsigntemplateglobalV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentApplyEzsigntemplateglobalV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateglobalV1Request: EzsigndocumentApplyEzsigntemplateglobalV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentApplyEzsigntemplateglobalV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateglobalV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
     * @summary Create multiple Ezsignsignatures/Ezsignformfieldgroups
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentCreateEzsignelementsPositionedByWordV1Request} ezsigndocumentCreateEzsignelementsPositionedByWordV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentCreateEzsignelementsPositionedByWordV1(pkiEzsigndocumentID: number, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request: EzsigndocumentCreateEzsignelementsPositionedByWordV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentCreateEzsignelementsPositionedByWordV1(pkiEzsigndocumentID, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @summary Create a new Ezsigndocument
     * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request: Array<EzsigndocumentCreateObjectV1Request>, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsigndocument
     * @param {EzsigndocumentCreateObjectV2Request} ezsigndocumentCreateObjectV2Request 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentCreateObjectV2(ezsigndocumentCreateObjectV2Request: EzsigndocumentCreateObjectV2Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentCreateObjectV2(ezsigndocumentCreateObjectV2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Ezsigndocument
     * @param {EzsigndocumentCreateObjectV3Request} ezsigndocumentCreateObjectV3Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentCreateObjectV3(ezsigndocumentCreateObjectV3Request: EzsigndocumentCreateObjectV3Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentCreateObjectV3(ezsigndocumentCreateObjectV3Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Decline to sign
     * @summary Decline to sign
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentDeclineToSignV1Request} ezsigndocumentDeclineToSignV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentDeclineToSignV1(pkiEzsigndocumentID: number, ezsigndocumentDeclineToSignV1Request: EzsigndocumentDeclineToSignV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentDeclineToSignV1(pkiEzsigndocumentID, ezsigndocumentDeclineToSignV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Ezsignannotations at the same time.
     * @summary Edit multiple Ezsignannotations
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentEditEzsignannotationsV1Request} ezsigndocumentEditEzsignannotationsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentEditEzsignannotationsV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignannotationsV1Request: EzsigndocumentEditEzsignannotationsV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentEditEzsignannotationsV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignannotationsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
     * @summary Edit multiple Ezsignformfieldgroups
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentEditEzsignformfieldgroupsV1Request} ezsigndocumentEditEzsignformfieldgroupsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentEditEzsignformfieldgroupsV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignformfieldgroupsV1Request: EzsigndocumentEditEzsignformfieldgroupsV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentEditEzsignformfieldgroupsV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignformfieldgroupsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
     * @summary Edit multiple Ezsignsignatures
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentEditEzsignsignaturesV1Request} ezsigndocumentEditEzsignsignaturesV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentEditEzsignsignaturesV1(pkiEzsigndocumentID: number, ezsigndocumentEditEzsignsignaturesV1Request: EzsigndocumentEditEzsignsignaturesV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentEditEzsignsignaturesV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignsignaturesV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentEditObjectV1Request} ezsigndocumentEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentEditObjectV1(pkiEzsigndocumentID: number, ezsigndocumentEditObjectV1Request: EzsigndocumentEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentEditObjectV1(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * End prematurely an Ezsigndocument when some signatures are still required
     * @summary End prematurely
     * @param {number} pkiEzsigndocumentID 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentEndPrematurelyV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentEndPrematurelyV1(pkiEzsigndocumentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Extract text from Ezsigndocument area
     * @summary Extract text from Ezsigndocument area
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentExtractTextV1Request} ezsigndocumentExtractTextV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentExtractTextV1(pkiEzsigndocumentID: number, ezsigndocumentExtractTextV1Request: EzsigndocumentExtractTextV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentExtractTextV1(pkiEzsigndocumentID, ezsigndocumentExtractTextV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
     * @summary Flatten
     * @param {number} pkiEzsigndocumentID 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentFlattenV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentFlattenV1(pkiEzsigndocumentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
     * @summary Retrieve actionable elements for the Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetActionableElementsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetActionableElementsV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Ezsigndocument\'s Attachments
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetAttachmentsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetAttachmentsV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
     * @summary Retrieve completed elements for the Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetCompletedElementsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetCompletedElementsV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @summary Retrieve a URL to download documents.
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID: number, eDocumentType: EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument\'s Ezsignannotations
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetEzsignannotationsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetEzsignannotationsV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument\'s Ezsigndiscussions
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetEzsigndiscussionsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetEzsigndiscussionsV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument\'s Ezsignformfieldgroups
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetEzsignformfieldgroupsV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetEzsignformfieldgroupsV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument\'s Ezsignpages
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetEzsignpagesV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetEzsignpagesV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @summary Retrieve an existing Ezsigndocument\'s automatic Ezsignsignatures
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetEzsignsignaturesAutomaticV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetEzsignsignaturesAutomaticV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument\'s Ezsignsignatures
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetEzsignsignaturesV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetEzsignsignaturesV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument\'s Form Data
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetFormDataV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetFormDataV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetObjectV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetObjectV2(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetObjectV2(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn\'t available until the Ezsigndocument is completed
     * @summary Retrieve the temporary proof
     * @param {number} pkiEzsigndocumentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetTemporaryProofV1(pkiEzsigndocumentID: number, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetTemporaryProofV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve positions X,Y of given words from a Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentGetWordsPositionsV1Request} ezsigndocumentGetWordsPositionsV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentGetWordsPositionsV1(pkiEzsigndocumentID: number, ezsigndocumentGetWordsPositionsV1Request: EzsigndocumentGetWordsPositionsV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetWordsPositionsV1(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentPatchObjectV1Request} ezsigndocumentPatchObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentPatchObjectV1(pkiEzsigndocumentID: number, ezsigndocumentPatchObjectV1Request: EzsigndocumentPatchObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentPatchObjectV1(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit the Ezsignform
     * @param {number} pkiEzsigndocumentID 
     * @param {EzsigndocumentSubmitEzsignformV1Request} ezsigndocumentSubmitEzsignformV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentSubmitEzsignformV1(pkiEzsigndocumentID: number, ezsigndocumentSubmitEzsignformV1Request: EzsigndocumentSubmitEzsignformV1Request, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentSubmitEzsignformV1(pkiEzsigndocumentID, ezsigndocumentSubmitEzsignformV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
     * @summary Unsend the Ezsigndocument
     * @param {number} pkiEzsigndocumentID 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    public ezsigndocumentUnsendV1(pkiEzsigndocumentID: number, body: object, options?: RawAxiosRequestConfig) {
        return ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentUnsendV1(pkiEzsigndocumentID, body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum = {
    Initial: 'Initial',
    SignatureReady: 'SignatureReady',
    Signed: 'Signed',
    Proof: 'Proof',
    Proofdocument: 'Proofdocument'
} as const;
export type EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum = typeof EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum[keyof typeof EzsigndocumentGetDownloadUrlV1EDocumentTypeEnum];
