/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { CommunicationGetCountV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ModuleCommunicationApi - axios parameter creator
 * @export
 */
export const ModuleCommunicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve Communication count
         * @param {'Ezsignfolder'} eCommunicationObjecttype The object type for the Communication
         * @param {number} [pkiEzsignfolderID] The unique ID of the Ezsignfolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communicationGetCommunicationCountV1: async (eCommunicationObjecttype: 'Ezsignfolder', pkiEzsignfolderID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eCommunicationObjecttype' is not null or undefined
            assertParamExists('communicationGetCommunicationCountV1', 'eCommunicationObjecttype', eCommunicationObjecttype)
            const localVarPath = `/1/module/communication/getCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eCommunicationObjecttype !== undefined) {
                localVarQueryParameter['eCommunicationObjecttype'] = eCommunicationObjecttype;
            }

            if (pkiEzsignfolderID !== undefined) {
                localVarQueryParameter['pkiEzsignfolderID'] = pkiEzsignfolderID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModuleCommunicationApi - functional programming interface
 * @export
 */
export const ModuleCommunicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModuleCommunicationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve Communication count
         * @param {'Ezsignfolder'} eCommunicationObjecttype The object type for the Communication
         * @param {number} [pkiEzsignfolderID] The unique ID of the Ezsignfolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async communicationGetCommunicationCountV1(eCommunicationObjecttype: 'Ezsignfolder', pkiEzsignfolderID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationGetCountV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.communicationGetCommunicationCountV1(eCommunicationObjecttype, pkiEzsignfolderID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModuleCommunicationApi - factory interface
 * @export
 */
export const ModuleCommunicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModuleCommunicationApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve Communication count
         * @param {'Ezsignfolder'} eCommunicationObjecttype The object type for the Communication
         * @param {number} [pkiEzsignfolderID] The unique ID of the Ezsignfolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communicationGetCommunicationCountV1(eCommunicationObjecttype: 'Ezsignfolder', pkiEzsignfolderID?: number, options?: any): AxiosPromise<CommunicationGetCountV1Response> {
            return localVarFp.communicationGetCommunicationCountV1(eCommunicationObjecttype, pkiEzsignfolderID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModuleCommunicationApi - object-oriented interface
 * @export
 * @class ModuleCommunicationApi
 * @extends {BaseAPI}
 */
export class ModuleCommunicationApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve Communication count
     * @param {'Ezsignfolder'} eCommunicationObjecttype The object type for the Communication
     * @param {number} [pkiEzsignfolderID] The unique ID of the Ezsignfolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleCommunicationApi
     */
    public communicationGetCommunicationCountV1(eCommunicationObjecttype: 'Ezsignfolder', pkiEzsignfolderID?: number, options?: AxiosRequestConfig) {
        return ModuleCommunicationApiFp(this.configuration).communicationGetCommunicationCountV1(eCommunicationObjecttype, pkiEzsignfolderID, options).then((request) => request(this.axios, this.basePath));
    }
}
