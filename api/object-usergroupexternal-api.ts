/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import type { UsergroupexternalCreateObjectV1Request } from '../model';
// @ts-ignore
import type { UsergroupexternalCreateObjectV1Response } from '../model';
// @ts-ignore
import type { UsergroupexternalDeleteObjectV1Response } from '../model';
// @ts-ignore
import type { UsergroupexternalEditObjectV1Request } from '../model';
// @ts-ignore
import type { UsergroupexternalEditObjectV1Response } from '../model';
// @ts-ignore
import type { UsergroupexternalGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { UsergroupexternalGetListV1Response } from '../model';
// @ts-ignore
import type { UsergroupexternalGetObjectV2Response } from '../model';
// @ts-ignore
import type { UsergroupexternalGetUsergroupexternalmembershipsV1Response } from '../model';
// @ts-ignore
import type { UsergroupexternalGetUsergroupsV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectUsergroupexternalApi - axios parameter creator
 * @export
 */
export const ObjectUsergroupexternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Usergroupexternal
         * @param {UsergroupexternalCreateObjectV1Request} usergroupexternalCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalCreateObjectV1: async (usergroupexternalCreateObjectV1Request: UsergroupexternalCreateObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usergroupexternalCreateObjectV1Request' is not null or undefined
            assertParamExists('usergroupexternalCreateObjectV1', 'usergroupexternalCreateObjectV1Request', usergroupexternalCreateObjectV1Request)
            const localVarPath = `/1/object/usergroupexternal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usergroupexternalCreateObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'POST' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalDeleteObjectV1: async (pkiUsergroupexternalID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupexternalID' is not null or undefined
            assertParamExists('usergroupexternalDeleteObjectV1', 'pkiUsergroupexternalID', pkiUsergroupexternalID)
            const localVarPath = `/1/object/usergroupexternal/{pkiUsergroupexternalID}`
                .replace(`{${"pkiUsergroupexternalID"}}`, encodeURIComponent(String(pkiUsergroupexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'DELETE' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {UsergroupexternalEditObjectV1Request} usergroupexternalEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalEditObjectV1: async (pkiUsergroupexternalID: number, usergroupexternalEditObjectV1Request: UsergroupexternalEditObjectV1Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupexternalID' is not null or undefined
            assertParamExists('usergroupexternalEditObjectV1', 'pkiUsergroupexternalID', pkiUsergroupexternalID)
            // verify required parameter 'usergroupexternalEditObjectV1Request' is not null or undefined
            assertParamExists('usergroupexternalEditObjectV1', 'usergroupexternalEditObjectV1Request', usergroupexternalEditObjectV1Request)
            const localVarPath = `/1/object/usergroupexternal/{pkiUsergroupexternalID}`
                .replace(`{${"pkiUsergroupexternalID"}}`, encodeURIComponent(String(pkiUsergroupexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usergroupexternalEditObjectV1Request, localVarRequestOptions, configuration)

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'PUT' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of Usergroupexternal to be used in a dropdown or autocomplete control.
         * @summary Retrieve Usergroupexternals and IDs
         * @param {UsergroupexternalGetAutocompleteV2SSelectorEnum} sSelector The type of Usergroupexternals to return
         * @param {UsergroupexternalGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetAutocompleteV2: async (sSelector: UsergroupexternalGetAutocompleteV2SSelectorEnum, eFilterActive?: UsergroupexternalGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('usergroupexternalGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/usergroupexternal/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Usergroupexternal list
         * @param {UsergroupexternalGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetListV1: async (eOrderBy?: UsergroupexternalGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/usergroupexternal/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetObjectV2: async (pkiUsergroupexternalID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupexternalID' is not null or undefined
            assertParamExists('usergroupexternalGetObjectV2', 'pkiUsergroupexternalID', pkiUsergroupexternalID)
            const localVarPath = `/2/object/usergroupexternal/{pkiUsergroupexternalID}`
                .replace(`{${"pkiUsergroupexternalID"}}`, encodeURIComponent(String(pkiUsergroupexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Usergroupexternal\'s Usergroupexternalmemberships
         * @param {number} pkiUsergroupexternalID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetUsergroupexternalmembershipsV1: async (pkiUsergroupexternalID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupexternalID' is not null or undefined
            assertParamExists('usergroupexternalGetUsergroupexternalmembershipsV1', 'pkiUsergroupexternalID', pkiUsergroupexternalID)
            const localVarPath = `/1/object/usergroupexternal/{pkiUsergroupexternalID}/getUsergroupexternalmemberships`
                .replace(`{${"pkiUsergroupexternalID"}}`, encodeURIComponent(String(pkiUsergroupexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Usergroupexternal\'s Usergroups
         * @param {number} pkiUsergroupexternalID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetUsergroupsV1: async (pkiUsergroupexternalID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiUsergroupexternalID' is not null or undefined
            assertParamExists('usergroupexternalGetUsergroupsV1', 'pkiUsergroupexternalID', pkiUsergroupexternalID)
            const localVarPath = `/1/object/usergroupexternal/{pkiUsergroupexternalID}/getUsergroups`
                .replace(`{${"pkiUsergroupexternalID"}}`, encodeURIComponent(String(pkiUsergroupexternalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectUsergroupexternalApi - functional programming interface
 * @export
 */
export const ObjectUsergroupexternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectUsergroupexternalApiAxiosParamCreator(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Usergroupexternal
         * @param {UsergroupexternalCreateObjectV1Request} usergroupexternalCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupexternalCreateObjectV1(usergroupexternalCreateObjectV1Request: UsergroupexternalCreateObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupexternalCreateObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupexternalCreateObjectV1(usergroupexternalCreateObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectUsergroupexternalApi.usergroupexternalCreateObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupexternalDeleteObjectV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupexternalDeleteObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupexternalDeleteObjectV1(pkiUsergroupexternalID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectUsergroupexternalApi.usergroupexternalDeleteObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {UsergroupexternalEditObjectV1Request} usergroupexternalEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupexternalEditObjectV1(pkiUsergroupexternalID: number, usergroupexternalEditObjectV1Request: UsergroupexternalEditObjectV1Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupexternalEditObjectV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupexternalEditObjectV1(pkiUsergroupexternalID, usergroupexternalEditObjectV1Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectUsergroupexternalApi.usergroupexternalEditObjectV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of Usergroupexternal to be used in a dropdown or autocomplete control.
         * @summary Retrieve Usergroupexternals and IDs
         * @param {UsergroupexternalGetAutocompleteV2SSelectorEnum} sSelector The type of Usergroupexternals to return
         * @param {UsergroupexternalGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupexternalGetAutocompleteV2(sSelector: UsergroupexternalGetAutocompleteV2SSelectorEnum, eFilterActive?: UsergroupexternalGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupexternalGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupexternalGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectUsergroupexternalApi.usergroupexternalGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Usergroupexternal list
         * @param {UsergroupexternalGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupexternalGetListV1(eOrderBy?: UsergroupexternalGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupexternalGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupexternalGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectUsergroupexternalApi.usergroupexternalGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupexternalGetObjectV2(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupexternalGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupexternalGetObjectV2(pkiUsergroupexternalID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectUsergroupexternalApi.usergroupexternalGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Usergroupexternal\'s Usergroupexternalmemberships
         * @param {number} pkiUsergroupexternalID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupexternalGetUsergroupexternalmembershipsV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupexternalGetUsergroupexternalmembershipsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupexternalGetUsergroupexternalmembershipsV1(pkiUsergroupexternalID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectUsergroupexternalApi.usergroupexternalGetUsergroupexternalmembershipsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Usergroupexternal\'s Usergroups
         * @param {number} pkiUsergroupexternalID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usergroupexternalGetUsergroupsV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupexternalGetUsergroupsV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usergroupexternalGetUsergroupsV1(pkiUsergroupexternalID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectUsergroupexternalApi.usergroupexternalGetUsergroupsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectUsergroupexternalApi - factory interface
 * @export
 */
export const ObjectUsergroupexternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectUsergroupexternalApiFp(configuration)
    return {
        /**
         * The endpoint allows to create one or many elements at once.
         * @summary Create a new Usergroupexternal
         * @param {UsergroupexternalCreateObjectV1Request} usergroupexternalCreateObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalCreateObjectV1(usergroupexternalCreateObjectV1Request: UsergroupexternalCreateObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UsergroupexternalCreateObjectV1Response> {
            return localVarFp.usergroupexternalCreateObjectV1(usergroupexternalCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalDeleteObjectV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig): AxiosPromise<UsergroupexternalDeleteObjectV1Response> {
            return localVarFp.usergroupexternalDeleteObjectV1(pkiUsergroupexternalID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {UsergroupexternalEditObjectV1Request} usergroupexternalEditObjectV1Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalEditObjectV1(pkiUsergroupexternalID: number, usergroupexternalEditObjectV1Request: UsergroupexternalEditObjectV1Request, options?: RawAxiosRequestConfig): AxiosPromise<UsergroupexternalEditObjectV1Response> {
            return localVarFp.usergroupexternalEditObjectV1(pkiUsergroupexternalID, usergroupexternalEditObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Usergroupexternal to be used in a dropdown or autocomplete control.
         * @summary Retrieve Usergroupexternals and IDs
         * @param {UsergroupexternalGetAutocompleteV2SSelectorEnum} sSelector The type of Usergroupexternals to return
         * @param {UsergroupexternalGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetAutocompleteV2(sSelector: UsergroupexternalGetAutocompleteV2SSelectorEnum, eFilterActive?: UsergroupexternalGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<UsergroupexternalGetAutocompleteV2Response> {
            return localVarFp.usergroupexternalGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Usergroupexternal list
         * @param {UsergroupexternalGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetListV1(eOrderBy?: UsergroupexternalGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<UsergroupexternalGetListV1Response> {
            return localVarFp.usergroupexternalGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Usergroupexternal
         * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetObjectV2(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig): AxiosPromise<UsergroupexternalGetObjectV2Response> {
            return localVarFp.usergroupexternalGetObjectV2(pkiUsergroupexternalID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Usergroupexternal\'s Usergroupexternalmemberships
         * @param {number} pkiUsergroupexternalID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetUsergroupexternalmembershipsV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig): AxiosPromise<UsergroupexternalGetUsergroupexternalmembershipsV1Response> {
            return localVarFp.usergroupexternalGetUsergroupexternalmembershipsV1(pkiUsergroupexternalID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Usergroupexternal\'s Usergroups
         * @param {number} pkiUsergroupexternalID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usergroupexternalGetUsergroupsV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig): AxiosPromise<UsergroupexternalGetUsergroupsV1Response> {
            return localVarFp.usergroupexternalGetUsergroupsV1(pkiUsergroupexternalID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectUsergroupexternalApi - object-oriented interface
 * @export
 * @class ObjectUsergroupexternalApi
 * @extends {BaseAPI}
 */
export class ObjectUsergroupexternalApi extends BaseAPI {
    /**
     * The endpoint allows to create one or many elements at once.
     * @summary Create a new Usergroupexternal
     * @param {UsergroupexternalCreateObjectV1Request} usergroupexternalCreateObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupexternalApi
     */
    public usergroupexternalCreateObjectV1(usergroupexternalCreateObjectV1Request: UsergroupexternalCreateObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectUsergroupexternalApiFp(this.configuration).usergroupexternalCreateObjectV1(usergroupexternalCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing Usergroupexternal
     * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupexternalApi
     */
    public usergroupexternalDeleteObjectV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig) {
        return ObjectUsergroupexternalApiFp(this.configuration).usergroupexternalDeleteObjectV1(pkiUsergroupexternalID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing Usergroupexternal
     * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
     * @param {UsergroupexternalEditObjectV1Request} usergroupexternalEditObjectV1Request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupexternalApi
     */
    public usergroupexternalEditObjectV1(pkiUsergroupexternalID: number, usergroupexternalEditObjectV1Request: UsergroupexternalEditObjectV1Request, options?: RawAxiosRequestConfig) {
        return ObjectUsergroupexternalApiFp(this.configuration).usergroupexternalEditObjectV1(pkiUsergroupexternalID, usergroupexternalEditObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of Usergroupexternal to be used in a dropdown or autocomplete control.
     * @summary Retrieve Usergroupexternals and IDs
     * @param {UsergroupexternalGetAutocompleteV2SSelectorEnum} sSelector The type of Usergroupexternals to return
     * @param {UsergroupexternalGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupexternalApi
     */
    public usergroupexternalGetAutocompleteV2(sSelector: UsergroupexternalGetAutocompleteV2SSelectorEnum, eFilterActive?: UsergroupexternalGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectUsergroupexternalApiFp(this.configuration).usergroupexternalGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Usergroupexternal list
     * @param {UsergroupexternalGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupexternalApi
     */
    public usergroupexternalGetListV1(eOrderBy?: UsergroupexternalGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectUsergroupexternalApiFp(this.configuration).usergroupexternalGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Usergroupexternal
     * @param {number} pkiUsergroupexternalID The unique ID of the Usergroupexternal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupexternalApi
     */
    public usergroupexternalGetObjectV2(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig) {
        return ObjectUsergroupexternalApiFp(this.configuration).usergroupexternalGetObjectV2(pkiUsergroupexternalID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Usergroupexternal\'s Usergroupexternalmemberships
     * @param {number} pkiUsergroupexternalID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupexternalApi
     */
    public usergroupexternalGetUsergroupexternalmembershipsV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig) {
        return ObjectUsergroupexternalApiFp(this.configuration).usergroupexternalGetUsergroupexternalmembershipsV1(pkiUsergroupexternalID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Usergroupexternal\'s Usergroups
     * @param {number} pkiUsergroupexternalID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectUsergroupexternalApi
     */
    public usergroupexternalGetUsergroupsV1(pkiUsergroupexternalID: number, options?: RawAxiosRequestConfig) {
        return ObjectUsergroupexternalApiFp(this.configuration).usergroupexternalGetUsergroupsV1(pkiUsergroupexternalID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UsergroupexternalGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type UsergroupexternalGetAutocompleteV2SSelectorEnum = typeof UsergroupexternalGetAutocompleteV2SSelectorEnum[keyof typeof UsergroupexternalGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const UsergroupexternalGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type UsergroupexternalGetAutocompleteV2EFilterActiveEnum = typeof UsergroupexternalGetAutocompleteV2EFilterActiveEnum[keyof typeof UsergroupexternalGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const UsergroupexternalGetListV1EOrderByEnum = {
    pkiUsergroupexternalID_ASC: 'pkiUsergroupexternalID_ASC',
    pkiUsergroupexternalID_DESC: 'pkiUsergroupexternalID_DESC',
    sUsergroupexternalName_ASC: 'sUsergroupexternalName_ASC',
    sUsergroupexternalName_DESC: 'sUsergroupexternalName_DESC',
    sUsergroupexternalID_ASC: 'sUsergroupexternalID_ASC',
    sUsergroupexternalID_DESC: 'sUsergroupexternalID_DESC'
} as const;
export type UsergroupexternalGetListV1EOrderByEnum = typeof UsergroupexternalGetListV1EOrderByEnum[keyof typeof UsergroupexternalGetListV1EOrderByEnum];
