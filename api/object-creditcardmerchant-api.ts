/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseError } from '../model';
// @ts-ignore
import type { CreditcardmerchantGetAutocompleteV2Response } from '../model';
// @ts-ignore
import type { CreditcardmerchantGetListV1Response } from '../model';
// @ts-ignore
import type { CreditcardmerchantGetObjectV2Response } from '../model';
// @ts-ignore
import type { HeaderAcceptLanguage } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectCreditcardmerchantApi - axios parameter creator
 * @export
 */
export const ObjectCreditcardmerchantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
         * @summary Retrieve Creditcardmerchants and IDs
         * @param {CreditcardmerchantGetAutocompleteV2SSelectorEnum} sSelector The type of Creditcardmerchants to return
         * @param {CreditcardmerchantGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardmerchantGetAutocompleteV2: async (sSelector: CreditcardmerchantGetAutocompleteV2SSelectorEnum, eFilterActive?: CreditcardmerchantGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSelector' is not null or undefined
            assertParamExists('creditcardmerchantGetAutocompleteV2', 'sSelector', sSelector)
            const localVarPath = `/2/object/creditcardmerchant/getAutocomplete/{sSelector}`
                .replace(`{${"sSelector"}}`, encodeURIComponent(String(sSelector)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eFilterActive !== undefined) {
                localVarQueryParameter['eFilterActive'] = eFilterActive;
            }

            if (sQuery !== undefined) {
                localVarQueryParameter['sQuery'] = sQuery;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Creditcardmerchant list
         * @param {CreditcardmerchantGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardmerchantGetListV1: async (eOrderBy?: CreditcardmerchantGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/1/object/creditcardmerchant/getList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (eOrderBy !== undefined) {
                localVarQueryParameter['eOrderBy'] = eOrderBy;
            }

            if (iRowMax !== undefined) {
                localVarQueryParameter['iRowMax'] = iRowMax;
            }

            if (iRowOffset !== undefined) {
                localVarQueryParameter['iRowOffset'] = iRowOffset;
            }

            if (sFilter !== undefined) {
                localVarQueryParameter['sFilter'] = sFilter;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string'
                    ? acceptLanguage
                    : JSON.stringify(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an existing Creditcardmerchant
         * @param {number} pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardmerchantGetObjectV2: async (pkiCreditcardmerchantID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiCreditcardmerchantID' is not null or undefined
            assertParamExists('creditcardmerchantGetObjectV2', 'pkiCreditcardmerchantID', pkiCreditcardmerchantID)
            const localVarPath = `/2/object/creditcardmerchant/{pkiCreditcardmerchantID}`
                .replace(`{${"pkiCreditcardmerchantID"}}`, encodeURIComponent(String(pkiCreditcardmerchantID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectCreditcardmerchantApi - functional programming interface
 * @export
 */
export const ObjectCreditcardmerchantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectCreditcardmerchantApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
         * @summary Retrieve Creditcardmerchants and IDs
         * @param {CreditcardmerchantGetAutocompleteV2SSelectorEnum} sSelector The type of Creditcardmerchants to return
         * @param {CreditcardmerchantGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardmerchantGetAutocompleteV2(sSelector: CreditcardmerchantGetAutocompleteV2SSelectorEnum, eFilterActive?: CreditcardmerchantGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditcardmerchantGetAutocompleteV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardmerchantGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardmerchantApi.creditcardmerchantGetAutocompleteV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Creditcardmerchant list
         * @param {CreditcardmerchantGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardmerchantGetListV1(eOrderBy?: CreditcardmerchantGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditcardmerchantGetListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardmerchantGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardmerchantApi.creditcardmerchantGetListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve an existing Creditcardmerchant
         * @param {number} pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditcardmerchantGetObjectV2(pkiCreditcardmerchantID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditcardmerchantGetObjectV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditcardmerchantGetObjectV2(pkiCreditcardmerchantID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectCreditcardmerchantApi.creditcardmerchantGetObjectV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectCreditcardmerchantApi - factory interface
 * @export
 */
export const ObjectCreditcardmerchantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectCreditcardmerchantApiFp(configuration)
    return {
        /**
         * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
         * @summary Retrieve Creditcardmerchants and IDs
         * @param {CreditcardmerchantGetAutocompleteV2SSelectorEnum} sSelector The type of Creditcardmerchants to return
         * @param {CreditcardmerchantGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
         * @param {string} [sQuery] Allow to filter the returned results
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardmerchantGetAutocompleteV2(sSelector: CreditcardmerchantGetAutocompleteV2SSelectorEnum, eFilterActive?: CreditcardmerchantGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig): AxiosPromise<CreditcardmerchantGetAutocompleteV2Response> {
            return localVarFp.creditcardmerchantGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Creditcardmerchant list
         * @param {CreditcardmerchantGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
         * @param {number} [iRowMax] 
         * @param {number} [iRowOffset] 
         * @param {HeaderAcceptLanguage} [acceptLanguage] 
         * @param {string} [sFilter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardmerchantGetListV1(eOrderBy?: CreditcardmerchantGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreditcardmerchantGetListV1Response> {
            return localVarFp.creditcardmerchantGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an existing Creditcardmerchant
         * @param {number} pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditcardmerchantGetObjectV2(pkiCreditcardmerchantID: number, options?: RawAxiosRequestConfig): AxiosPromise<CreditcardmerchantGetObjectV2Response> {
            return localVarFp.creditcardmerchantGetObjectV2(pkiCreditcardmerchantID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectCreditcardmerchantApi - object-oriented interface
 * @export
 * @class ObjectCreditcardmerchantApi
 * @extends {BaseAPI}
 */
export class ObjectCreditcardmerchantApi extends BaseAPI {
    /**
     * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
     * @summary Retrieve Creditcardmerchants and IDs
     * @param {CreditcardmerchantGetAutocompleteV2SSelectorEnum} sSelector The type of Creditcardmerchants to return
     * @param {CreditcardmerchantGetAutocompleteV2EFilterActiveEnum} [eFilterActive] Specify which results we want to display.
     * @param {string} [sQuery] Allow to filter the returned results
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardmerchantApi
     */
    public creditcardmerchantGetAutocompleteV2(sSelector: CreditcardmerchantGetAutocompleteV2SSelectorEnum, eFilterActive?: CreditcardmerchantGetAutocompleteV2EFilterActiveEnum, sQuery?: string, acceptLanguage?: HeaderAcceptLanguage, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardmerchantApiFp(this.configuration).creditcardmerchantGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Creditcardmerchant list
     * @param {CreditcardmerchantGetListV1EOrderByEnum} [eOrderBy] Specify how you want the results to be sorted
     * @param {number} [iRowMax] 
     * @param {number} [iRowOffset] 
     * @param {HeaderAcceptLanguage} [acceptLanguage] 
     * @param {string} [sFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardmerchantApi
     */
    public creditcardmerchantGetListV1(eOrderBy?: CreditcardmerchantGetListV1EOrderByEnum, iRowMax?: number, iRowOffset?: number, acceptLanguage?: HeaderAcceptLanguage, sFilter?: string, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardmerchantApiFp(this.configuration).creditcardmerchantGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an existing Creditcardmerchant
     * @param {number} pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectCreditcardmerchantApi
     */
    public creditcardmerchantGetObjectV2(pkiCreditcardmerchantID: number, options?: RawAxiosRequestConfig) {
        return ObjectCreditcardmerchantApiFp(this.configuration).creditcardmerchantGetObjectV2(pkiCreditcardmerchantID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreditcardmerchantGetAutocompleteV2SSelectorEnum = {
    All: 'All'
} as const;
export type CreditcardmerchantGetAutocompleteV2SSelectorEnum = typeof CreditcardmerchantGetAutocompleteV2SSelectorEnum[keyof typeof CreditcardmerchantGetAutocompleteV2SSelectorEnum];
/**
 * @export
 */
export const CreditcardmerchantGetAutocompleteV2EFilterActiveEnum = {
    All: 'All',
    Active: 'Active',
    Inactive: 'Inactive'
} as const;
export type CreditcardmerchantGetAutocompleteV2EFilterActiveEnum = typeof CreditcardmerchantGetAutocompleteV2EFilterActiveEnum[keyof typeof CreditcardmerchantGetAutocompleteV2EFilterActiveEnum];
/**
 * @export
 */
export const CreditcardmerchantGetListV1EOrderByEnum = {
    pkiCreditcardmerchantID_ASC: 'pkiCreditcardmerchantID_ASC',
    pkiCreditcardmerchantID_DESC: 'pkiCreditcardmerchantID_DESC',
    fkiBankaccountID_ASC: 'fkiBankaccountID_ASC',
    fkiBankaccountID_DESC: 'fkiBankaccountID_DESC',
    fkiLanguageID_ASC: 'fkiLanguageID_ASC',
    fkiLanguageID_DESC: 'fkiLanguageID_DESC',
    bCreditcardmerchantDenyvisa_ASC: 'bCreditcardmerchantDenyvisa_ASC',
    bCreditcardmerchantDenyvisa_DESC: 'bCreditcardmerchantDenyvisa_DESC',
    bCreditcardmerchantDenymastercard_ASC: 'bCreditcardmerchantDenymastercard_ASC',
    bCreditcardmerchantDenymastercard_DESC: 'bCreditcardmerchantDenymastercard_DESC',
    bCreditcardmerchantDenyamex_ASC: 'bCreditcardmerchantDenyamex_ASC',
    bCreditcardmerchantDenyamex_DESC: 'bCreditcardmerchantDenyamex_DESC',
    bCreditcardmerchantIsactive_ASC: 'bCreditcardmerchantIsactive_ASC',
    bCreditcardmerchantIsactive_DESC: 'bCreditcardmerchantIsactive_DESC',
    sCreditcardmerchantDescription_ASC: 'sCreditcardmerchantDescription_ASC',
    sCreditcardmerchantDescription_DESC: 'sCreditcardmerchantDescription_DESC',
    sCreditcardmerchantStoreid_ASC: 'sCreditcardmerchantStoreid_ASC',
    sCreditcardmerchantStoreid_DESC: 'sCreditcardmerchantStoreid_DESC'
} as const;
export type CreditcardmerchantGetListV1EOrderByEnum = typeof CreditcardmerchantGetListV1EOrderByEnum[keyof typeof CreditcardmerchantGetListV1EOrderByEnum];
