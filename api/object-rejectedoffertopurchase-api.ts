/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CommonResponseError } from '../model';
// @ts-ignore
import { RejectedoffertopurchaseGetCommunicationListV1Response } from '../model';
// @ts-ignore
import { RequestSignature, IHeadersData } from '../api/request-signature';
/**
 * ObjectRejectedoffertopurchaseApi - axios parameter creator
 * @export
 */
export const ObjectRejectedoffertopurchaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve Communication list
         * @param {number} pkiRejectedoffertopurchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectedoffertopurchaseGetCommunicationListV1: async (pkiRejectedoffertopurchaseID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pkiRejectedoffertopurchaseID' is not null or undefined
            assertParamExists('rejectedoffertopurchaseGetCommunicationListV1', 'pkiRejectedoffertopurchaseID', pkiRejectedoffertopurchaseID)
            const localVarPath = `/1/object/rejectedoffertopurchase/{pkiRejectedoffertopurchaseID}/getCommunicationList`
                .replace(`{${"pkiRejectedoffertopurchaseID"}}`, encodeURIComponent(String(pkiRejectedoffertopurchaseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = DUMMY_BASE_URL
            if (configuration && configuration.basePath) basePath = configuration.basePath
            //const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            const localVarUrlObj = new URL(localVarPath, basePath);

            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            //localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.headers = {...headersFromBaseOptions, ...localVarHeaderParameter,  ...options.headers};

            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret()
                if (secret) {
                    const headers:IHeadersData = {
                        authorization: configuration.apiKey as string,
                        secret: secret as string,
                        method: 'GET' as string,
                        url: basePath + toPathString(localVarUrlObj) as string,
                        body: localVarRequestOptions.data || '' as string
                    }
                    const signatureHeaders = RequestSignature.getHeaders(headers)
                    localVarRequestOptions.headers = { ...localVarRequestOptions.headers, ...signatureHeaders }
                } 
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectRejectedoffertopurchaseApi - functional programming interface
 * @export
 */
export const ObjectRejectedoffertopurchaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectRejectedoffertopurchaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve Communication list
         * @param {number} pkiRejectedoffertopurchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectedoffertopurchaseGetCommunicationListV1(pkiRejectedoffertopurchaseID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RejectedoffertopurchaseGetCommunicationListV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectedoffertopurchaseGetCommunicationListV1(pkiRejectedoffertopurchaseID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectRejectedoffertopurchaseApi.rejectedoffertopurchaseGetCommunicationListV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectRejectedoffertopurchaseApi - factory interface
 * @export
 */
export const ObjectRejectedoffertopurchaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectRejectedoffertopurchaseApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve Communication list
         * @param {number} pkiRejectedoffertopurchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectedoffertopurchaseGetCommunicationListV1(pkiRejectedoffertopurchaseID: number, options?: any): AxiosPromise<RejectedoffertopurchaseGetCommunicationListV1Response> {
            return localVarFp.rejectedoffertopurchaseGetCommunicationListV1(pkiRejectedoffertopurchaseID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectRejectedoffertopurchaseApi - object-oriented interface
 * @export
 * @class ObjectRejectedoffertopurchaseApi
 * @extends {BaseAPI}
 */
export class ObjectRejectedoffertopurchaseApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve Communication list
     * @param {number} pkiRejectedoffertopurchaseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectRejectedoffertopurchaseApi
     */
    public rejectedoffertopurchaseGetCommunicationListV1(pkiRejectedoffertopurchaseID: number, options?: RawAxiosRequestConfig) {
        return ObjectRejectedoffertopurchaseApiFp(this.configuration).rejectedoffertopurchaseGetCommunicationListV1(pkiRejectedoffertopurchaseID, options).then((request) => request(this.axios, this.basePath));
    }
}

